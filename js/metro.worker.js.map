{"version":3,"sources":["webpack:///metro.worker.js","webpack:///webpack/bootstrap 3e8d00af32e7454e0071","webpack:///./src/genMetroDist.js","webpack:///./src/ChainDist.js","webpack:///./src/MarchingSquares.js","webpack:///./src/drawContour.js","webpack:///./src/interpolate.js","webpack:///./src/metropolis.js","webpack:///./~/ramda/dist/ramda.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","transpose","zeroFill","reduce","r","Math","max","map","j","n","join","split","Number","genMetroDist","iterations","xDomain","yDomain","width","numPoints","variance","acceptFunc","chain","_metropolis2","_ChainDist2","Object","defineProperty","value","_metropolis","_drawContour","_ChainDist","onmessage","e","acceptPercent","setPercent","percent","chainDist","apply","undefined","data","concat","postMessage","ChainDist","xPoints","_interpolate2","yPoints","buckets","_ramda","x","ys","y","bucket","xy","findX","findBucket","findYInBucket","forEach","xBucket","xyBucket","drop","bucketsToPlotData","_interpolate","curry","propName","bucketList","num","getVal","prop","maxVal","last","minVal","start","end","middle","round","currVal","nextVal","xBucketToYs","compose","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","Symbol","iterator","constructor","MarchingSquaresJS","my","interpolateX","y0","y1","myArray","toString","indexOf","computeBandGrid","minV","bandwidth","rows","cols","BandGrid","cells","maxV","abs","cval","tl","tr","br","bl","isNaN","cval_real","flipped","average","topleft","topright","bottomleft","bottomright","righttop","rightbottom","lefttop","leftbottom","edges","push","isoBandEdgeBL","isoBandEdgeRB","isoBandEdgeRT","isoBandEdgeLT","isoBandEdgeBR","isoBandEdgeLB","isoBandEdgeTL","console","log","BandGrid2AreaPaths","grid","areas","currentPolygon","cell","prev","getStartXY","next","q","getExitXY","o","missing","traceOutOfGridPath","path","pp","d_x","d_y","d_o","closed","Node3","Node2","Node1","Node0","deleteEdge","edgeIdx","k","pop","id_x","isoBandNextXRB","isoBandNextYRB","isoBandNextORB","isoBandNextXRT","isoBandNextYRT","isoBandNextORT","isoBandNextXLB","isoBandNextYLB","isoBandNextOLB","isoBandNextXLT","isoBandNextYLT","isoBandNextOLT","isoBandNextXTL","isoBandNextYTL","isoBandNextOTL","isoBandEdgeTR","isoBandNextXTR","isoBandNextYTR","isoBandNextOTR","isoBandNextXBL","isoBandNextYBL","isoBandNextOBL","isoBandNextXBR","isoBandNextYBR","isoBandNextOBR","BandGrid2Areas","area_idx","g","gg","a","polygon_table","aa","aaa","defaultSettings","successCallback","progressCallback","verbose","polygons","settings","IsoBands","options","optionKeys","keys","key","val","ret","p00","p01","p02","p03","p04","p05","p06","p07","p08","p09","p10","p11","p12","p13","p14","p15","p16","p17","p18","p19","p20","p21","p22","p23","p24","p25","p26","p27","p28","p29","p30","p31","p32","p33","p34","p35","p36","p37","p38","p39","drawContour","svg","customZs","reverse","zs","xSize","ySize","xs","d3","range","height","xScale","scale","linear","domain","yScale","colours","rgb","isoBands","lowerBand","upperBand","band","_MarchingSquares2","coords","level","selectAll","enter","append","style","d","attr","line","dat","interpolate","_MarchingSquares","min","step","curr","vals","normalRandom","mean","V1","V2","S","U1","random","U2","X","sqrt","metropolisHastings","current","oldlik","rosenbrock","perturb","accepted","candidate","newlik","acceptProbability","pow","__","@@functional/placeholder","_arity","fn","this","arguments","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_arrayFromIterator","iter","list","done","_arrayOf","prototype","slice","_cloneRegExp","pattern","RegExp","source","global","ignoreCase","multiline","sticky","unicode","_complement","f","_concat","set1","set2","idx","len1","len2","result","_containsWith","pred","len","_filter","_forceReduced","@@transducer/value","@@transducer/reduced","_functionName","match","String","_has","hasOwnProperty","_identity","_isArguments","_isArray","_isFunction","_isInteger","isInteger","_isNumber","_isObject","_isPlaceholder","_isRegExp","_isString","_isTransformer","_map","functor","_objectAssign","target","TypeError","output","nextKey","_of","_pipe","_pipeP","ctx","then","_quote","s","escaped","replace","_reduced","_slice","args","to","_toISOString","pad","Date","toISOString","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_xfBase","init","xf","_xwrap","XWrap","acc","_aperture","limit","_assign","assign","_checkForMethod","methodname","_curry1","f1","_curry2","f2","b","_b","_a","_curry3","f3","_c","_curryN","received","combined","argsIdx","left","combinedIdx","_dispatchable","transducer","_dropLastWhile","_xall","XAll","all","input","_xany","XAny","any","_xaperture","XAperture","pos","full","store","getCopy","_xdrop","XDrop","_xdropLast","XDropLast","_xdropRepeatsWith","XDropRepeatsWith","lastValue","seenFirstValue","sameAsLast","_xdropWhile","XDropWhile","_xfilter","XFilter","_xfind","XFind","found","_xfindIndex","XFindIndex","_xfindLast","XFindLast","_xfindLastIndex","XFindLastIndex","lastIdx","_xmap","XMap","_xtake","XTake","_xtakeWhile","XTakeWhile","add","adjust","_idx","_list","always","and","aperture","el","assoc","assocPath","bind","thisObj","clamp","comparator","countBy","counts","curryN","dec","defaultTo","v","differenceWith","first","second","out","firstLen","dissoc","dissocPath","head","tail","divide","dropWhile","empty","evolve","transformations","object","transformation","type","find","findIndex","findLast","findLastIndex","fromPairs","pairs","gt","gte","has","hasIn","identical","identity","ifElse","condition","onTrue","onFalse","inc","insert","elt","splice","insertAll","elts","intersperse","separator","is","Ctor","isArrayLike","nodeType","isNil","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","nIdx","ks","checkArgsLength","keysIn","NaN","lt","lte","mapAccum","tuple","mapAccumRight","rx","str","mathMod","maxBy","merge","l","mergeAll","mergeWithKey","minBy","modulo","multiply","nAry","negate","none","not","nth","offset","charAt","nthArg","objOf","of","once","called","or","over","Identity","lens","pair","fst","snd","paths","pathOr","pathSatisfies","propPath","pick","names","pickAll","name","pickBy","test","prepend","propOr","propSatisfies","props","ps","reduceRight","reduced","remove","count","regex","replacement","scan","set","fromIndex","toIndex","sort","sortBy","bb","splitAt","index","array","splitEvery","splitWhen","prefix","subtract","Infinity","take","takeLastWhile","takeWhile","tap","times","RangeError","toPairs","toPairsIn","outerlist","innerlist","trim","ws","zeroWidth","hasProtoTrim","beginRx","endRx","tryCatch","tryer","catcher","unapply","unary","uncurryN","depth","endIdx","currentDepth","unfold","seed","uniqWith","unless","whenFalseFn","until","update","useWith","transformers","values","valuesIn","vs","view","Const","when","whenTrueFn","where","spec","testObj","wrap","wrapper","xprod","ilen","jlen","zip","rv","zipObj","zipWith","F","T","_clone","refFrom","refTo","deep","copy","copiedValue","valueOf","_createPartialApplicator","_dropLast","_equals","stackA","stackB","equals","message","entries","keysA","_makeFlat","recursive","flatt","_reduce","_arrayReduce","_iterableReduce","_methodReduce","symIterator","_stepCat","_stepCatArray","@@transducer/init","@@transducer/step","@@transducer/result","_stepCatString","_stepCatObject","_xdropLastWhile","XDropLastWhile","retained","retain","flush","_xgroupBy","XGroupBy","inputs","addIndex","origFn","binary","clone","dropLast","dropLastWhile","filter","filterable","flatten","flip","groupBy","indexBy","elem","intersectionWith","list1","list2","lookupList","filteredList","results","into","invert","invertObj","isEmpty","lastIndexOf","mapObjIndexed","mergeWith","_","_l","_r","partial","partialRight","pathEq","_path","pluck","project","propEq","propIs","reduceBy","keyFn","valueFn","valueAcc","reject","repeat","sum","takeLast","transduce","unionWith","whereEq","_flatCat","preservingReduced","rxf","_indexOf","inf","_xchain","allPass","preds","allUniq","anyPass","ap","applicative","applySpec","monad","cond","arity","constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","converge","after","fns","context","dropRepeatsWith","eqBy","eqProps","obj1","obj2","juxt","getter","setter","toFunctorFn","focus","lensIndex","lensPath","lensProp","liftN","lifted","median","partition","pipe","pipeP","product","sequence","traversable","traverse","unnest","_contains","_toString","seen","recur","mapPairs","repr","composeK","composeP","construct","difference","dropRepeats","lift","omit","pipeK","without","_Set","_nativeSet","Set","_items","hasOrAdd","shouldAdd","prevSize","newSize","size","bIdx","both","complement","either","invoker","method","Function","memoize","cache","toLower","toUpper","uniqBy","appliedItem","symmetricDifference","symmetricDifferenceWith","uniq","intersection","union","R"],"mappings":"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uB,YACAC,YACAnxB,UACAkuB,QACAkD,aACAhD,cACA5O,YACAwP,YACAhT,WACA1a,SACA4a,UACAC,OACAC,aACAiV,cACA/U,kBACAK,UACAC,cACAG,UACA5b,QACAqpB,YACAC,iBACA6G,eACAlC,mBACApS,aACAuV,UACAtV,SACAoS,QACAC,WACA7G,UACAvL,UACAwN,UACAnN,QACAC,aACAC,YACAC,iBACAkN,WACAC,QACA7pB,WACA2c,aACAmN,WACAjN,MACAC,OACAC,OACAC,SACAnB,QACAoB,aACAC,YACAC,UACAI,OACAwM,WACA3nB,WACAsT,QACA8H,UACAG,aACAyU,gBACAnI,oBACApM,eACA0M,QACAC,UACAC,aACA+G,WACAzT,MACAE,eACAyM,WACAvM,SACAhhB,QACAsxB,QACAzlB,QACA6V,UACAhe,QACA8pB,eACAnuB,UACAskB,QACAgO,aACAC,YACAC,YACAuB,QACAtB,SACAlQ,MACAC,OACAhiB,OACAiiB,YACAE,iBACAyL,iBACAnY,SACA6M,WACAviB,OACAwiB,SACAnR,QACA+gB,UACAwC,WACAnS,SACAE,YACAmL,aACAlL,gBACA5R,OACA6R,SACAC,UACAC,YACAC,QACAC,UACAC,QACAC,OACAC,OACAG,UACAC,SACAC,MACAgQ,QACA/P,QACAE,MACAC,QACAG,QACAkK,WACAC,gBACAkE,aACA7pB,QACA4lB,UACAhK,UACAC,iBACAE,QACAE,WACAE,UACA2N,QACAoB,SACAnB,SACAjE,SACAzJ,WACA2N,WACAjE,WACA3qB,QACA4qB,UACAC,UACA3J,UACAC,iBACAC,SACA1V,SACAzP,UACA6uB,YACAxJ,eACAC,WACA2J,UACA1J,UACA2J,UACAtX,WACAzI,WACAwW,QACAiN,YACAhN,OACA1R,SACA6R,QACAC,UACAxlB,SACA0lB,WACAG,cACAC,aACAE,YACA2I,OACAkG,uBACAC,2BACApW,QACAwH,QACA0I,YACAzI,iBACAC,aACAC,OACA9B,QACA+B,SACAmO,WACAjO,WACAC,aACA1hB,YACA2vB,WACA7F,aACAvvB,aACAgzB,YACA1L,QACAM,YACAhI,QACAmI,WACAC,SACAC,YACAI,UACAsN,SACAnG,aACAiG,QACAJ,UACA9M,YACAC,UACAyK,UACAvK,SACAC,UACAC,WACAE,UACAC,YACAE,QACAE,QACAE,SACAoG,WACAuE,WACAxK,QACAE,SACAG,OACAE,UACAC,WAOAnrB,GAAAD,QAAAg3B,KAOC52B,KAAAiU","file":"metro.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/js/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = genMetroDist;\n\t\n\tvar _metropolis = __webpack_require__(5);\n\t\n\tvar _metropolis2 = _interopRequireDefault(_metropolis);\n\t\n\tvar _drawContour = __webpack_require__(3);\n\t\n\tvar _drawContour2 = _interopRequireDefault(_drawContour);\n\t\n\tvar _ChainDist = __webpack_require__(1);\n\t\n\tvar _ChainDist2 = _interopRequireDefault(_ChainDist);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction transpose(m) {\n\t  return zeroFill(m.reduce(function (m, r) {\n\t    return Math.max(m, r.length);\n\t  }, 0)).map(function (r, i) {\n\t    return zeroFill(m.length).map(function (c, j) {\n\t      return m[j][i];\n\t    });\n\t  });\n\t}function zeroFill(n) {\n\t  return new Array(n + 1).join(\"0\").split(\"\").map(Number);\n\t}\n\t\n\tfunction genMetroDist(iterations, xDomain, yDomain, width, numPoints, variance, acceptFunc) {\n\t  // Generate data\n\t  var chain = (0, _metropolis2.default)(iterations, variance, acceptFunc);\n\t  return transpose((0, _ChainDist2.default)(xDomain, yDomain, numPoints, chain));\n\t}\n\t\n\tonmessage = function onmessage(e) {\n\t  var acceptPercent = 0;\n\t  var setPercent = function setPercent(percent) {\n\t    return acceptPercent = percent;\n\t  };\n\t  var chainDist = genMetroDist.apply(undefined, _toConsumableArray(e.data).concat([setPercent]));\n\t  postMessage([chainDist, acceptPercent]);\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = ChainDist;\n\t\n\tvar _ramda = __webpack_require__(6);\n\t\n\tvar _interpolate = __webpack_require__(4);\n\t\n\tvar _interpolate2 = _interopRequireDefault(_interpolate);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tvar findBucket = (0, _ramda.curry)(function (propName, bucketList, num) {\n\t  var getVal = (0, _ramda.prop)(propName),\n\t      maxVal = getVal((0, _ramda.last)(bucketList)),\n\t      minVal = getVal(bucketList[0]);\n\t\n\t  if (num >= maxVal) return undefined;\n\t  if (num <= minVal) return undefined;\n\t\n\t  var length = bucketList.length;\n\t  var curr = 0;\n\t  var start = 0;\n\t  var end = length;\n\t  var middle = 0;\n\t\n\t  while (true) {\n\t    if (start > end) return undefined;\n\t    middle = Math.round((start + end) / 2);\n\t    if (middle + 1 >= length) return undefined;\n\t    var currVal = getVal(bucketList[middle]);\n\t    var nextVal = getVal(bucketList[middle + 1]);\n\t    if (num >= currVal && num <= nextVal) {\n\t      return bucketList[middle];\n\t    }\n\t    if (num < currVal) end = middle - 1;\n\t    if (num > currVal) start = middle + 1;\n\t  }\n\t  return undefined;\n\t});\n\t\n\tvar xBucketToYs = (0, _ramda.compose)((0, _ramda.map)((0, _ramda.prop)(\"bucket\")), (0, _ramda.prop)(\"ys\"));\n\tvar bucketsToPlotData = (0, _ramda.map)(xBucketToYs);\n\t\n\tfunction ChainDist(xDomain, yDomain, numPoints, chain) {\n\t  var xPoints = _interpolate2.default.apply(undefined, [numPoints].concat(_toConsumableArray(xDomain))),\n\t      yPoints = _interpolate2.default.apply(undefined, [numPoints].concat(_toConsumableArray(yDomain)));\n\t\n\t  var buckets = (0, _ramda.map)(function (x) {\n\t    return {\n\t      x: x,\n\t      ys: (0, _ramda.map)(function (y) {\n\t        return {\n\t          y: y, bucket: 0, xy: [x, y]\n\t        };\n\t      }, yPoints)\n\t    };\n\t  }, xPoints);\n\t\n\t  var findX = findBucket(\"x\", buckets);\n\t  var findYInBucket = findBucket(\"y\");\n\t\n\t  (0, _ramda.forEach)(function (xy) {\n\t    var xBucket = findX(xy[0]);\n\t    if (!xBucket) return;\n\t    var xyBucket = findYInBucket(xBucket.ys, xy[1]);\n\t    if (!xyBucket) return;\n\t    xyBucket.bucket += 1;\n\t  }, (0, _ramda.drop)(chain.length * 0.1, chain));\n\t\n\t  return bucketsToPlotData(buckets);\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;};var MarchingSquaresJS=function(my){var defaultSettings={successCallback:null,progressCallback:null,verbose:false,polygons:false};var settings={}; /*\n\t    Compute isobands(s) of a scalar 2D field given a certain\n\t    threshold and a bandwidth by applying the Marching Squares\n\t    Algorithm. The function returns a list of path coordinates\n\t    either for individual polygons within each grid cell, or the\n\t    outline of connected polygons.\n\t  */my.IsoBands=function(data,minV,bandwidth,options){ /* process options */options=options?options:{};var optionKeys=Object.keys(defaultSettings);for(var i=0;i<optionKeys.length;i++){var key=optionKeys[i];var val=options[key];val=typeof val!=='undefined'&&val!==null?val:defaultSettings[key];settings[key]=val;}if(settings.verbose)console.log(\"computing isobands for [\"+minV+\":\"+(minV+bandwidth)+\"]\");grid=computeBandGrid(data,minV,bandwidth);if(settings.verbose){if(settings.polygons){console.log(\"returning single polygons for each grid cell\");}else {console.log(\"returning polygon paths for entire data grid\");}}var ret;if(settings.polygons){ret=BandGrid2Areas(grid);}else {ret=BandGrid2AreaPaths(grid);}if(typeof settings.successCallback==='function')settings.successCallback(ret);return ret;}; /*\n\t    Thats all for the public interface, below follows the actual\n\t    implementation\n\t  */ /* Some private variables */var Node0=64,Node1=16,Node2=4,Node3=1; /*  For isoBands, each square is defined by the three states\n\t      of its corner points. However, since computers use power-2\n\t      values, we use 2bits per trit, i.e.:\n\t\n\t      00 ... below minV\n\t      01 ... between minV and maxV\n\t      10 ... above maxV\n\t\n\t      Hence we map the 4-trit configurations as follows:\n\t\n\t      0000 => 0\n\t      0001 => 1\n\t      0002 => 2\n\t      0010 => 4\n\t      0011 => 5\n\t      0012 => 6\n\t      0020 => 8\n\t      0021 => 9\n\t      0022 => 10\n\t      0100 => 16\n\t      0101 => 17\n\t      0102 => 18\n\t      0110 => 20\n\t      0111 => 21\n\t      0112 => 22\n\t      0120 => 24\n\t      0121 => 25\n\t      0122 => 26\n\t      0200 => 32\n\t      0201 => 33\n\t      0202 => 34\n\t      0210 => 36\n\t      0211 => 37\n\t      0212 => 38\n\t      0220 => 40\n\t      0221 => 41\n\t      0222 => 42\n\t      1000 => 64\n\t      1001 => 65\n\t      1002 => 66\n\t      1010 => 68\n\t      1011 => 69\n\t      1012 => 70\n\t      1020 => 72\n\t      1021 => 73\n\t      1022 => 74\n\t      1100 => 80\n\t      1101 => 81\n\t      1102 => 82\n\t      1110 => 84\n\t      1111 => 85\n\t      1112 => 86\n\t      1120 => 88\n\t      1121 => 89\n\t      1122 => 90\n\t      1200 => 96\n\t      1201 => 97\n\t      1202 => 98\n\t      1210 => 100\n\t      1211 => 101\n\t      1212 => 102\n\t      1220 => 104\n\t      1221 => 105\n\t      1222 => 106\n\t      2000 => 128\n\t      2001 => 129\n\t      2002 => 130\n\t      2010 => 132\n\t      2011 => 133\n\t      2012 => 134\n\t      2020 => 136\n\t      2021 => 137\n\t      2022 => 138\n\t      2100 => 144\n\t      2101 => 145\n\t      2102 => 146\n\t      2110 => 148\n\t      2111 => 149\n\t      2112 => 150\n\t      2120 => 152\n\t      2121 => 153\n\t      2122 => 154\n\t      2200 => 160\n\t      2201 => 161\n\t      2202 => 162\n\t      2210 => 164\n\t      2211 => 165\n\t      2212 => 166\n\t      2220 => 168\n\t      2221 => 169\n\t      2222 => 170\n\t  */ /*\n\t    The look-up tables for tracing back the contour path\n\t    of isoBands\n\t  */var isoBandNextXTL=[];var isoBandNextYTL=[];var isoBandNextOTL=[];var isoBandNextXTR=[];var isoBandNextYTR=[];var isoBandNextOTR=[];var isoBandNextXRT=[];var isoBandNextYRT=[];var isoBandNextORT=[];var isoBandNextXRB=[];var isoBandNextYRB=[];var isoBandNextORB=[];var isoBandNextXBL=[];var isoBandNextYBL=[];var isoBandNextOBL=[];var isoBandNextXBR=[];var isoBandNextYBR=[];var isoBandNextOBR=[];var isoBandNextXLT=[];var isoBandNextYLT=[];var isoBandNextOLT=[];var isoBandNextXLB=[];var isoBandNextYLB=[];var isoBandNextOLB=[];isoBandNextXRT[85]=isoBandNextXRB[85]=-1;isoBandNextYRT[85]=isoBandNextYRB[85]=0;isoBandNextORT[85]=isoBandNextORB[85]=1;isoBandNextXLT[85]=isoBandNextXLB[85]=1;isoBandNextYLT[85]=isoBandNextYLB[85]=0;isoBandNextOLT[85]=isoBandNextOLB[85]=1;isoBandNextXTL[85]=isoBandNextXTR[85]=0;isoBandNextYTL[85]=isoBandNextYTR[85]=-1;isoBandNextOTL[85]=isoBandNextOBL[85]=0;isoBandNextXBR[85]=isoBandNextXBL[85]=0;isoBandNextYBR[85]=isoBandNextYBL[85]=1;isoBandNextOTR[85]=isoBandNextOBR[85]=1; /* triangle cases */isoBandNextXLB[1]=isoBandNextXLB[169]=0;isoBandNextYLB[1]=isoBandNextYLB[169]=-1;isoBandNextOLB[1]=isoBandNextOLB[169]=0;isoBandNextXBL[1]=isoBandNextXBL[169]=-1;isoBandNextYBL[1]=isoBandNextYBL[169]=0;isoBandNextOBL[1]=isoBandNextOBL[169]=0;isoBandNextXRB[4]=isoBandNextXRB[166]=0;isoBandNextYRB[4]=isoBandNextYRB[166]=-1;isoBandNextORB[4]=isoBandNextORB[166]=1;isoBandNextXBR[4]=isoBandNextXBR[166]=1;isoBandNextYBR[4]=isoBandNextYBR[166]=0;isoBandNextOBR[4]=isoBandNextOBR[166]=0;isoBandNextXRT[16]=isoBandNextXRT[154]=0;isoBandNextYRT[16]=isoBandNextYRT[154]=1;isoBandNextORT[16]=isoBandNextORT[154]=1;isoBandNextXTR[16]=isoBandNextXTR[154]=1;isoBandNextYTR[16]=isoBandNextYTR[154]=0;isoBandNextOTR[16]=isoBandNextOTR[154]=1;isoBandNextXLT[64]=isoBandNextXLT[106]=0;isoBandNextYLT[64]=isoBandNextYLT[106]=1;isoBandNextOLT[64]=isoBandNextOLT[106]=0;isoBandNextXTL[64]=isoBandNextXTL[106]=-1;isoBandNextYTL[64]=isoBandNextYTL[106]=0;isoBandNextOTL[64]=isoBandNextOTL[106]=1; /* single trapezoid cases */isoBandNextXLT[2]=isoBandNextXLT[168]=0;isoBandNextYLT[2]=isoBandNextYLT[168]=-1;isoBandNextOLT[2]=isoBandNextOLT[168]=1;isoBandNextXLB[2]=isoBandNextXLB[168]=0;isoBandNextYLB[2]=isoBandNextYLB[168]=-1;isoBandNextOLB[2]=isoBandNextOLB[168]=0;isoBandNextXBL[2]=isoBandNextXBL[168]=-1;isoBandNextYBL[2]=isoBandNextYBL[168]=0;isoBandNextOBL[2]=isoBandNextOBL[168]=0;isoBandNextXBR[2]=isoBandNextXBR[168]=-1;isoBandNextYBR[2]=isoBandNextYBR[168]=0;isoBandNextOBR[2]=isoBandNextOBR[168]=1;isoBandNextXRT[8]=isoBandNextXRT[162]=0;isoBandNextYRT[8]=isoBandNextYRT[162]=-1;isoBandNextORT[8]=isoBandNextORT[162]=0;isoBandNextXRB[8]=isoBandNextXRB[162]=0;isoBandNextYRB[8]=isoBandNextYRB[162]=-1;isoBandNextORB[8]=isoBandNextORB[162]=1;isoBandNextXBL[8]=isoBandNextXBL[162]=1;isoBandNextYBL[8]=isoBandNextYBL[162]=0;isoBandNextOBL[8]=isoBandNextOBL[162]=1;isoBandNextXBR[8]=isoBandNextXBR[162]=1;isoBandNextYBR[8]=isoBandNextYBR[162]=0;isoBandNextOBR[8]=isoBandNextOBR[162]=0;isoBandNextXRT[32]=isoBandNextXRT[138]=0;isoBandNextYRT[32]=isoBandNextYRT[138]=1;isoBandNextORT[32]=isoBandNextORT[138]=1;isoBandNextXRB[32]=isoBandNextXRB[138]=0;isoBandNextYRB[32]=isoBandNextYRB[138]=1;isoBandNextORB[32]=isoBandNextORB[138]=0;isoBandNextXTL[32]=isoBandNextXTL[138]=1;isoBandNextYTL[32]=isoBandNextYTL[138]=0;isoBandNextOTL[32]=isoBandNextOTL[138]=0;isoBandNextXTR[32]=isoBandNextXTR[138]=1;isoBandNextYTR[32]=isoBandNextYTR[138]=0;isoBandNextOTR[32]=isoBandNextOTR[138]=1;isoBandNextXLB[128]=isoBandNextXLB[42]=0;isoBandNextYLB[128]=isoBandNextYLB[42]=1;isoBandNextOLB[128]=isoBandNextOLB[42]=1;isoBandNextXLT[128]=isoBandNextXLT[42]=0;isoBandNextYLT[128]=isoBandNextYLT[42]=1;isoBandNextOLT[128]=isoBandNextOLT[42]=0;isoBandNextXTL[128]=isoBandNextXTL[42]=-1;isoBandNextYTL[128]=isoBandNextYTL[42]=0;isoBandNextOTL[128]=isoBandNextOTL[42]=1;isoBandNextXTR[128]=isoBandNextXTR[42]=-1;isoBandNextYTR[128]=isoBandNextYTR[42]=0;isoBandNextOTR[128]=isoBandNextOTR[42]=0; /* single rectangle cases */isoBandNextXRB[5]=isoBandNextXRB[165]=-1;isoBandNextYRB[5]=isoBandNextYRB[165]=0;isoBandNextORB[5]=isoBandNextORB[165]=0;isoBandNextXLB[5]=isoBandNextXLB[165]=1;isoBandNextYLB[5]=isoBandNextYLB[165]=0;isoBandNextOLB[5]=isoBandNextOLB[165]=0;isoBandNextXBR[20]=isoBandNextXBR[150]=0;isoBandNextYBR[20]=isoBandNextYBR[150]=1;isoBandNextOBR[20]=isoBandNextOBR[150]=1;isoBandNextXTR[20]=isoBandNextXTR[150]=0;isoBandNextYTR[20]=isoBandNextYTR[150]=-1;isoBandNextOTR[20]=isoBandNextOTR[150]=1;isoBandNextXRT[80]=isoBandNextXRT[90]=-1;isoBandNextYRT[80]=isoBandNextYRT[90]=0;isoBandNextORT[80]=isoBandNextORT[90]=1;isoBandNextXLT[80]=isoBandNextXLT[90]=1;isoBandNextYLT[80]=isoBandNextYLT[90]=0;isoBandNextOLT[80]=isoBandNextOLT[90]=1;isoBandNextXBL[65]=isoBandNextXBL[105]=0;isoBandNextYBL[65]=isoBandNextYBL[105]=1;isoBandNextOBL[65]=isoBandNextOBL[105]=0;isoBandNextXTL[65]=isoBandNextXTL[105]=0;isoBandNextYTL[65]=isoBandNextYTL[105]=-1;isoBandNextOTL[65]=isoBandNextOTL[105]=0;isoBandNextXRT[160]=isoBandNextXRT[10]=-1;isoBandNextYRT[160]=isoBandNextYRT[10]=0;isoBandNextORT[160]=isoBandNextORT[10]=1;isoBandNextXRB[160]=isoBandNextXRB[10]=-1;isoBandNextYRB[160]=isoBandNextYRB[10]=0;isoBandNextORB[160]=isoBandNextORB[10]=0;isoBandNextXLB[160]=isoBandNextXLB[10]=1;isoBandNextYLB[160]=isoBandNextYLB[10]=0;isoBandNextOLB[160]=isoBandNextOLB[10]=0;isoBandNextXLT[160]=isoBandNextXLT[10]=1;isoBandNextYLT[160]=isoBandNextYLT[10]=0;isoBandNextOLT[160]=isoBandNextOLT[10]=1;isoBandNextXBR[130]=isoBandNextXBR[40]=0;isoBandNextYBR[130]=isoBandNextYBR[40]=1;isoBandNextOBR[130]=isoBandNextOBR[40]=1;isoBandNextXBL[130]=isoBandNextXBL[40]=0;isoBandNextYBL[130]=isoBandNextYBL[40]=1;isoBandNextOBL[130]=isoBandNextOBL[40]=0;isoBandNextXTL[130]=isoBandNextXTL[40]=0;isoBandNextYTL[130]=isoBandNextYTL[40]=-1;isoBandNextOTL[130]=isoBandNextOTL[40]=0;isoBandNextXTR[130]=isoBandNextXTR[40]=0;isoBandNextYTR[130]=isoBandNextYTR[40]=-1;isoBandNextOTR[130]=isoBandNextOTR[40]=1; /* single hexagon cases */isoBandNextXRB[37]=isoBandNextXRB[133]=0;isoBandNextYRB[37]=isoBandNextYRB[133]=1;isoBandNextORB[37]=isoBandNextORB[133]=1;isoBandNextXLB[37]=isoBandNextXLB[133]=0;isoBandNextYLB[37]=isoBandNextYLB[133]=1;isoBandNextOLB[37]=isoBandNextOLB[133]=0;isoBandNextXTL[37]=isoBandNextXTL[133]=-1;isoBandNextYTL[37]=isoBandNextYTL[133]=0;isoBandNextOTL[37]=isoBandNextOTL[133]=0;isoBandNextXTR[37]=isoBandNextXTR[133]=1;isoBandNextYTR[37]=isoBandNextYTR[133]=0;isoBandNextOTR[37]=isoBandNextOTR[133]=0;isoBandNextXBR[148]=isoBandNextXBR[22]=-1;isoBandNextYBR[148]=isoBandNextYBR[22]=0;isoBandNextOBR[148]=isoBandNextOBR[22]=0;isoBandNextXLB[148]=isoBandNextXLB[22]=0;isoBandNextYLB[148]=isoBandNextYLB[22]=-1;isoBandNextOLB[148]=isoBandNextOLB[22]=1;isoBandNextXLT[148]=isoBandNextXLT[22]=0;isoBandNextYLT[148]=isoBandNextYLT[22]=1;isoBandNextOLT[148]=isoBandNextOLT[22]=1;isoBandNextXTR[148]=isoBandNextXTR[22]=-1;isoBandNextYTR[148]=isoBandNextYTR[22]=0;isoBandNextOTR[148]=isoBandNextOTR[22]=1;isoBandNextXRT[82]=isoBandNextXRT[88]=0;isoBandNextYRT[82]=isoBandNextYRT[88]=-1;isoBandNextORT[82]=isoBandNextORT[88]=1;isoBandNextXBR[82]=isoBandNextXBR[88]=1;isoBandNextYBR[82]=isoBandNextYBR[88]=0;isoBandNextOBR[82]=isoBandNextOBR[88]=1;isoBandNextXBL[82]=isoBandNextXBL[88]=-1;isoBandNextYBL[82]=isoBandNextYBL[88]=0;isoBandNextOBL[82]=isoBandNextOBL[88]=1;isoBandNextXLT[82]=isoBandNextXLT[88]=0;isoBandNextYLT[82]=isoBandNextYLT[88]=-1;isoBandNextOLT[82]=isoBandNextOLT[88]=0;isoBandNextXRT[73]=isoBandNextXRT[97]=0;isoBandNextYRT[73]=isoBandNextYRT[97]=1;isoBandNextORT[73]=isoBandNextORT[97]=0;isoBandNextXRB[73]=isoBandNextXRB[97]=0;isoBandNextYRB[73]=isoBandNextYRB[97]=-1;isoBandNextORB[73]=isoBandNextORB[97]=0;isoBandNextXBL[73]=isoBandNextXBL[97]=1;isoBandNextYBL[73]=isoBandNextYBL[97]=0;isoBandNextOBL[73]=isoBandNextOBL[97]=0;isoBandNextXTL[73]=isoBandNextXTL[97]=1;isoBandNextYTL[73]=isoBandNextYTL[97]=0;isoBandNextOTL[73]=isoBandNextOTL[97]=1;isoBandNextXRT[145]=isoBandNextXRT[25]=0;isoBandNextYRT[145]=isoBandNextYRT[25]=-1;isoBandNextORT[145]=isoBandNextORT[25]=0;isoBandNextXBL[145]=isoBandNextXBL[25]=1;isoBandNextYBL[145]=isoBandNextYBL[25]=0;isoBandNextOBL[145]=isoBandNextOBL[25]=1;isoBandNextXLB[145]=isoBandNextXLB[25]=0;isoBandNextYLB[145]=isoBandNextYLB[25]=1;isoBandNextOLB[145]=isoBandNextOLB[25]=1;isoBandNextXTR[145]=isoBandNextXTR[25]=-1;isoBandNextYTR[145]=isoBandNextYTR[25]=0;isoBandNextOTR[145]=isoBandNextOTR[25]=0;isoBandNextXRB[70]=isoBandNextXRB[100]=0;isoBandNextYRB[70]=isoBandNextYRB[100]=1;isoBandNextORB[70]=isoBandNextORB[100]=0;isoBandNextXBR[70]=isoBandNextXBR[100]=-1;isoBandNextYBR[70]=isoBandNextYBR[100]=0;isoBandNextOBR[70]=isoBandNextOBR[100]=1;isoBandNextXLT[70]=isoBandNextXLT[100]=0;isoBandNextYLT[70]=isoBandNextYLT[100]=-1;isoBandNextOLT[70]=isoBandNextOLT[100]=1;isoBandNextXTL[70]=isoBandNextXTL[100]=1;isoBandNextYTL[70]=isoBandNextYTL[100]=0;isoBandNextOTL[70]=isoBandNextOTL[100]=0; /* single pentagon cases */isoBandNextXRB[101]=isoBandNextXRB[69]=0;isoBandNextYRB[101]=isoBandNextYRB[69]=1;isoBandNextORB[101]=isoBandNextORB[69]=0;isoBandNextXTL[101]=isoBandNextXTL[69]=1;isoBandNextYTL[101]=isoBandNextYTL[69]=0;isoBandNextOTL[101]=isoBandNextOTL[69]=0;isoBandNextXLB[149]=isoBandNextXLB[21]=0;isoBandNextYLB[149]=isoBandNextYLB[21]=1;isoBandNextOLB[149]=isoBandNextOLB[21]=1;isoBandNextXTR[149]=isoBandNextXTR[21]=-1;isoBandNextYTR[149]=isoBandNextYTR[21]=0;isoBandNextOTR[149]=isoBandNextOTR[21]=0;isoBandNextXBR[86]=isoBandNextXBR[84]=-1;isoBandNextYBR[86]=isoBandNextYBR[84]=0;isoBandNextOBR[86]=isoBandNextOBR[84]=1;isoBandNextXLT[86]=isoBandNextXLT[84]=0;isoBandNextYLT[86]=isoBandNextYLT[84]=-1;isoBandNextOLT[86]=isoBandNextOLT[84]=1;isoBandNextXRT[89]=isoBandNextXRT[81]=0;isoBandNextYRT[89]=isoBandNextYRT[81]=-1;isoBandNextORT[89]=isoBandNextORT[81]=0;isoBandNextXBL[89]=isoBandNextXBL[81]=1;isoBandNextYBL[89]=isoBandNextYBL[81]=0;isoBandNextOBL[89]=isoBandNextOBL[81]=1;isoBandNextXRT[96]=isoBandNextXRT[74]=0;isoBandNextYRT[96]=isoBandNextYRT[74]=1;isoBandNextORT[96]=isoBandNextORT[74]=0;isoBandNextXRB[96]=isoBandNextXRB[74]=-1;isoBandNextYRB[96]=isoBandNextYRB[74]=0;isoBandNextORB[96]=isoBandNextORB[74]=1;isoBandNextXLT[96]=isoBandNextXLT[74]=1;isoBandNextYLT[96]=isoBandNextYLT[74]=0;isoBandNextOLT[96]=isoBandNextOLT[74]=0;isoBandNextXTL[96]=isoBandNextXTL[74]=1;isoBandNextYTL[96]=isoBandNextYTL[74]=0;isoBandNextOTL[96]=isoBandNextOTL[74]=1;isoBandNextXRT[24]=isoBandNextXRT[146]=0;isoBandNextYRT[24]=isoBandNextYRT[146]=-1;isoBandNextORT[24]=isoBandNextORT[146]=1;isoBandNextXBR[24]=isoBandNextXBR[146]=1;isoBandNextYBR[24]=isoBandNextYBR[146]=0;isoBandNextOBR[24]=isoBandNextOBR[146]=1;isoBandNextXBL[24]=isoBandNextXBL[146]=0;isoBandNextYBL[24]=isoBandNextYBL[146]=1;isoBandNextOBL[24]=isoBandNextOBL[146]=1;isoBandNextXTR[24]=isoBandNextXTR[146]=0;isoBandNextYTR[24]=isoBandNextYTR[146]=-1;isoBandNextOTR[24]=isoBandNextOTR[146]=0;isoBandNextXRB[6]=isoBandNextXRB[164]=-1;isoBandNextYRB[6]=isoBandNextYRB[164]=0;isoBandNextORB[6]=isoBandNextORB[164]=1;isoBandNextXBR[6]=isoBandNextXBR[164]=-1;isoBandNextYBR[6]=isoBandNextYBR[164]=0;isoBandNextOBR[6]=isoBandNextOBR[164]=0;isoBandNextXLB[6]=isoBandNextXLB[164]=0;isoBandNextYLB[6]=isoBandNextYLB[164]=-1;isoBandNextOLB[6]=isoBandNextOLB[164]=1;isoBandNextXLT[6]=isoBandNextXLT[164]=1;isoBandNextYLT[6]=isoBandNextYLT[164]=0;isoBandNextOLT[6]=isoBandNextOLT[164]=0;isoBandNextXBL[129]=isoBandNextXBL[41]=0;isoBandNextYBL[129]=isoBandNextYBL[41]=1;isoBandNextOBL[129]=isoBandNextOBL[41]=1;isoBandNextXLB[129]=isoBandNextXLB[41]=0;isoBandNextYLB[129]=isoBandNextYLB[41]=1;isoBandNextOLB[129]=isoBandNextOLB[41]=0;isoBandNextXTL[129]=isoBandNextXTL[41]=-1;isoBandNextYTL[129]=isoBandNextYTL[41]=0;isoBandNextOTL[129]=isoBandNextOTL[41]=0;isoBandNextXTR[129]=isoBandNextXTR[41]=0;isoBandNextYTR[129]=isoBandNextYTR[41]=-1;isoBandNextOTR[129]=isoBandNextOTR[41]=0;isoBandNextXBR[66]=isoBandNextXBR[104]=0;isoBandNextYBR[66]=isoBandNextYBR[104]=1;isoBandNextOBR[66]=isoBandNextOBR[104]=0;isoBandNextXBL[66]=isoBandNextXBL[104]=-1;isoBandNextYBL[66]=isoBandNextYBL[104]=0;isoBandNextOBL[66]=isoBandNextOBL[104]=1;isoBandNextXLT[66]=isoBandNextXLT[104]=0;isoBandNextYLT[66]=isoBandNextYLT[104]=-1;isoBandNextOLT[66]=isoBandNextOLT[104]=0;isoBandNextXTL[66]=isoBandNextXTL[104]=0;isoBandNextYTL[66]=isoBandNextYTL[104]=-1;isoBandNextOTL[66]=isoBandNextOTL[104]=1;isoBandNextXRT[144]=isoBandNextXRT[26]=-1;isoBandNextYRT[144]=isoBandNextYRT[26]=0;isoBandNextORT[144]=isoBandNextORT[26]=0;isoBandNextXLB[144]=isoBandNextXLB[26]=1;isoBandNextYLB[144]=isoBandNextYLB[26]=0;isoBandNextOLB[144]=isoBandNextOLB[26]=1;isoBandNextXLT[144]=isoBandNextXLT[26]=0;isoBandNextYLT[144]=isoBandNextYLT[26]=1;isoBandNextOLT[144]=isoBandNextOLT[26]=1;isoBandNextXTR[144]=isoBandNextXTR[26]=-1;isoBandNextYTR[144]=isoBandNextYTR[26]=0;isoBandNextOTR[144]=isoBandNextOTR[26]=1;isoBandNextXRB[36]=isoBandNextXRB[134]=0;isoBandNextYRB[36]=isoBandNextYRB[134]=1;isoBandNextORB[36]=isoBandNextORB[134]=1;isoBandNextXBR[36]=isoBandNextXBR[134]=0;isoBandNextYBR[36]=isoBandNextYBR[134]=1;isoBandNextOBR[36]=isoBandNextOBR[134]=0;isoBandNextXTL[36]=isoBandNextXTL[134]=0;isoBandNextYTL[36]=isoBandNextYTL[134]=-1;isoBandNextOTL[36]=isoBandNextOTL[134]=1;isoBandNextXTR[36]=isoBandNextXTR[134]=1;isoBandNextYTR[36]=isoBandNextYTR[134]=0;isoBandNextOTR[36]=isoBandNextOTR[134]=0;isoBandNextXRT[9]=isoBandNextXRT[161]=-1;isoBandNextYRT[9]=isoBandNextYRT[161]=0;isoBandNextORT[9]=isoBandNextORT[161]=0;isoBandNextXRB[9]=isoBandNextXRB[161]=0;isoBandNextYRB[9]=isoBandNextYRB[161]=-1;isoBandNextORB[9]=isoBandNextORB[161]=0;isoBandNextXBL[9]=isoBandNextXBL[161]=1;isoBandNextYBL[9]=isoBandNextYBL[161]=0;isoBandNextOBL[9]=isoBandNextOBL[161]=0;isoBandNextXLB[9]=isoBandNextXLB[161]=1;isoBandNextYLB[9]=isoBandNextYLB[161]=0;isoBandNextOLB[9]=isoBandNextOLB[161]=1; /* 8-sided cases */isoBandNextXRT[136]=0;isoBandNextYRT[136]=1;isoBandNextORT[136]=1;isoBandNextXRB[136]=0;isoBandNextYRB[136]=1;isoBandNextORB[136]=0;isoBandNextXBR[136]=-1;isoBandNextYBR[136]=0;isoBandNextOBR[136]=1;isoBandNextXBL[136]=-1;isoBandNextYBL[136]=0;isoBandNextOBL[136]=0;isoBandNextXLB[136]=0;isoBandNextYLB[136]=-1;isoBandNextOLB[136]=0;isoBandNextXLT[136]=0;isoBandNextYLT[136]=-1;isoBandNextOLT[136]=1;isoBandNextXTL[136]=1;isoBandNextYTL[136]=0;isoBandNextOTL[136]=0;isoBandNextXTR[136]=1;isoBandNextYTR[136]=0;isoBandNextOTR[136]=1;isoBandNextXRT[34]=0;isoBandNextYRT[34]=-1;isoBandNextORT[34]=0;isoBandNextXRB[34]=0;isoBandNextYRB[34]=-1;isoBandNextORB[34]=1;isoBandNextXBR[34]=1;isoBandNextYBR[34]=0;isoBandNextOBR[34]=0;isoBandNextXBL[34]=1;isoBandNextYBL[34]=0;isoBandNextOBL[34]=1;isoBandNextXLB[34]=0;isoBandNextYLB[34]=1;isoBandNextOLB[34]=1;isoBandNextXLT[34]=0;isoBandNextYLT[34]=1;isoBandNextOLT[34]=0;isoBandNextXTL[34]=-1;isoBandNextYTL[34]=0;isoBandNextOTL[34]=1;isoBandNextXTR[34]=-1;isoBandNextYTR[34]=0;isoBandNextOTR[34]=0;isoBandNextXRT[35]=0;isoBandNextYRT[35]=1;isoBandNextORT[35]=1;isoBandNextXRB[35]=0;isoBandNextYRB[35]=-1;isoBandNextORB[35]=1;isoBandNextXBR[35]=1;isoBandNextYBR[35]=0;isoBandNextOBR[35]=0;isoBandNextXBL[35]=-1;isoBandNextYBL[35]=0;isoBandNextOBL[35]=0;isoBandNextXLB[35]=0;isoBandNextYLB[35]=-1;isoBandNextOLB[35]=0;isoBandNextXLT[35]=0;isoBandNextYLT[35]=1;isoBandNextOLT[35]=0;isoBandNextXTL[35]=-1;isoBandNextYTL[35]=0;isoBandNextOTL[35]=1;isoBandNextXTR[35]=1;isoBandNextYTR[35]=0;isoBandNextOTR[35]=1; /* 6-sided cases */isoBandNextXRT[153]=0;isoBandNextYRT[153]=1;isoBandNextORT[153]=1;isoBandNextXBL[153]=-1;isoBandNextYBL[153]=0;isoBandNextOBL[153]=0;isoBandNextXLB[153]=0;isoBandNextYLB[153]=-1;isoBandNextOLB[153]=0;isoBandNextXTR[153]=1;isoBandNextYTR[153]=0;isoBandNextOTR[153]=1;isoBandNextXRB[102]=0;isoBandNextYRB[102]=-1;isoBandNextORB[102]=1;isoBandNextXBR[102]=1;isoBandNextYBR[102]=0;isoBandNextOBR[102]=0;isoBandNextXLT[102]=0;isoBandNextYLT[102]=1;isoBandNextOLT[102]=0;isoBandNextXTL[102]=-1;isoBandNextYTL[102]=0;isoBandNextOTL[102]=1;isoBandNextXRT[155]=0;isoBandNextYRT[155]=-1;isoBandNextORT[155]=0;isoBandNextXBL[155]=1;isoBandNextYBL[155]=0;isoBandNextOBL[155]=1;isoBandNextXLB[155]=0;isoBandNextYLB[155]=1;isoBandNextOLB[155]=1;isoBandNextXTR[155]=-1;isoBandNextYTR[155]=0;isoBandNextOTR[155]=0;isoBandNextXRB[103]=0;isoBandNextYRB[103]=1;isoBandNextORB[103]=0;isoBandNextXBR[103]=-1;isoBandNextYBR[103]=0;isoBandNextOBR[103]=1;isoBandNextXLT[103]=0;isoBandNextYLT[103]=-1;isoBandNextOLT[103]=1;isoBandNextXTL[103]=1;isoBandNextYTL[103]=0;isoBandNextOTL[103]=0; /* 7-sided cases */isoBandNextXRT[152]=0;isoBandNextYRT[152]=1;isoBandNextORT[152]=1;isoBandNextXBR[152]=-1;isoBandNextYBR[152]=0;isoBandNextOBR[152]=1;isoBandNextXBL[152]=-1;isoBandNextYBL[152]=0;isoBandNextOBL[152]=0;isoBandNextXLB[152]=0;isoBandNextYLB[152]=-1;isoBandNextOLB[152]=0;isoBandNextXLT[152]=0;isoBandNextYLT[152]=-1;isoBandNextOLT[152]=1;isoBandNextXTR[152]=1;isoBandNextYTR[152]=0;isoBandNextOTR[152]=1;isoBandNextXRT[156]=0;isoBandNextYRT[156]=-1;isoBandNextORT[156]=1;isoBandNextXBR[156]=1;isoBandNextYBR[156]=0;isoBandNextOBR[156]=1;isoBandNextXBL[156]=-1;isoBandNextYBL[156]=0;isoBandNextOBL[156]=0;isoBandNextXLB[156]=0;isoBandNextYLB[156]=-1;isoBandNextOLB[156]=0;isoBandNextXLT[156]=0;isoBandNextYLT[156]=1;isoBandNextOLT[156]=1;isoBandNextXTR[156]=-1;isoBandNextYTR[156]=0;isoBandNextOTR[156]=1;isoBandNextXRT[137]=0;isoBandNextYRT[137]=1;isoBandNextORT[137]=1;isoBandNextXRB[137]=0;isoBandNextYRB[137]=1;isoBandNextORB[137]=0;isoBandNextXBL[137]=-1;isoBandNextYBL[137]=0;isoBandNextOBL[137]=0;isoBandNextXLB[137]=0;isoBandNextYLB[137]=-1;isoBandNextOLB[137]=0;isoBandNextXTL[137]=1;isoBandNextYTL[137]=0;isoBandNextOTL[137]=0;isoBandNextXTR[137]=1;isoBandNextYTR[137]=0;isoBandNextOTR[137]=1;isoBandNextXRT[139]=0;isoBandNextYRT[139]=1;isoBandNextORT[139]=1;isoBandNextXRB[139]=0;isoBandNextYRB[139]=-1;isoBandNextORB[139]=0;isoBandNextXBL[139]=1;isoBandNextYBL[139]=0;isoBandNextOBL[139]=0;isoBandNextXLB[139]=0;isoBandNextYLB[139]=1;isoBandNextOLB[139]=0;isoBandNextXTL[139]=-1;isoBandNextYTL[139]=0;isoBandNextOTL[139]=0;isoBandNextXTR[139]=1;isoBandNextYTR[139]=0;isoBandNextOTR[139]=1;isoBandNextXRT[98]=0;isoBandNextYRT[98]=-1;isoBandNextORT[98]=0;isoBandNextXRB[98]=0;isoBandNextYRB[98]=-1;isoBandNextORB[98]=1;isoBandNextXBR[98]=1;isoBandNextYBR[98]=0;isoBandNextOBR[98]=0;isoBandNextXBL[98]=1;isoBandNextYBL[98]=0;isoBandNextOBL[98]=1;isoBandNextXLT[98]=0;isoBandNextYLT[98]=1;isoBandNextOLT[98]=0;isoBandNextXTL[98]=-1;isoBandNextYTL[98]=0;isoBandNextOTL[98]=1;isoBandNextXRT[99]=0;isoBandNextYRT[99]=1;isoBandNextORT[99]=0;isoBandNextXRB[99]=0;isoBandNextYRB[99]=-1;isoBandNextORB[99]=1;isoBandNextXBR[99]=1;isoBandNextYBR[99]=0;isoBandNextOBR[99]=0;isoBandNextXBL[99]=-1;isoBandNextYBL[99]=0;isoBandNextOBL[99]=1;isoBandNextXLT[99]=0;isoBandNextYLT[99]=-1;isoBandNextOLT[99]=0;isoBandNextXTL[99]=1;isoBandNextYTL[99]=0;isoBandNextOTL[99]=1;isoBandNextXRB[38]=0;isoBandNextYRB[38]=-1;isoBandNextORB[38]=1;isoBandNextXBR[38]=1;isoBandNextYBR[38]=0;isoBandNextOBR[38]=0;isoBandNextXLB[38]=0;isoBandNextYLB[38]=1;isoBandNextOLB[38]=1;isoBandNextXLT[38]=0;isoBandNextYLT[38]=1;isoBandNextOLT[38]=0;isoBandNextXTL[38]=-1;isoBandNextYTL[38]=0;isoBandNextOTL[38]=1;isoBandNextXTR[38]=-1;isoBandNextYTR[38]=0;isoBandNextOTR[38]=0;isoBandNextXRB[39]=0;isoBandNextYRB[39]=1;isoBandNextORB[39]=1;isoBandNextXBR[39]=-1;isoBandNextYBR[39]=0;isoBandNextOBR[39]=0;isoBandNextXLB[39]=0;isoBandNextYLB[39]=-1;isoBandNextOLB[39]=1;isoBandNextXLT[39]=0;isoBandNextYLT[39]=1;isoBandNextOLT[39]=0;isoBandNextXTL[39]=-1;isoBandNextYTL[39]=0;isoBandNextOTL[39]=1;isoBandNextXTR[39]=1;isoBandNextYTR[39]=0;isoBandNextOTR[39]=0; /*\n\t    The lookup tables for edge number given the polygon\n\t    is entered at a specific location\n\t  */var isoBandEdgeRT=[];var isoBandEdgeRB=[];var isoBandEdgeBR=[];var isoBandEdgeBL=[];var isoBandEdgeLB=[];var isoBandEdgeLT=[];var isoBandEdgeTL=[];var isoBandEdgeTR=[]; /* triangle cases */isoBandEdgeBL[1]=isoBandEdgeLB[1]=18;isoBandEdgeBL[169]=isoBandEdgeLB[169]=18;isoBandEdgeBR[4]=isoBandEdgeRB[4]=12;isoBandEdgeBR[166]=isoBandEdgeRB[166]=12;isoBandEdgeRT[16]=isoBandEdgeTR[16]=4;isoBandEdgeRT[154]=isoBandEdgeTR[154]=4;isoBandEdgeLT[64]=isoBandEdgeTL[64]=22;isoBandEdgeLT[106]=isoBandEdgeTL[106]=22; /* trapezoid cases */isoBandEdgeBR[2]=isoBandEdgeLT[2]=17;isoBandEdgeBL[2]=isoBandEdgeLB[2]=18;isoBandEdgeBR[168]=isoBandEdgeLT[168]=17;isoBandEdgeBL[168]=isoBandEdgeLB[168]=18;isoBandEdgeRT[8]=isoBandEdgeBL[8]=9;isoBandEdgeRB[8]=isoBandEdgeBR[8]=12;isoBandEdgeRT[162]=isoBandEdgeBL[162]=9;isoBandEdgeRB[162]=isoBandEdgeBR[162]=12;isoBandEdgeRT[32]=isoBandEdgeTR[32]=4;isoBandEdgeRB[32]=isoBandEdgeTL[32]=1;isoBandEdgeRT[138]=isoBandEdgeTR[138]=4;isoBandEdgeRB[138]=isoBandEdgeTL[138]=1;isoBandEdgeLB[128]=isoBandEdgeTR[128]=21;isoBandEdgeLT[128]=isoBandEdgeTL[128]=22;isoBandEdgeLB[42]=isoBandEdgeTR[42]=21;isoBandEdgeLT[42]=isoBandEdgeTL[42]=22; /* rectangle cases */isoBandEdgeRB[5]=isoBandEdgeLB[5]=14;isoBandEdgeRB[165]=isoBandEdgeLB[165]=14;isoBandEdgeBR[20]=isoBandEdgeTR[20]=6;isoBandEdgeBR[150]=isoBandEdgeTR[150]=6;isoBandEdgeRT[80]=isoBandEdgeLT[80]=11;isoBandEdgeRT[90]=isoBandEdgeLT[90]=11;isoBandEdgeBL[65]=isoBandEdgeTL[65]=3;isoBandEdgeBL[105]=isoBandEdgeTL[105]=3;isoBandEdgeRT[160]=isoBandEdgeLT[160]=11;isoBandEdgeRB[160]=isoBandEdgeLB[160]=14;isoBandEdgeRT[10]=isoBandEdgeLT[10]=11;isoBandEdgeRB[10]=isoBandEdgeLB[10]=14;isoBandEdgeBR[130]=isoBandEdgeTR[130]=6;isoBandEdgeBL[130]=isoBandEdgeTL[130]=3;isoBandEdgeBR[40]=isoBandEdgeTR[40]=6;isoBandEdgeBL[40]=isoBandEdgeTL[40]=3; /* pentagon cases */isoBandEdgeRB[101]=isoBandEdgeTL[101]=1;isoBandEdgeRB[69]=isoBandEdgeTL[69]=1;isoBandEdgeLB[149]=isoBandEdgeTR[149]=21;isoBandEdgeLB[21]=isoBandEdgeTR[21]=21;isoBandEdgeBR[86]=isoBandEdgeLT[86]=17;isoBandEdgeBR[84]=isoBandEdgeLT[84]=17;isoBandEdgeRT[89]=isoBandEdgeBL[89]=9;isoBandEdgeRT[81]=isoBandEdgeBL[81]=9;isoBandEdgeRT[96]=isoBandEdgeTL[96]=0;isoBandEdgeRB[96]=isoBandEdgeLT[96]=15;isoBandEdgeRT[74]=isoBandEdgeTL[74]=0;isoBandEdgeRB[74]=isoBandEdgeLT[74]=15;isoBandEdgeRT[24]=isoBandEdgeBR[24]=8;isoBandEdgeBL[24]=isoBandEdgeTR[24]=7;isoBandEdgeRT[146]=isoBandEdgeBR[146]=8;isoBandEdgeBL[146]=isoBandEdgeTR[146]=7;isoBandEdgeRB[6]=isoBandEdgeLT[6]=15;isoBandEdgeBR[6]=isoBandEdgeLB[6]=16;isoBandEdgeRB[164]=isoBandEdgeLT[164]=15;isoBandEdgeBR[164]=isoBandEdgeLB[164]=16;isoBandEdgeBL[129]=isoBandEdgeTR[129]=7;isoBandEdgeLB[129]=isoBandEdgeTL[129]=20;isoBandEdgeBL[41]=isoBandEdgeTR[41]=7;isoBandEdgeLB[41]=isoBandEdgeTL[41]=20;isoBandEdgeBR[66]=isoBandEdgeTL[66]=2;isoBandEdgeBL[66]=isoBandEdgeLT[66]=19;isoBandEdgeBR[104]=isoBandEdgeTL[104]=2;isoBandEdgeBL[104]=isoBandEdgeLT[104]=19;isoBandEdgeRT[144]=isoBandEdgeLB[144]=10;isoBandEdgeLT[144]=isoBandEdgeTR[144]=23;isoBandEdgeRT[26]=isoBandEdgeLB[26]=10;isoBandEdgeLT[26]=isoBandEdgeTR[26]=23;isoBandEdgeRB[36]=isoBandEdgeTR[36]=5;isoBandEdgeBR[36]=isoBandEdgeTL[36]=2;isoBandEdgeRB[134]=isoBandEdgeTR[134]=5;isoBandEdgeBR[134]=isoBandEdgeTL[134]=2;isoBandEdgeRT[9]=isoBandEdgeLB[9]=10;isoBandEdgeRB[9]=isoBandEdgeBL[9]=13;isoBandEdgeRT[161]=isoBandEdgeLB[161]=10;isoBandEdgeRB[161]=isoBandEdgeBL[161]=13; /* hexagon cases */isoBandEdgeRB[37]=isoBandEdgeTR[37]=5;isoBandEdgeLB[37]=isoBandEdgeTL[37]=20;isoBandEdgeRB[133]=isoBandEdgeTR[133]=5;isoBandEdgeLB[133]=isoBandEdgeTL[133]=20;isoBandEdgeBR[148]=isoBandEdgeLB[148]=16;isoBandEdgeLT[148]=isoBandEdgeTR[148]=23;isoBandEdgeBR[22]=isoBandEdgeLB[22]=16;isoBandEdgeLT[22]=isoBandEdgeTR[22]=23;isoBandEdgeRT[82]=isoBandEdgeBR[82]=8;isoBandEdgeBL[82]=isoBandEdgeLT[82]=19;isoBandEdgeRT[88]=isoBandEdgeBR[88]=8;isoBandEdgeBL[88]=isoBandEdgeLT[88]=19;isoBandEdgeRT[73]=isoBandEdgeTL[73]=0;isoBandEdgeRB[73]=isoBandEdgeBL[73]=13;isoBandEdgeRT[97]=isoBandEdgeTL[97]=0;isoBandEdgeRB[97]=isoBandEdgeBL[97]=13;isoBandEdgeRT[145]=isoBandEdgeBL[145]=9;isoBandEdgeLB[145]=isoBandEdgeTR[145]=21;isoBandEdgeRT[25]=isoBandEdgeBL[25]=9;isoBandEdgeLB[25]=isoBandEdgeTR[25]=21;isoBandEdgeRB[70]=isoBandEdgeTL[70]=1;isoBandEdgeBR[70]=isoBandEdgeLT[70]=17;isoBandEdgeRB[100]=isoBandEdgeTL[100]=1;isoBandEdgeBR[100]=isoBandEdgeLT[100]=17; /* 8-sided cases */isoBandEdgeRT[34]=isoBandEdgeBL[34]=9;isoBandEdgeRB[34]=isoBandEdgeBR[34]=12;isoBandEdgeLB[34]=isoBandEdgeTR[34]=21;isoBandEdgeLT[34]=isoBandEdgeTL[34]=22;isoBandEdgeRT[136]=isoBandEdgeTR[136]=4;isoBandEdgeRB[136]=isoBandEdgeTL[136]=1;isoBandEdgeBR[136]=isoBandEdgeLT[136]=17;isoBandEdgeBL[136]=isoBandEdgeLB[136]=18;isoBandEdgeRT[35]=isoBandEdgeTR[35]=4;isoBandEdgeRB[35]=isoBandEdgeBR[35]=12;isoBandEdgeBL[35]=isoBandEdgeLB[35]=18;isoBandEdgeLT[35]=isoBandEdgeTL[35]=22; /* 6-sided cases */isoBandEdgeRT[153]=isoBandEdgeTR[153]=4;isoBandEdgeBL[153]=isoBandEdgeLB[153]=18;isoBandEdgeRB[102]=isoBandEdgeBR[102]=12;isoBandEdgeLT[102]=isoBandEdgeTL[102]=22;isoBandEdgeRT[155]=isoBandEdgeBL[155]=9;isoBandEdgeLB[155]=isoBandEdgeTR[155]=23;isoBandEdgeRB[103]=isoBandEdgeTL[103]=1;isoBandEdgeBR[103]=isoBandEdgeLT[103]=17; /* 7-sided cases */isoBandEdgeRT[152]=isoBandEdgeTR[152]=4;isoBandEdgeBR[152]=isoBandEdgeLT[152]=17;isoBandEdgeBL[152]=isoBandEdgeLB[152]=18;isoBandEdgeRT[156]=isoBandEdgeBR[156]=8;isoBandEdgeBL[156]=isoBandEdgeLB[156]=18;isoBandEdgeLT[156]=isoBandEdgeTR[156]=23;isoBandEdgeRT[137]=isoBandEdgeTR[137]=4;isoBandEdgeRB[137]=isoBandEdgeTL[137]=1;isoBandEdgeBL[137]=isoBandEdgeLB[137]=18;isoBandEdgeRT[139]=isoBandEdgeTR[139]=4;isoBandEdgeRB[139]=isoBandEdgeBL[139]=13;isoBandEdgeLB[139]=isoBandEdgeTL[139]=20;isoBandEdgeRT[98]=isoBandEdgeBL[98]=9;isoBandEdgeRB[98]=isoBandEdgeBR[98]=12;isoBandEdgeLT[98]=isoBandEdgeTL[98]=22;isoBandEdgeRT[99]=isoBandEdgeTL[99]=0;isoBandEdgeRB[99]=isoBandEdgeBR[99]=12;isoBandEdgeBL[99]=isoBandEdgeLT[99]=19;isoBandEdgeRB[38]=isoBandEdgeBR[38]=12;isoBandEdgeLB[38]=isoBandEdgeTR[38]=21;isoBandEdgeLT[38]=isoBandEdgeTL[38]=22;isoBandEdgeRB[39]=isoBandEdgeTR[39]=5;isoBandEdgeBR[39]=isoBandEdgeLB[39]=16;isoBandEdgeLT[39]=isoBandEdgeTL[39]=22; /*\n\t    The lookup tables for all different polygons that\n\t    may appear within a grid cell\n\t  */var polygon_table=[]; /* triangle cases */polygon_table[1]=polygon_table[169]=p00; /* 2221 || 0001 */polygon_table[4]=polygon_table[166]=p01; /* 2212 || 0010 */polygon_table[16]=polygon_table[154]=p02; /* 2122 || 0100 */polygon_table[64]=polygon_table[106]=p03; /* 1222 || 1000 */ /* trapezoid cases */polygon_table[168]=polygon_table[2]=p04; /* 2220 || 0002 */polygon_table[162]=polygon_table[8]=p05; /* 2202 || 0020 */polygon_table[138]=polygon_table[32]=p06; /* 2022 || 0200 */polygon_table[42]=polygon_table[128]=p07; /* 0222 || 2000 */ /* rectangle cases */polygon_table[5]=polygon_table[165]=p08; /* 0011 || 2211 */polygon_table[20]=polygon_table[150]=p09; /* 0110 || 2112 */polygon_table[80]=polygon_table[90]=p10; /* 1100 || 1122 */polygon_table[65]=polygon_table[105]=p11; /* 1001 || 1221 */polygon_table[160]=polygon_table[10]=p12; /* 2200 || 0022 */polygon_table[130]=polygon_table[40]=p13; /* 2002 || 0220 */ /* square case */polygon_table[85]=p14; /* 1111 */ /* pentagon cases */polygon_table[101]=polygon_table[69]=p15; /* 1211 || 1011 */polygon_table[149]=polygon_table[21]=p16; /* 2111 || 0111 */polygon_table[86]=polygon_table[84]=p17; /* 1112 || 1110 */polygon_table[89]=polygon_table[81]=p18; /* 1121 || 1101 */polygon_table[96]=polygon_table[74]=p19; /* 1200 || 1022 */polygon_table[24]=polygon_table[146]=p20; /* 0120 || 2102 */polygon_table[6]=polygon_table[164]=p21; /* 0012 || 2210 */polygon_table[129]=polygon_table[41]=p22; /* 2001 || 0221 */polygon_table[66]=polygon_table[104]=p23; /* 1002 || 1220 */polygon_table[144]=polygon_table[26]=p24; /* 2100 || 0122 */polygon_table[36]=polygon_table[134]=p25; /* 0210 || 2012 */polygon_table[9]=polygon_table[161]=p26; /* 0021 || 2201 */ /* hexagon cases */polygon_table[37]=polygon_table[133]=p27; /* 0211 || 2011 */polygon_table[148]=polygon_table[22]=p28; /* 2110 || 0112 */polygon_table[82]=polygon_table[88]=p29; /* 1102 || 1120 */polygon_table[73]=polygon_table[97]=p30; /* 1021 || 1201 */polygon_table[145]=polygon_table[25]=p31; /* 2101 || 0121 */polygon_table[70]=polygon_table[100]=p32; /* 1012 || 1210 */ /* 8-sided cases */polygon_table[34]=function(c){return [p07(c),p05(c)];}; /* 0202 || 2020 with flipped == 0 */polygon_table[35]=p33; /* flipped == 1 state for 0202 and 2020 */polygon_table[136]=function(c){return [p06(c),p04(c)];}; /* 2020 || 0202 with flipped == 0 */ /* 6-sided cases */polygon_table[153]=function(c){return [p02(c),p00(c)];}; /* 0101 with flipped == 0 || 2121 with flipped == 2 */polygon_table[102]=function(c){return [p01(c),p03(c)];}; /* 1010 with flipped == 0 || 1212 with flipped == 2 */polygon_table[155]=p34; /* 0101 with flipped == 1 || 2121 with flipped == 1 */polygon_table[103]=p35; /* 1010 with flipped == 1 || 1212 with flipped == 1 */ /* 7-sided cases */polygon_table[152]=function(c){return [p02(c),p04(c)];}; /* 2120 with flipped == 2 || 0102 with flipped == 0 */polygon_table[156]=p36; /* 2120 with flipped == 1 || 0102 with flipped == 1 */polygon_table[137]=function(c){return [p06(c),p00(c)];}; /* 2021 with flipped == 2 || 0201 with flipped == 0 */polygon_table[139]=p37; /* 2021 with flipped == 1 || 0201 with flipped == 1 */polygon_table[98]=function(c){return [p05(c),p03(c)];}; /* 1202 with flipped == 2 || 1020 with flipped == 0 */polygon_table[99]=p38; /* 1202 with flipped == 1 || 1020 with flipped == 1 */polygon_table[38]=function(c){return [p01(c),p07(c)];}; /* 0212 with flipped == 2 || 2010 with flipped == 0 */polygon_table[39]=p39; /* 0212 with flipped == 1 || 2010 with flipped == 1 */ /*\n\t    The helper functions for the above polygon_table\n\t  */ /* triangle cases */var p00=function p00(cell){return [[cell.bottomleft,0],[0,0],[0,cell.leftbottom]];};var p01=function p01(cell){return [[1,cell.rightbottom],[1,0],[cell.bottomright,0]];};var p02=function p02(cell){return [[cell.topright,1],[1,1],[1,cell.righttop]];};var p03=function p03(cell){return [[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* trapezoid cases */var p04=function p04(cell){return [[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop]];};var p05=function p05(cell){return [[cell.bottomright,0],[cell.bottomleft,0],[1,cell.righttop],[1,cell.rightbottom]];};var p06=function p06(cell){return [[1,cell.righttop],[1,cell.rightbottom],[cell.topleft,1],[cell.topright,1]];};var p07=function p07(cell){return [[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]];}; /* rectangle cases */var p08=function p08(cell){return [[0,0],[0,cell.leftbottom],[1,cell.rightbottom],[1,0]];};var p09=function p09(cell){return [[1,0],[cell.bottomright,0],[cell.topright,1],[1,1]];};var p10=function p10(cell){return [[1,1],[1,cell.righttop],[0,cell.lefttop],[0,1]];};var p11=function p11(cell){return [[cell.bottomleft,0],[0,0],[0,1],[cell.topleft,1]];};var p12=function p12(cell){return [[1,cell.righttop],[1,cell.rightbottom],[0,cell.leftbottom],[0,cell.lefttop]];};var p13=function p13(cell){return [[cell.topleft,1],[cell.topright,1],[cell.bottomright,0],[cell.bottomleft,0]];}; /* square case */var p14=function p14(cell){return [[0,0],[0,1],[1,1],[1,0]];}; /* pentagon cases */var p15=function p15(cell){return [[1,cell.rightbottom],[1,0],[0,0],[0,1],[cell.topleft,1]];}; /* 1211 || 1011 */var p16=function p16(cell){return [[cell.topright,1],[1,1],[1,0],[0,0],[0,cell.leftbottom]];}; /* 2111 || 0111 */var p17=function p17(cell){return [[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[1,1]];}; /* 1112 || 1110 */var p18=function p18(cell){return [[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,1]];}; /* 1121 || 1101 */var p19=function p19(cell){return [[1,cell.righttop],[1,cell.rightbottom],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1200 || 1022 */var p20=function p20(cell){return [[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[cell.topright,1]];}; /* 0120 || 2102 */var p21=function p21(cell){return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop]];}; /* 0012 || 2210 */var p22=function p22(cell){return [[cell.topright,1],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topleft,1]];}; /* 2001 || 0221 */var p23=function p23(cell){return [[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1002 || 1220 */var p24=function p24(cell){return [[1,1],[1,cell.righttop],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]];}; /* 2100 || 0122 */var p25=function p25(cell){return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[cell.topleft,1],[cell.topright,1]];}; /* 0210 || 2012 */var p26=function p26(cell){return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,cell.leftbottom]];}; /* 0021 || 2201 */ /*hexagon cases */var p27=function p27(cell){return [[1,cell.rightbottom],[1,0],[0,0],[0,cell.leftbottom],[cell.topleft,1],[cell.topright,1]];}; /* 0211 || 2011 */var p28=function p28(cell){return [[1,1],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]];}; /* 2110 || 0112 */var p29=function p29(cell){return [[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1]];}; /* 1102 || 1120 */var p30=function p30(cell){return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,1],[cell.topleft,1]];}; /* 1021 || 1201 */var p31=function p31(cell){return [[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topright,1]];}; /* 2101 || 0121 */var p32=function p32(cell){return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1012 || 1210 */ /* 8-sided cases */var p33=function p33(cell){return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]];}; /* flipped == 1 state for 0202 and 2020 */ /* 6-sided cases */var p34=function p34(cell){return [[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topright,1]];}; /* 0101 with flipped == 1 || 2121 with flipped == 1 */var p35=function p35(cell){return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1010 with flipped == 1 || 1212 with flipped == 1 */ /* 7-sided cases */var p36=function p36(cell){return [[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]];}; /* 2120 with flipped == 1 || 0102 with flipped == 1 */var p37=function p37(cell){return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topleft,1],[cell.topright,1]];}; /* 2021 with flipped == 1 || 0201 with flipped == 1 */var p38=function p38(cell){return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1202 with flipped == 1 || 1020 with flipped == 1 */var p39=function p39(cell){return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]];}; /* 0212 with flipped == 1 || 2010 with flipped == 1 */ /*\n\t  ####################################\n\t  Some small helper functions\n\t  ####################################\n\t  */ /* assume that x1 == 1 &&  x0 == 0 */function interpolateX(y,y0,y1){return (y-y0)/(y1-y0);}function isArray(myArray){return myArray.constructor.toString().indexOf(\"Array\")>-1;} /*\n\t  ####################################\n\t  Below is the actual Marching Squares implementation\n\t  ####################################\n\t  */function computeBandGrid(data,minV,bandwidth){var rows=data.length-1;var cols=data[0].length-1;var BandGrid={rows:rows,cols:cols,cells:[]};var maxV=minV+Math.abs(bandwidth);for(var j=0;j<rows;++j){BandGrid.cells[j]=[];for(var i=0;i<cols;++i){ /*  compose the 4-trit corner representation */var cval=0;var tl=data[j+1][i];var tr=data[j+1][i+1];var br=data[j][i+1];var bl=data[j][i];if(isNaN(tl)||isNaN(tr)||isNaN(br)||isNaN(bl)){continue;}cval|=tl<minV?0:tl>maxV?128:64;cval|=tr<minV?0:tr>maxV?32:16;cval|=br<minV?0:br>maxV?8:4;cval|=bl<minV?0:bl>maxV?2:1;var cval_real=+cval; /* resolve ambiguity via averaging */var flipped=0;if(cval==17|| /* 0101 */cval==18 /* 0102 */||cval==33 /* 0201 */||cval==34 /* 0202 */||cval==38 /* 0212 */||cval==68 /* 1010 */||cval==72 /* 1020 */||cval==98 /* 1202 */||cval==102 /* 1212 */||cval==132 /* 2010 */||cval==136 /* 2020 */||cval==137 /* 2021 */||cval==152 /* 2120 */||cval==153 /* 2121 */){var average=(tl+tr+br+bl)/4; /* set flipped state */flipped=average>maxV?2:average<minV?0:1; /* adjust cval for flipped cases */ /* 8-sided cases */if(cval===34){if(flipped===1){cval=35;}else if(flipped===0){cval=136;}}else if(cval===136){if(flipped===1){cval=35;flipped=4;}else if(flipped===0){cval=34;}} /* 6-sided polygon cases */else if(cval===17){if(flipped===1){cval=155;flipped=4;}else if(flipped===0){cval=153;}}else if(cval===68){if(flipped===1){cval=103;flipped=4;}else if(flipped===0){cval=102;}}else if(cval===153){if(flipped===1)cval=155;}else if(cval===102){if(flipped===1)cval=103;} /* 7-sided polygon cases */else if(cval===152){if(flipped<2){cval=156;flipped=1;}}else if(cval===137){if(flipped<2){cval=139;flipped=1;}}else if(cval===98){if(flipped<2){cval=99;flipped=1;}}else if(cval===38){if(flipped<2){cval=39;flipped=1;}}else if(cval===18){if(flipped>0){cval=156;flipped=4;}else {cval=152;}}else if(cval===33){if(flipped>0){cval=139;flipped=4;}else {cval=137;}}else if(cval===72){if(flipped>0){cval=99;flipped=4;}else {cval=98;}}else if(cval===132){if(flipped>0){cval=39;flipped=4;}else {cval=38;}}} /* add cell to BandGrid if it contains at least one polygon-side */if(cval!=0&&cval!=170){var topleft,topright,bottomleft,bottomright,righttop,rightbottom,lefttop,leftbottom;topleft=topright=bottomleft=bottomright=righttop=rightbottom=lefttop=leftbottom=0.5;var edges=[]; /* do interpolation here */ /* 1st Triangles */if(cval===1){ /* 0001 */bottomleft=1-interpolateX(minV,br,bl);leftbottom=1-interpolateX(minV,tl,bl);edges.push(isoBandEdgeBL[cval]);}else if(cval===169){ /* 2221 */bottomleft=interpolateX(maxV,bl,br);leftbottom=interpolateX(maxV,bl,tl);edges.push(isoBandEdgeBL[cval]);}else if(cval===4){ /* 0010 */rightbottom=1-interpolateX(minV,tr,br);bottomright=interpolateX(minV,bl,br);edges.push(isoBandEdgeRB[cval]);}else if(cval===166){ /* 2212 */rightbottom=interpolateX(maxV,br,tr);bottomright=1-interpolateX(maxV,br,bl);edges.push(isoBandEdgeRB[cval]);}else if(cval===16){ /* 0100 */righttop=interpolateX(minV,br,tr);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeRT[cval]);}else if(cval===154){ /* 2122 */righttop=1-interpolateX(maxV,tr,br);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeRT[cval]);}else if(cval===64){ /* 1000 */lefttop=interpolateX(minV,bl,tl);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeLT[cval]);}else if(cval===106){ /* 1222 */lefttop=1-interpolateX(maxV,tl,bl);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeLT[cval]);} /* 2nd Trapezoids */else if(cval===168){ /* 2220 */bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===2){ /* 0002 */bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===162){ /* 2202 */righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===8){ /* 0020 */righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===138){ /* 2022 */righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===32){ /* 0200 */righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===42){ /* 0222 */leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeLB[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===128){ /* 2000 */leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeLB[cval]);edges.push(isoBandEdgeLT[cval]);} /* 3rd rectangle cases */if(cval===5){ /* 0011 */rightbottom=1-interpolateX(minV,tr,br);leftbottom=1-interpolateX(minV,tl,bl);edges.push(isoBandEdgeRB[cval]);}else if(cval===165){ /* 2211 */rightbottom=interpolateX(maxV,br,tr);leftbottom=interpolateX(maxV,bl,tl);edges.push(isoBandEdgeRB[cval]);}else if(cval===20){ /* 0110 */bottomright=interpolateX(minV,bl,br);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeBR[cval]);}else if(cval===150){ /* 2112 */bottomright=1-interpolateX(maxV,br,bl);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeBR[cval]);}else if(cval===80){ /* 1100 */righttop=interpolateX(minV,br,tr);lefttop=interpolateX(minV,bl,tl);edges.push(isoBandEdgeRT[cval]);}else if(cval===90){ /* 1122 */righttop=1-interpolateX(maxV,tr,br);lefttop=1-interpolateX(maxV,tl,bl);edges.push(isoBandEdgeRT[cval]);}else if(cval===65){ /* 1001 */bottomleft=1-interpolateX(minV,br,bl);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeBL[cval]);}else if(cval===105){ /* 1221 */bottomleft=interpolateX(maxV,bl,br);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeBL[cval]);}else if(cval===160){ /* 2200 */righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===10){ /* 0022 */righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===130){ /* 2002 */bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===40){ /* 0220 */bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);} /* 4th single pentagon cases */else if(cval===101){ /* 1211 */rightbottom=interpolateX(maxV,br,tr);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRB[cval]);}else if(cval===69){ /* 1011 */rightbottom=1-interpolateX(minV,tr,br);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRB[cval]);}else if(cval===149){ /* 2111 */leftbottom=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeLB[cval]);}else if(cval===21){ /* 0111 */leftbottom=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeLB[cval]);}else if(cval===86){ /* 1112 */bottomright=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);edges.push(isoBandEdgeBR[cval]);}else if(cval===84){ /* 1110 */bottomright=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);edges.push(isoBandEdgeBR[cval]);}else if(cval===89){ /* 1121 */righttop=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);edges.push(isoBandEdgeBL[cval]);}else if(cval===81){ /* 1101 */righttop=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);edges.push(isoBandEdgeBL[cval]);}else if(cval===96){ /* 1200 */righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);lefttop=interpolateX(minV,bl,tl);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===74){ /* 1022 */righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);lefttop=1-interpolateX(maxV,tl,bl);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===24){ /* 0120 */righttop=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===146){ /* 2102 */righttop=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===6){ /* 0012 */rightbottom=1-interpolateX(minV,tr,br);bottomright=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);}else if(cval===164){ /* 2210 */rightbottom=interpolateX(maxV,br,tr);bottomright=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);}else if(cval===129){ /* 2001 */bottomleft=1-interpolateX(minV,br,bl);leftbottom=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeBL[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===41){ /* 0221 */bottomleft=interpolateX(maxV,bl,br);leftbottom=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeBL[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===66){ /* 1002 */bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===104){ /* 1220 */bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeBL[cval]);edges.push(isoBandEdgeTL[cval]);}else if(cval===144){ /* 2100 */righttop=interpolateX(minV,br,tr);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===26){ /* 0122 */righttop=1-interpolateX(maxV,tr,br);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===36){ /* 0210 */rightbottom=interpolateX(maxV,br,tr);bottomright=interpolateX(minV,bl,br);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);}else if(cval===134){ /* 2012 */rightbottom=1-interpolateX(minV,tr,br);bottomright=1-interpolateX(maxV,br,bl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);}else if(cval===9){ /* 0021 */righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);leftbottom=1-interpolateX(minV,tl,bl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===161){ /* 2201 */righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);leftbottom=interpolateX(maxV,bl,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);} /* 5th single hexagon cases */else if(cval===37){ /* 0211 */rightbottom=interpolateX(maxV,br,tr);leftbottom=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===133){ /* 2011 */rightbottom=1-interpolateX(minV,tr,br);leftbottom=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===148){ /* 2110 */bottomright=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===22){ /* 0112 */bottomright=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===82){ /* 1102 */righttop=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===88){ /* 1120 */righttop=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===73){ /* 1021 */righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===97){ /* 1201 */righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);}else if(cval===145){ /* 2101 */righttop=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);leftbottom=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===25){ /* 0121 */righttop=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);leftbottom=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===70){ /* 1012 */rightbottom=1-interpolateX(minV,tr,br);bottomright=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);topleft=1-interpolateX(minV,tr,tl);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);}else if(cval===100){ /* 1210 */rightbottom=interpolateX(maxV,br,tr);bottomright=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);topleft=interpolateX(maxV,tl,tr);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);} /* 8-sided cases */else if(cval===34){ /* 0202 || 2020 with flipped == 0 */if(flipped===0){righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}else {righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLB[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===35){ /* flipped == 1 state for 0202, and 2020 with flipped == 4*/if(flipped===4){righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}else {righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBL[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===136){ /* 2020 || 0202 with flipped == 0 */if(flipped===0){righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}else {righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLB[cval]);edges.push(isoBandEdgeLT[cval]);} /* 6-sided polygon cases */else if(cval===153){ /* 0101 with flipped == 0 || 2121 with flipped == 2 */if(flipped===0){righttop=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);leftbottom=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);}else {righttop=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);leftbottom=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===102){ /* 1010 with flipped == 0 || 1212 with flipped == 2 */if(flipped===0){rightbottom=1-interpolateX(minV,tr,br);bottomright=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);topleft=1-interpolateX(minV,tr,tl);}else {rightbottom=interpolateX(maxV,br,tr);bottomright=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);topleft=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===155){ /* 0101 with flipped == 4 || 2121 with flipped == 1 */if(flipped===4){righttop=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);leftbottom=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);}else {righttop=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);leftbottom=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===103){ /* 1010 with flipped == 4 || 1212 with flipped == 1 */if(flipped===4){rightbottom=1-interpolateX(minV,tr,br);bottomright=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);topleft=1-interpolateX(minV,tr,tl);}else {rightbottom=interpolateX(maxV,br,tr);bottomright=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);topleft=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);} /* 7-sided polygon cases */else if(cval===152){ /* 2120 with flipped == 2 || 0102 with flipped == 0 */if(flipped===0){righttop=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);}else {righttop=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===156){ /* 2120 with flipped == 1 || 0102 with flipped == 4 */if(flipped===4){righttop=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topright=interpolateX(minV,tl,tr);}else {righttop=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topright=1-interpolateX(maxV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeBL[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===137){ /* 2021 with flipped == 2 || 0201 with flipped == 0 */if(flipped===0){righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);leftbottom=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}else {righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);leftbottom=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===139){ /* 2021 with flipped == 1 || 0201 with flipped == 4 */if(flipped===4){righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomleft=1-interpolateX(minV,br,bl);leftbottom=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}else {righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomleft=interpolateX(maxV,bl,br);leftbottom=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLB[cval]);}else if(cval===98){ /* 1202 with flipped == 2 || 1020 with flipped == 0 */if(flipped===0){righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);topleft=1-interpolateX(minV,tr,tl);}else {righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);topleft=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===99){ /* 1202 with flipped == 1 || 1020 with flipped == 4 */if(flipped===4){righttop=1-interpolateX(minV,tr,br);rightbottom=1-interpolateX(maxV,tr,br);bottomright=interpolateX(maxV,bl,br);bottomleft=interpolateX(minV,bl,br);lefttop=interpolateX(minV,bl,tl);topleft=1-interpolateX(minV,tr,tl);}else {righttop=interpolateX(maxV,br,tr);rightbottom=interpolateX(minV,br,tr);bottomright=1-interpolateX(minV,br,bl);bottomleft=1-interpolateX(maxV,br,bl);lefttop=1-interpolateX(maxV,tl,bl);topleft=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRT[cval]);edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBL[cval]);}else if(cval===38){ /* 0212 with flipped == 2 || 2010 with flipped == 0 */if(flipped===0){rightbottom=1-interpolateX(minV,tr,br);bottomright=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}else {rightbottom=interpolateX(maxV,br,tr);bottomright=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeLB[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===39){ /* 0212 with flipped == 1 || 2010 with flipped == 4 */if(flipped===4){rightbottom=1-interpolateX(minV,tr,br);bottomright=interpolateX(minV,bl,br);leftbottom=interpolateX(minV,bl,tl);lefttop=interpolateX(maxV,bl,tl);topleft=1-interpolateX(maxV,tr,tl);topright=1-interpolateX(minV,tr,tl);}else {rightbottom=interpolateX(maxV,br,tr);bottomright=1-interpolateX(maxV,br,bl);leftbottom=1-interpolateX(maxV,tl,bl);lefttop=1-interpolateX(minV,tl,bl);topleft=interpolateX(minV,tl,tr);topright=interpolateX(maxV,tl,tr);}edges.push(isoBandEdgeRB[cval]);edges.push(isoBandEdgeBR[cval]);edges.push(isoBandEdgeLT[cval]);}else if(cval===85){righttop=1;rightbottom=0;bottomright=1;bottomleft=0;leftbottom=0;lefttop=1;topleft=0;topright=1;}if(topleft<0||topleft>1||topright<0||topright>1||righttop<0||righttop>1||bottomright<0||bottomright>1||leftbottom<0||leftbottom>1||lefttop<0||lefttop>1){console.log(cval+\" \"+cval_real+\" \"+tl+\",\"+tr+\",\"+br+\",\"+bl+\" \"+flipped+\" \"+topleft+\" \"+topright+\" \"+righttop+\" \"+rightbottom+\" \"+bottomright+\" \"+bottomleft+\" \"+leftbottom+\" \"+lefttop);}BandGrid.cells[j][i]={cval:cval,cval_real:cval_real,flipped:flipped,topleft:topleft,topright:topright,righttop:righttop,rightbottom:rightbottom,bottomright:bottomright,bottomleft:bottomleft,leftbottom:leftbottom,lefttop:lefttop,edges:edges};}}}return BandGrid;}function BandGrid2AreaPaths(grid){var areas=[];var area_idx=0;var rows=grid.rows;var cols=grid.cols;var currentPolygon=[];for(var j=0;j<rows;j++){for(var i=0;i<cols;i++){if(typeof grid.cells[j][i]!=='undefined'&&grid.cells[j][i].edges.length>0){ /* trace back polygon path starting from this cell */var o=0,x=i,y=j;var cell=grid.cells[j][i]; /* get start coordinates */var cval=cell.cval;var prev=getStartXY(cell),next=null,p=i,q=j;if(prev!==null){currentPolygon.push([prev.p[0]+p,prev.p[1]+q]); //console.log(cell);\n\t//console.log(\"coords: \" + (prev.p[0] + p) + \" \" + (prev.p[1] + q));\n\t}do { //console.log(p + \",\" + q);\n\t//console.log(grid.cells[q][p]);\n\t//console.log(grid.cells[q][p].edges);\n\t//console.log(\"from : \" + prev.x + \" \" + prev.y + \" \" + prev.o);\n\tnext=getExitXY(grid.cells[q][p],prev.x,prev.y,prev.o);if(next!==null){ //console.log(\"coords: \" + (next.p[0] + p) + \" \" + (next.p[1] + q));\n\tcurrentPolygon.push([next.p[0]+p,next.p[1]+q]);p+=next.x;q+=next.y;prev=next;}else { //console.log(\"getExitXY() returned null!\");\n\tbreak;} //console.log(\"to : \" + next.x + \" \" + next.y + \" \" + next.o);\n\t/* special case, where we've reached the grid boundaries */if(q<0||q>=rows||p<0||p>=cols||typeof grid.cells[q][p]==='undefined'){ /* to create a closed path, we need to trace our way\n\t                  arround the missing data, until we find an entry\n\t                  point again\n\t              */ /* set back coordinates of current cell */p-=next.x;q-=next.y; //console.log(\"reached boundary at \" + p + \" \" + q);\n\tvar missing=traceOutOfGridPath(grid,p,q,next.x,next.y,next.o);if(missing!==null){missing.path.forEach(function(pp){ //console.log(\"coords: \" + (pp[0]) + \" \" + (pp[1]));\n\tcurrentPolygon.push(pp);});p=missing.i;q=missing.j;prev=missing;}else {break;} //console.log(grid.cells[q][p]);\n\t}}while(typeof grid.cells[q][p]!=='undefined'&&grid.cells[q][p].edges.length>0);areas.push(currentPolygon); //console.log(\"next polygon\");\n\t//console.log(currentPolygon);\n\tcurrentPolygon=[];if(grid.cells[j][i].edges.length>0)i--;}}}return areas;}function traceOutOfGridPath(grid,i,j,d_x,d_y,d_o){var cell=grid.cells[j][i];var cval=cell.cval_real;var p=i+d_x,q=j+d_y;var path=[];var rows=grid.rows;var cols=grid.cols;var closed=false;while(!closed){ //console.log(\"processing cell \" + p + \",\" + q + \" \" + d_x + \" \" + d_y + \" \" + d_o);\n\tif(typeof grid.cells[q]==='undefined'||typeof grid.cells[q][p]==='undefined'){ //console.log(\"which is undefined\");\n\t/* we can't move on, so we have to change direction to proceed further */ /* go back to previous cell */q-=d_y;p-=d_x;cell=grid.cells[q][p];cval=cell.cval_real; /* check where we've left defined cells of the grid... */if(d_y===-1){ /* we came from top */if(d_o===0){ /* exit left */if(cval&Node3){ /* lower left node is within range, so we move left */path.push([p,q]);d_x=-1;d_y=0;d_o=0;}else if(cval&Node2){ /* lower right node is within range, so we move right */path.push([p+1,q]);d_x=1;d_y=0;d_o=0;}else { /* close the path */path.push([p+cell.bottomright,q]);d_x=0;d_y=1;d_o=1;closed=true;break;}}else {if(cval&Node3){path.push([p,q]);d_x=-1;d_y=0;d_o=0;}else if(cval&Node2){path.push([p+cell.bottomright,q]);d_x=0;d_y=1;d_o=1;closed=true;break;}else {path.push([p+cell.bottomleft,q]);d_x=0;d_y=1;d_o=0;closed=true;break;}}}else if(d_y===1){ /* we came from bottom */ //console.log(\"we came from bottom and hit a non-existing cell \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n\tif(d_o===0){ /* exit left */if(cval&Node1){ /* top right node is within range, so we move right */path.push([p+1,q+1]);d_x=1;d_y=0;d_o=1;}else if(!(cval&Node0)){ /* found entry within same cell */path.push([p+cell.topright,q+1]);d_x=0;d_y=-1;d_o=1;closed=true; //console.log(\"found entry from bottom at \" + p + \",\" + q);\n\tbreak;}else {path.push([p+cell.topleft,q+1]);d_x=0;d_y=-1;d_o=0;closed=true;break;}}else {if(cval&Node1){path.push([p+1,q+1]);d_x=1;d_y=0;d_o=1;}else { /* move right */path.push([p+1,q+1]);d_x=1;d_y=0;d_o=1; //console.log(\"wtf\");\n\t//break;\n\t}}}else if(d_x===-1){ /* we came from right */ //console.log(\"we came from right and hit a non-existing cell at \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n\tif(d_o===0){ //console.log(\"continue at bottom\");\n\tif(cval&Node0){path.push([p,q+1]);d_x=0;d_y=1;d_o=0; //console.log(\"moving upwards to \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n\t}else if(!(cval&Node3)){ /* there has to be an entry into the regular grid again! */ //console.log(\"exiting top\");\n\tpath.push([p,q+cell.lefttop]);d_x=1;d_y=0;d_o=1;closed=true;break;}else { //console.log(\"exiting bottom\");\n\tpath.push([p,q+cell.leftbottom]);d_x=1;d_y=0;d_o=0;closed=true;break;}}else { //console.log(\"continue at top\");\n\tif(cval&Node0){path.push([p,q+1]);d_x=0;d_y=1;d_o=0; //console.log(\"moving upwards to \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n\t}else { /* */console.log(\"wtf\");break;}}}else if(d_x===1){ /* we came from left */ //console.log(\"we came from left and hit a non-existing cell \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n\tif(d_o===0){ /* exit bottom */if(cval&Node2){path.push([p+1,q]);d_x=0;d_y=-1;d_o=1;}else {path.push([p+1,q+cell.rightbottom]);d_x=-1;d_y=0;d_o=0;closed=true;break;}}else { /* exit top */if(cval&Node2){path.push([p+1,q]);d_x=0;d_y=-1;d_o=1;}else if(!(cval&Node1)){path.push([p+1,q+cell.rightbottom]);d_x=-1;d_y=0;d_o=0;closed=true;break;}else {path.push([p+1,q+cell.righttop]);d_x=-1;d_y=0;d_o=1;break;}}}else { /* we came from the same cell */console.log(\"we came from nowhere!\");break;}}else { /* try to find an entry into the regular grid again! */cell=grid.cells[q][p];cval=cell.cval_real; //console.log(\"which is defined\");\n\tif(d_x===-1){if(d_o===0){ /* try to go downwards */if(typeof grid.cells[q-1]!=='undefined'&&typeof grid.cells[q-1][p]!=='undefined'){d_x=0;d_y=-1;d_o=1;}else if(cval&Node3){ /* proceed searching in x-direction */ //console.log(\"proceeding in x-direction!\");\n\tpath.push([p,q]);}else { /* we must have found an entry into the regular grid */path.push([p+cell.bottomright,q]);d_x=0;d_y=1;d_o=1;closed=true; //console.log(\"found entry from bottom at \" + p + \",\" + q);\n\tbreak;}}else {if(cval&Node0){ /* proceed searchin in x-direction */console.log(\"proceeding in x-direction!\");}else { /* we must have found an entry into the regular grid */console.log(\"found entry from top at \"+p+\",\"+q);break;}}}else if(d_x===1){if(d_o===0){console.log(\"wtf\");break;}else { /* try to go upwards */if(typeof grid.cells[q+1]!=='undefined'&&typeof grid.cells[q+1][p]!=='undefined'){d_x=0;d_y=1;d_o=0;}else if(cval&Node1){path.push([p+1,q+1]);d_x=1;d_y=0;d_o=1;}else { /* found an entry point into regular grid! */path.push([p+cell.topleft,q+1]);d_x=0;d_y=-1;d_o=0;closed=true; //console.log(\"found entry from bottom at \" + p + \",\" + q);\n\tbreak;}}}else if(d_y===-1){if(d_o===1){ /* try to go right */if(typeof grid.cells[q][p+1]!=='undefined'){d_x=1;d_y=0;d_o=1;}else if(cval&Node2){path.push([p+1,q]);d_x=0;d_y=-1;d_o=1;}else { /* found entry into regular grid! */path.push([p+1,q+cell.righttop]);d_x=-1;d_y=0;d_o=1;closed=true; //console.log(\"found entry from top at \" + p + \",\" + q);\n\tbreak;}}else {console.log(\"wtf\");break;}}else if(d_y===1){if(d_o===0){ //console.log(\"we came from bottom left and proceed to the left\");\n\t/* try to go left */if(typeof grid.cells[q][p-1]!=='undefined'){d_x=-1;d_y=0;d_o=0;}else if(cval&Node0){path.push([p,q+1]);d_x=0;d_y=1;d_o=0;}else { /* found an entry point into regular grid! */path.push([p,q+cell.leftbottom]);d_x=1;d_y=0;d_o=0;closed=true; //console.log(\"found entry from bottom at \" + p + \",\" + q);\n\tbreak;}}else { //console.log(\"we came from bottom right and proceed to the right\");\n\tconsole.log(\"wtf\");break;}}else {console.log(\"where did we came from???\");break;}}p+=d_x;q+=d_y; //console.log(\"going on to  \" + p + \",\" + q + \" via \" + d_x + \" \" + d_y + \" \" + d_o);\n\tif(p===i&&q===j){ /* bail out, once we've closed a circle path */break;}} //console.log(\"exit with \" + p + \",\" + q + \" \" + d_x + \" \" + d_y + \" \" + d_o);\n\treturn {path:path,i:p,j:q,x:d_x,y:d_y,o:d_o};}function deleteEdge(cell,edgeIdx){delete cell.edges[edgeIdx];for(var k=edgeIdx+1;k<cell.edges.length;k++){cell.edges[k-1]=cell.edges[k];}cell.edges.pop();}function getStartXY(cell){if(cell.edges.length>0){var e=cell.edges[cell.edges.length-1]; //console.log(\"starting with edge \" + e);\n\tvar cval=cell.cval_real;switch(e){case 0:if(cval&Node1){ /* node 1 within range */return {p:[1,cell.righttop],x:-1,y:0,o:1};}else { /* node 1 below or above threshold */return {p:[cell.topleft,1],x:0,y:-1,o:0};}case 1:if(cval&Node2){return {p:[cell.topleft,1],x:0,y:-1,o:0};}else {return {p:[1,cell.rightbottom],x:-1,y:0,o:0};}case 2:if(cval&Node2){return {p:[cell.bottomright,0],x:0,y:1,o:1};}else {return {p:[cell.topleft,1],x:0,y:-1,o:0};}case 3:if(cval&Node3){return {p:[cell.topleft,1],x:0,y:-1,o:0};}else {return {p:[cell.bottomleft,0],x:0,y:1,o:0};}case 4:if(cval&Node1){return {p:[1,cell.righttop],x:-1,y:0,o:1};}else {return {p:[cell.topright,1],x:0,y:-1,o:1};}case 5:if(cval&Node2){return {p:[cell.topright,1],x:0,y:-1,o:1};}else {return {p:[1,cell.rightbottom],x:-1,y:0,o:0};}case 6:if(cval&Node2){return {p:[cell.bottomright,0],x:0,y:1,o:1};}else {return {p:[cell.topright,1],x:0,y:-1,o:1};}case 7:if(cval&Node3){return {p:[cell.topright,1],x:0,y:-1,o:1};}else {return {p:[cell.bottomleft,0],x:0,y:1,o:0};}case 8:if(cval&Node2){return {p:[cell.bottomright],x:0,y:1,o:1};}else {return {p:[1,cell.righttop],x:-1,y:0,o:1};}case 9:if(cval&Node3){return {p:[1,cell.righttop],x:-1,y:0,o:1};}else {return {p:[cell.bottomleft,0],x:0,y:1,o:0};}case 10:if(cval&Node3){return {p:[0,cell.leftbottom],x:1,y:0,o:0};}else {return {p:[1,cell.righttop],x:-1,y:0,o:1};}case 11:if(cval&Node0){return {p:[1,cell.righttop],x:-1,y:0,o:1};}else {return {p:[0,cell.lefttop],x:1,y:0,o:1};}case 12:if(cval&Node2){return {p:[cell.bottomright,0],x:0,y:1,o:1};}else {return {p:[1,cell.rightbottom],x:-1,y:0,o:0};}case 13:if(cval&Node3){return {p:[1,cell.rightbottom],x:-1,y:0,o:0};}else {return {p:[cell.bottomleft,0],x:0,y:1,o:0};}case 14:if(cval&Node3){return {p:[0,cell.leftbottom],x:1,y:0,o:0};}else {return {p:[1,cell.rightbottom],x:-1,y:0,o:0};}case 15:if(cval&Node0){return {p:[1,cell.rightbottom],x:-1,y:0,o:0};}else {return {p:[0,cell.lefttop],x:1,y:0,o:1};}case 16:if(cval&Node2){return {p:[cell.bottomright,0],x:0,y:1,o:1};}else {return {p:[0,cell.leftbottom],x:1,y:0,o:0};}case 17:if(cval&Node0){return {p:[cell.bottomright,0],x:0,y:1,o:1};}else {return {p:[0,cell.lefttop],x:1,y:0,o:1};}case 18:if(cval&Node3){return {p:[0,cell.leftbottom],x:1,y:0,o:0};}else {return {p:[cell.bottomleft,0],x:0,y:1,o:0};}case 19:if(cval&Node0){return {p:[cell.bottomleft,0],x:0,y:1,o:0};}else {return {p:[0,cell.lefttop],x:1,y:0,o:1};}case 20:if(cval&Node0){return {p:[cell.topleft,1],x:0,y:-1,o:0};}else {return {p:[0,cell.leftbottom],x:1,y:0,o:0};}case 21:if(cval&Node1){return {p:[0,cell.leftbottom],x:1,y:0,o:0};}else {return {p:[cell.topright,1],x:0,y:-1,o:1};}case 22:if(cval&Node0){return {p:[cell.topleft,1],x:0,y:-1,o:0};}else {return {p:[0,cell.lefttop],x:1,y:0,o:1};}case 23:if(cval&Node1){return {p:[0,cell.lefttop],x:1,y:0,o:1};}else {return {p:[cell.topright,1],x:0,y:-1,o:1};}default:console.log(\"edge index out of range!\");console.log(cell);break;}}return null;}function getExitXY(cell,x,y,o){var e,id_x,x,y,d_x,d_y,cval=cell.cval;var d_o;switch(x){case -1:switch(o){case 0:e=isoBandEdgeRB[cval];d_x=isoBandNextXRB[cval];d_y=isoBandNextYRB[cval];d_o=isoBandNextORB[cval];break;default:e=isoBandEdgeRT[cval];d_x=isoBandNextXRT[cval];d_y=isoBandNextYRT[cval];d_o=isoBandNextORT[cval];break;};break;case 1:switch(o){case 0:e=isoBandEdgeLB[cval];d_x=isoBandNextXLB[cval];d_y=isoBandNextYLB[cval];d_o=isoBandNextOLB[cval];break;default:e=isoBandEdgeLT[cval];d_x=isoBandNextXLT[cval];d_y=isoBandNextYLT[cval];d_o=isoBandNextOLT[cval];break;};break;default:switch(y){case -1:switch(o){case 0:e=isoBandEdgeTL[cval];d_x=isoBandNextXTL[cval];d_y=isoBandNextYTL[cval];d_o=isoBandNextOTL[cval];break;default:e=isoBandEdgeTR[cval];d_x=isoBandNextXTR[cval];d_y=isoBandNextYTR[cval];d_o=isoBandNextOTR[cval];break;};break;case 1:switch(o){case 0:e=isoBandEdgeBL[cval];d_x=isoBandNextXBL[cval];d_y=isoBandNextYBL[cval];d_o=isoBandNextOBL[cval];break;default:e=isoBandEdgeBR[cval];d_x=isoBandNextXBR[cval];d_y=isoBandNextYBR[cval];d_o=isoBandNextOBR[cval];break;};break;default:break;};break;}id_x=cell.edges.indexOf(e);if(typeof cell.edges[id_x]!=='undefined'){deleteEdge(cell,id_x);}else { //console.log(\"wrong edges...\");\n\t//console.log(x + \" \" + y + \" \" + o);\n\t//console.log(cell);\n\treturn null;}cval=cell.cval_real;switch(e){case 0:if(cval&Node1){ /* node 1 within range */x=cell.topleft;y=1;}else { /* node 1 below or above threshold */x=1;y=cell.righttop;}break;case 1:if(cval&Node2){x=1;y=cell.rightbottom;}else {x=cell.topleft;y=1;}break;case 2:if(cval&Node2){x=cell.topleft;y=1;}else {x=cell.bottomright;y=0;}break;case 3:if(cval&Node3){x=cell.bottomleft;y=0;}else {x=cell.topleft;y=1;}break;case 4:if(cval&Node1){x=cell.topright;y=1;}else {x=1;y=cell.righttop;}break;case 5:if(cval&Node2){x=1;y=cell.rightbottom;}else {x=cell.topright;y=1;}break;case 6:if(cval&Node2){x=cell.topright;y=1;}else {x=cell.bottomright;y=0;}break;case 7:if(cval&Node3){x=cell.bottomleft;y=0;}else {x=cell.topright;y=1;}break;case 8:if(cval&Node2){x=1;y=cell.righttop;}else {x=cell.bottomright;y=0;}break;case 9:if(cval&Node3){x=cell.bottomleft;y=0;}else {x=1;y=cell.righttop;}break;case 10:if(cval&Node3){x=1;y=cell.righttop;}else {x=0;y=cell.leftbottom;}break;case 11:if(cval&Node0){x=0;y=cell.lefttop;}else {x=1;y=cell.righttop;}break;case 12:if(cval&Node2){x=1;y=cell.rightbottom;}else {x=cell.bottomright;y=0;}break;case 13:if(cval&Node3){x=cell.bottomleft;y=0;}else {x=1;y=cell.rightbottom;}break;case 14:if(cval&Node3){x=1;y=cell.rightbottom;}else {x=0;y=cell.leftbottom;}break;case 15:if(cval&Node0){x=0;y=cell.lefttop;}else {x=1;y=cell.rightbottom;}break;case 16:if(cval&Node2){x=0;y=cell.leftbottom;}else {x=cell.bottomright;y=0;}break;case 17:if(cval&Node0){x=0;y=cell.lefttop;}else {x=cell.bottomright;y=0;}break;case 18:if(cval&Node3){x=cell.bottomleft;y=0;}else {x=0;y=cell.leftbottom;}break;case 19:if(cval&Node0){x=0;y=cell.lefttop;}else {x=cell.bottomleft;y=0;}break;case 20:if(cval&Node0){x=0;y=cell.leftbottom;}else {x=cell.topleft;y=1;}break;case 21:if(cval&Node1){x=cell.topright;y=1;}else {x=0;y=cell.leftbottom;}break;case 22:if(cval&Node0){x=0;y=cell.lefttop;}else {x=cell.topleft;y=1;}break;case 23:if(cval&Node1){x=cell.topright;y=1;}else {x=0;y=cell.lefttop;}break;default:console.log(\"edge index out of range!\");console.log(cell);return null;}if(typeof x==='undefined'||typeof y==='undefined'||typeof d_x==='undefined'||typeof d_y==='undefined'||typeof d_o==='undefined'){console.log(\"undefined value!\");console.log(cell);console.log(x+\" \"+y+\" \"+d_x+\" \"+d_y+\" \"+d_o);}return {p:[x,y],x:d_x,y:d_y,o:d_o};}function BandGrid2Areas(grid){var areas=[];var area_idx=0;var rows=grid.rows;var cols=grid.cols;grid.cells.forEach(function(g,j){g.forEach(function(gg,i){if(typeof gg!=='undefined'){var a=polygon_table[gg.cval](gg);if((typeof a===\"undefined\"?\"undefined\":_typeof(a))==='object'&&isArray(a)){if(_typeof(a[0])==='object'&&isArray(a[0])){if(_typeof(a[0][0])==='object'&&isArray(a[0][0])){a.forEach(function(aa,k){aa.forEach(function(aaa){aaa[0]+=i;aaa[1]+=j;});areas[area_idx++]=aa;});}else {a.forEach(function(aa,k){aa[0]+=i;aa[1]+=j;});areas[area_idx++]=a;}}else {console.log(\"bandcell polygon with malformed coordinates\");}}else {console.log(\"bandcell polygon with null coordinates\");}}});});return areas;}if(true)!(__WEBPACK_AMD_DEFINE_FACTORY__ = (my), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));return my;}(MarchingSquaresJS||{});exports.MarchingSquaresJS=MarchingSquaresJS;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = drawContour;\n\t\n\tvar _MarchingSquares = __webpack_require__(2);\n\t\n\tvar _MarchingSquares2 = _interopRequireDefault(_MarchingSquares);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// drawContour :: Svg -> [[Number]] -> Int -> IO ()\n\tfunction drawContour(svg, data, width, customZs, reverse) {\n\t  var zs = customZs || [0, 1, 2, 4.5, 9, 13.5, 18, 22.5, 50, 100, 200, 300];\n\t\n\t  var xSize = data[0].length;\n\t  var ySize = data.length;\n\t\n\t  var xs = d3.range(0, xSize);\n\t  var ys = d3.range(0, ySize);\n\t  var height = width * (ys.length / xs.length);\n\t\n\t  var xScale = d3.scale.linear().range([0, width]).domain([0, xSize]);\n\t\n\t  var yScale = d3.scale.linear().range([0, height]).domain([0, ySize]);\n\t\n\t  var colours = d3.scale.linear().domain([zs[0], zs[zs.length - 1]]).range(reverse ? [d3.rgb(180, 180, 180), d3.rgb(0, 0, 0)] : [d3.rgb(0, 0, 0), d3.rgb(180, 180, 180)]);\n\t\n\t  var isoBands = [];\n\t  for (var i = 1; i < zs.length; i++) {\n\t    var lowerBand = zs[i - 1];\n\t    var upperBand = zs[i];\n\t\n\t    var band = _MarchingSquares2.default.IsoBands(data, lowerBand, upperBand - lowerBand);\n\t    isoBands.push({ \"coords\": band, \"level\": i, \"val\": zs[i] });\n\t  }\n\t\n\t  svg.selectAll(\"path\").data(isoBands).enter().append(\"path\").style(\"fill\", function (d) {\n\t    return colours(d.val);\n\t  }).style(\"stroke-opacity\", 0.2).style(\"stroke\", \"black\").style('opacity', 0.5).attr(\"d\", function (d) {\n\t    var p = \"\";\n\t    d.coords.forEach(function (aa, i) {\n\t      p += d3.svg.line().x(function (dat) {\n\t        return xScale(dat[0]);\n\t      }).y(function (dat) {\n\t        return yScale(dat[1]);\n\t      }).interpolate(\"linear\")(aa) + \"Z\";\n\t    });\n\t    return p;\n\t  });\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = interpolate;\n\tfunction interpolate(n, min, max) {\n\t  var step = (max - min) / n;\n\t  var i = 0,\n\t      curr = min,\n\t      vals = [];\n\t\n\t  for (i; i <= n; i++) {\n\t    vals.push(curr);\n\t    curr += step;\n\t  }\n\t\n\t  return vals;\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = metropolisHastings;\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction normalRandom(mean, variance, acceptFunc) {\n\t  if (mean == undefined) mean = 0.0;\n\t  if (variance == undefined) variance = 1.0;\n\t  var V1, V2, S;\n\t  do {\n\t    var U1 = Math.random();\n\t    var U2 = Math.random();\n\t    V1 = 2 * U1 - 1;\n\t    V2 = 2 * U2 - 1;\n\t    S = V1 * V1 + V2 * V2;\n\t  } while (S > 1);\n\t\n\t  var X = Math.sqrt(-2 * Math.log(S) / S) * V1;\n\t  X = mean + Math.sqrt(variance) * X;\n\t  return X;\n\t}\n\t\n\tvar rosenbrock = function rosenbrock(x, y) {\n\t  return Math.pow(1 - x, 2) + 100 * Math.pow(y - Math.pow(x, 2), 2);\n\t};\n\t\n\tfunction metropolisHastings(iterations, variance, acceptFunc) {\n\t  var i = 0;\n\t  var current = [0, 7];\n\t  var chain = [current];\n\t  var oldlik = rosenbrock.apply(undefined, _toConsumableArray(current));\n\t  var perturb = function perturb(x) {\n\t    return x + normalRandom(0, variance);\n\t  };\n\t\n\t  var accepted = 0;\n\t  for (i; i < iterations; i++) {\n\t    var candidate = current.map(perturb);\n\t    var newlik = rosenbrock.apply(undefined, _toConsumableArray(candidate));\n\t    var acceptProbability = oldlik / newlik;\n\t\n\t    if (Math.random() < acceptProbability) {\n\t      oldlik = newlik;\n\t      current = candidate;\n\t      accepted += 1;\n\t    }\n\t    chain.push(current);\n\t  }\n\t  if (acceptFunc) acceptFunc(accepted / iterations * 100);\n\t  return chain;\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//  Ramda v0.20.1\n\t//  https://github.com/ramda/ramda\n\t//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n\t//  Ramda may be freely distributed under the MIT license.\n\t\n\t;(function() {\n\t\n\t  'use strict';\n\t\n\t  /**\n\t     * A special placeholder value used to specify \"gaps\" within curried functions,\n\t     * allowing partial application of any combination of arguments, regardless of\n\t     * their positions.\n\t     *\n\t     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n\t     * equivalent:\n\t     *\n\t     *   - `g(1, 2, 3)`\n\t     *   - `g(_, 2, 3)(1)`\n\t     *   - `g(_, _, 3)(1)(2)`\n\t     *   - `g(_, _, 3)(1, 2)`\n\t     *   - `g(_, 2, _)(1, 3)`\n\t     *   - `g(_, 2)(1)(3)`\n\t     *   - `g(_, 2)(1, 3)`\n\t     *   - `g(_, 2)(_, 3)(1)`\n\t     *\n\t     * @constant\n\t     * @memberOf R\n\t     * @since v0.6.0\n\t     * @category Function\n\t     * @example\n\t     *\n\t     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n\t     *      greet('Alice'); //=> 'Hello, Alice!'\n\t     */\n\t    var __ = { '@@functional/placeholder': true };\n\t\n\t    /* eslint-disable no-unused-vars */\n\t    var _arity = function _arity(n, fn) {\n\t        /* eslint-disable no-unused-vars */\n\t        switch (n) {\n\t        case 0:\n\t            return function () {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 1:\n\t            return function (a0) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 2:\n\t            return function (a0, a1) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 3:\n\t            return function (a0, a1, a2) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 4:\n\t            return function (a0, a1, a2, a3) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 5:\n\t            return function (a0, a1, a2, a3, a4) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 6:\n\t            return function (a0, a1, a2, a3, a4, a5) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 7:\n\t            return function (a0, a1, a2, a3, a4, a5, a6) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 8:\n\t            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 9:\n\t            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        case 10:\n\t            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n\t                return fn.apply(this, arguments);\n\t            };\n\t        default:\n\t            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n\t        }\n\t    };\n\t\n\t    var _arrayFromIterator = function _arrayFromIterator(iter) {\n\t        var list = [];\n\t        var next;\n\t        while (!(next = iter.next()).done) {\n\t            list.push(next.value);\n\t        }\n\t        return list;\n\t    };\n\t\n\t    var _arrayOf = function _arrayOf() {\n\t        return Array.prototype.slice.call(arguments);\n\t    };\n\t\n\t    var _cloneRegExp = function _cloneRegExp(pattern) {\n\t        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n\t    };\n\t\n\t    var _complement = function _complement(f) {\n\t        return function () {\n\t            return !f.apply(this, arguments);\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Private `concat` function to merge two array-like objects.\n\t     *\n\t     * @private\n\t     * @param {Array|Arguments} [set1=[]] An array-like object.\n\t     * @param {Array|Arguments} [set2=[]] An array-like object.\n\t     * @return {Array} A new, merged array.\n\t     * @example\n\t     *\n\t     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n\t     */\n\t    var _concat = function _concat(set1, set2) {\n\t        set1 = set1 || [];\n\t        set2 = set2 || [];\n\t        var idx;\n\t        var len1 = set1.length;\n\t        var len2 = set2.length;\n\t        var result = [];\n\t        idx = 0;\n\t        while (idx < len1) {\n\t            result[result.length] = set1[idx];\n\t            idx += 1;\n\t        }\n\t        idx = 0;\n\t        while (idx < len2) {\n\t            result[result.length] = set2[idx];\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    };\n\t\n\t    var _containsWith = function _containsWith(pred, x, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        while (idx < len) {\n\t            if (pred(x, list[idx])) {\n\t                return true;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return false;\n\t    };\n\t\n\t    var _filter = function _filter(fn, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        var result = [];\n\t        while (idx < len) {\n\t            if (fn(list[idx])) {\n\t                result[result.length] = list[idx];\n\t            }\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    };\n\t\n\t    var _forceReduced = function _forceReduced(x) {\n\t        return {\n\t            '@@transducer/value': x,\n\t            '@@transducer/reduced': true\n\t        };\n\t    };\n\t\n\t    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n\t    var _functionName = function _functionName(f) {\n\t        // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n\t        var match = String(f).match(/^function (\\w*)/);\n\t        return match == null ? '' : match[1];\n\t    };\n\t\n\t    var _has = function _has(prop, obj) {\n\t        return Object.prototype.hasOwnProperty.call(obj, prop);\n\t    };\n\t\n\t    var _identity = function _identity(x) {\n\t        return x;\n\t    };\n\t\n\t    var _isArguments = function () {\n\t        var toString = Object.prototype.toString;\n\t        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n\t            return toString.call(x) === '[object Arguments]';\n\t        } : function _isArguments(x) {\n\t            return _has('callee', x);\n\t        };\n\t    }();\n\t\n\t    /**\n\t     * Tests whether or not an object is an array.\n\t     *\n\t     * @private\n\t     * @param {*} val The object to test.\n\t     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n\t     * @example\n\t     *\n\t     *      _isArray([]); //=> true\n\t     *      _isArray(null); //=> false\n\t     *      _isArray({}); //=> false\n\t     */\n\t    var _isArray = Array.isArray || function _isArray(val) {\n\t        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n\t    };\n\t\n\t    var _isFunction = function _isNumber(x) {\n\t        return Object.prototype.toString.call(x) === '[object Function]';\n\t    };\n\t\n\t    /**\n\t     * Determine if the passed argument is an integer.\n\t     *\n\t     * @private\n\t     * @param {*} n\n\t     * @category Type\n\t     * @return {Boolean}\n\t     */\n\t    var _isInteger = Number.isInteger || function _isInteger(n) {\n\t        return n << 0 === n;\n\t    };\n\t\n\t    var _isNumber = function _isNumber(x) {\n\t        return Object.prototype.toString.call(x) === '[object Number]';\n\t    };\n\t\n\t    var _isObject = function _isObject(x) {\n\t        return Object.prototype.toString.call(x) === '[object Object]';\n\t    };\n\t\n\t    var _isPlaceholder = function _isPlaceholder(a) {\n\t        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n\t    };\n\t\n\t    var _isRegExp = function _isRegExp(x) {\n\t        return Object.prototype.toString.call(x) === '[object RegExp]';\n\t    };\n\t\n\t    var _isString = function _isString(x) {\n\t        return Object.prototype.toString.call(x) === '[object String]';\n\t    };\n\t\n\t    var _isTransformer = function _isTransformer(obj) {\n\t        return typeof obj['@@transducer/step'] === 'function';\n\t    };\n\t\n\t    var _map = function _map(fn, functor) {\n\t        var idx = 0;\n\t        var len = functor.length;\n\t        var result = Array(len);\n\t        while (idx < len) {\n\t            result[idx] = fn(functor[idx]);\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    };\n\t\n\t    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t    var _objectAssign = function _objectAssign(target) {\n\t        if (target == null) {\n\t            throw new TypeError('Cannot convert undefined or null to object');\n\t        }\n\t        var output = Object(target);\n\t        var idx = 1;\n\t        var length = arguments.length;\n\t        while (idx < length) {\n\t            var source = arguments[idx];\n\t            if (source != null) {\n\t                for (var nextKey in source) {\n\t                    if (_has(nextKey, source)) {\n\t                        output[nextKey] = source[nextKey];\n\t                    }\n\t                }\n\t            }\n\t            idx += 1;\n\t        }\n\t        return output;\n\t    };\n\t\n\t    var _of = function _of(x) {\n\t        return [x];\n\t    };\n\t\n\t    var _pipe = function _pipe(f, g) {\n\t        return function () {\n\t            return g.call(this, f.apply(this, arguments));\n\t        };\n\t    };\n\t\n\t    var _pipeP = function _pipeP(f, g) {\n\t        return function () {\n\t            var ctx = this;\n\t            return f.apply(ctx, arguments).then(function (x) {\n\t                return g.call(ctx, x);\n\t            });\n\t        };\n\t    };\n\t\n\t    // \\b matches word boundary; [\\b] matches backspace\n\t    var _quote = function _quote(s) {\n\t        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n\t    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\t        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n\t    };\n\t\n\t    var _reduced = function _reduced(x) {\n\t        return x && x['@@transducer/reduced'] ? x : {\n\t            '@@transducer/value': x,\n\t            '@@transducer/reduced': true\n\t        };\n\t    };\n\t\n\t    /**\n\t     * An optimized, private array `slice` implementation.\n\t     *\n\t     * @private\n\t     * @param {Arguments|Array} args The array or arguments object to consider.\n\t     * @param {Number} [from=0] The array index to slice from, inclusive.\n\t     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n\t     * @return {Array} A new, sliced array.\n\t     * @example\n\t     *\n\t     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n\t     *\n\t     *      var firstThreeArgs = function(a, b, c, d) {\n\t     *        return _slice(arguments, 0, 3);\n\t     *      };\n\t     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n\t     */\n\t    var _slice = function _slice(args, from, to) {\n\t        switch (arguments.length) {\n\t        case 1:\n\t            return _slice(args, 0, args.length);\n\t        case 2:\n\t            return _slice(args, from, args.length);\n\t        default:\n\t            var list = [];\n\t            var idx = 0;\n\t            var len = Math.max(0, Math.min(args.length, to) - from);\n\t            while (idx < len) {\n\t                list[idx] = args[from + idx];\n\t                idx += 1;\n\t            }\n\t            return list;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n\t     */\n\t    var _toISOString = function () {\n\t        var pad = function pad(n) {\n\t            return (n < 10 ? '0' : '') + n;\n\t        };\n\t        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n\t            return d.toISOString();\n\t        } : function _toISOString(d) {\n\t            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n\t        };\n\t    }();\n\t\n\t    var _xfBase = {\n\t        init: function () {\n\t            return this.xf['@@transducer/init']();\n\t        },\n\t        result: function (result) {\n\t            return this.xf['@@transducer/result'](result);\n\t        }\n\t    };\n\t\n\t    var _xwrap = function () {\n\t        function XWrap(fn) {\n\t            this.f = fn;\n\t        }\n\t        XWrap.prototype['@@transducer/init'] = function () {\n\t            throw new Error('init not implemented on XWrap');\n\t        };\n\t        XWrap.prototype['@@transducer/result'] = function (acc) {\n\t            return acc;\n\t        };\n\t        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n\t            return this.f(acc, x);\n\t        };\n\t        return function _xwrap(fn) {\n\t            return new XWrap(fn);\n\t        };\n\t    }();\n\t\n\t    var _aperture = function _aperture(n, list) {\n\t        var idx = 0;\n\t        var limit = list.length - (n - 1);\n\t        var acc = new Array(limit >= 0 ? limit : 0);\n\t        while (idx < limit) {\n\t            acc[idx] = _slice(list, idx, idx + n);\n\t            idx += 1;\n\t        }\n\t        return acc;\n\t    };\n\t\n\t    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\t\n\t    /**\n\t     * Similar to hasMethod, this checks whether a function has a [methodname]\n\t     * function. If it isn't an array it will execute that function otherwise it\n\t     * will default to the ramda implementation.\n\t     *\n\t     * @private\n\t     * @param {Function} fn ramda implemtation\n\t     * @param {String} methodname property to check for a custom implementation\n\t     * @return {Object} Whatever the return value of the method is.\n\t     */\n\t    var _checkForMethod = function _checkForMethod(methodname, fn) {\n\t        return function () {\n\t            var length = arguments.length;\n\t            if (length === 0) {\n\t                return fn();\n\t            }\n\t            var obj = arguments[length - 1];\n\t            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Optimized internal one-arity curry function.\n\t     *\n\t     * @private\n\t     * @category Function\n\t     * @param {Function} fn The function to curry.\n\t     * @return {Function} The curried function.\n\t     */\n\t    var _curry1 = function _curry1(fn) {\n\t        return function f1(a) {\n\t            if (arguments.length === 0 || _isPlaceholder(a)) {\n\t                return f1;\n\t            } else {\n\t                return fn.apply(this, arguments);\n\t            }\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Optimized internal two-arity curry function.\n\t     *\n\t     * @private\n\t     * @category Function\n\t     * @param {Function} fn The function to curry.\n\t     * @return {Function} The curried function.\n\t     */\n\t    var _curry2 = function _curry2(fn) {\n\t        return function f2(a, b) {\n\t            switch (arguments.length) {\n\t            case 0:\n\t                return f2;\n\t            case 1:\n\t                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n\t                    return fn(a, _b);\n\t                });\n\t            default:\n\t                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n\t                    return fn(_a, b);\n\t                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n\t                    return fn(a, _b);\n\t                }) : fn(a, b);\n\t            }\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Optimized internal three-arity curry function.\n\t     *\n\t     * @private\n\t     * @category Function\n\t     * @param {Function} fn The function to curry.\n\t     * @return {Function} The curried function.\n\t     */\n\t    var _curry3 = function _curry3(fn) {\n\t        return function f3(a, b, c) {\n\t            switch (arguments.length) {\n\t            case 0:\n\t                return f3;\n\t            case 1:\n\t                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n\t                    return fn(a, _b, _c);\n\t                });\n\t            case 2:\n\t                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n\t                    return fn(_a, b, _c);\n\t                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n\t                    return fn(a, _b, _c);\n\t                }) : _curry1(function (_c) {\n\t                    return fn(a, b, _c);\n\t                });\n\t            default:\n\t                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n\t                    return fn(_a, _b, c);\n\t                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n\t                    return fn(_a, b, _c);\n\t                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n\t                    return fn(a, _b, _c);\n\t                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n\t                    return fn(_a, b, c);\n\t                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n\t                    return fn(a, _b, c);\n\t                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n\t                    return fn(a, b, _c);\n\t                }) : fn(a, b, c);\n\t            }\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Internal curryN function.\n\t     *\n\t     * @private\n\t     * @category Function\n\t     * @param {Number} length The arity of the curried function.\n\t     * @param {Array} received An array of arguments received thus far.\n\t     * @param {Function} fn The function to curry.\n\t     * @return {Function} The curried function.\n\t     */\n\t    var _curryN = function _curryN(length, received, fn) {\n\t        return function () {\n\t            var combined = [];\n\t            var argsIdx = 0;\n\t            var left = length;\n\t            var combinedIdx = 0;\n\t            while (combinedIdx < received.length || argsIdx < arguments.length) {\n\t                var result;\n\t                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n\t                    result = received[combinedIdx];\n\t                } else {\n\t                    result = arguments[argsIdx];\n\t                    argsIdx += 1;\n\t                }\n\t                combined[combinedIdx] = result;\n\t                if (!_isPlaceholder(result)) {\n\t                    left -= 1;\n\t                }\n\t                combinedIdx += 1;\n\t            }\n\t            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Returns a function that dispatches with different strategies based on the\n\t     * object in list position (last argument). If it is an array, executes [fn].\n\t     * Otherwise, if it has a function with [methodname], it will execute that\n\t     * function (functor case). Otherwise, if it is a transformer, uses transducer\n\t     * [xf] to return a new transformer (transducer case). Otherwise, it will\n\t     * default to executing [fn].\n\t     *\n\t     * @private\n\t     * @param {String} methodname property to check for a custom implementation\n\t     * @param {Function} xf transducer to initialize if object is transformer\n\t     * @param {Function} fn default ramda implementation\n\t     * @return {Function} A function that dispatches on object in list position\n\t     */\n\t    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n\t        return function () {\n\t            var length = arguments.length;\n\t            if (length === 0) {\n\t                return fn();\n\t            }\n\t            var obj = arguments[length - 1];\n\t            if (!_isArray(obj)) {\n\t                var args = _slice(arguments, 0, length - 1);\n\t                if (typeof obj[methodname] === 'function') {\n\t                    return obj[methodname].apply(obj, args);\n\t                }\n\t                if (_isTransformer(obj)) {\n\t                    var transducer = xf.apply(null, args);\n\t                    return transducer(obj);\n\t                }\n\t            }\n\t            return fn.apply(this, arguments);\n\t        };\n\t    };\n\t\n\t    var _dropLastWhile = function dropLastWhile(pred, list) {\n\t        var idx = list.length - 1;\n\t        while (idx >= 0 && pred(list[idx])) {\n\t            idx -= 1;\n\t        }\n\t        return _slice(list, 0, idx + 1);\n\t    };\n\t\n\t    var _xall = function () {\n\t        function XAll(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t            this.all = true;\n\t        }\n\t        XAll.prototype['@@transducer/init'] = _xfBase.init;\n\t        XAll.prototype['@@transducer/result'] = function (result) {\n\t            if (this.all) {\n\t                result = this.xf['@@transducer/step'](result, true);\n\t            }\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XAll.prototype['@@transducer/step'] = function (result, input) {\n\t            if (!this.f(input)) {\n\t                this.all = false;\n\t                result = _reduced(this.xf['@@transducer/step'](result, false));\n\t            }\n\t            return result;\n\t        };\n\t        return _curry2(function _xall(f, xf) {\n\t            return new XAll(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xany = function () {\n\t        function XAny(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t            this.any = false;\n\t        }\n\t        XAny.prototype['@@transducer/init'] = _xfBase.init;\n\t        XAny.prototype['@@transducer/result'] = function (result) {\n\t            if (!this.any) {\n\t                result = this.xf['@@transducer/step'](result, false);\n\t            }\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XAny.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.f(input)) {\n\t                this.any = true;\n\t                result = _reduced(this.xf['@@transducer/step'](result, true));\n\t            }\n\t            return result;\n\t        };\n\t        return _curry2(function _xany(f, xf) {\n\t            return new XAny(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xaperture = function () {\n\t        function XAperture(n, xf) {\n\t            this.xf = xf;\n\t            this.pos = 0;\n\t            this.full = false;\n\t            this.acc = new Array(n);\n\t        }\n\t        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n\t        XAperture.prototype['@@transducer/result'] = function (result) {\n\t            this.acc = null;\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XAperture.prototype['@@transducer/step'] = function (result, input) {\n\t            this.store(input);\n\t            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n\t        };\n\t        XAperture.prototype.store = function (input) {\n\t            this.acc[this.pos] = input;\n\t            this.pos += 1;\n\t            if (this.pos === this.acc.length) {\n\t                this.pos = 0;\n\t                this.full = true;\n\t            }\n\t        };\n\t        XAperture.prototype.getCopy = function () {\n\t            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n\t        };\n\t        return _curry2(function _xaperture(n, xf) {\n\t            return new XAperture(n, xf);\n\t        });\n\t    }();\n\t\n\t    var _xdrop = function () {\n\t        function XDrop(n, xf) {\n\t            this.xf = xf;\n\t            this.n = n;\n\t        }\n\t        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n\t        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n\t        XDrop.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.n > 0) {\n\t                this.n -= 1;\n\t                return result;\n\t            }\n\t            return this.xf['@@transducer/step'](result, input);\n\t        };\n\t        return _curry2(function _xdrop(n, xf) {\n\t            return new XDrop(n, xf);\n\t        });\n\t    }();\n\t\n\t    var _xdropLast = function () {\n\t        function XDropLast(n, xf) {\n\t            this.xf = xf;\n\t            this.pos = 0;\n\t            this.full = false;\n\t            this.acc = new Array(n);\n\t        }\n\t        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n\t        XDropLast.prototype['@@transducer/result'] = function (result) {\n\t            this.acc = null;\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.full) {\n\t                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n\t            }\n\t            this.store(input);\n\t            return result;\n\t        };\n\t        XDropLast.prototype.store = function (input) {\n\t            this.acc[this.pos] = input;\n\t            this.pos += 1;\n\t            if (this.pos === this.acc.length) {\n\t                this.pos = 0;\n\t                this.full = true;\n\t            }\n\t        };\n\t        return _curry2(function _xdropLast(n, xf) {\n\t            return new XDropLast(n, xf);\n\t        });\n\t    }();\n\t\n\t    var _xdropRepeatsWith = function () {\n\t        function XDropRepeatsWith(pred, xf) {\n\t            this.xf = xf;\n\t            this.pred = pred;\n\t            this.lastValue = undefined;\n\t            this.seenFirstValue = false;\n\t        }\n\t        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n\t            return this.xf['@@transducer/init']();\n\t        };\n\t        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n\t            var sameAsLast = false;\n\t            if (!this.seenFirstValue) {\n\t                this.seenFirstValue = true;\n\t            } else if (this.pred(this.lastValue, input)) {\n\t                sameAsLast = true;\n\t            }\n\t            this.lastValue = input;\n\t            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n\t        };\n\t        return _curry2(function _xdropRepeatsWith(pred, xf) {\n\t            return new XDropRepeatsWith(pred, xf);\n\t        });\n\t    }();\n\t\n\t    var _xdropWhile = function () {\n\t        function XDropWhile(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t        }\n\t        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n\t        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n\t        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.f) {\n\t                if (this.f(input)) {\n\t                    return result;\n\t                }\n\t                this.f = null;\n\t            }\n\t            return this.xf['@@transducer/step'](result, input);\n\t        };\n\t        return _curry2(function _xdropWhile(f, xf) {\n\t            return new XDropWhile(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xfilter = function () {\n\t        function XFilter(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t        }\n\t        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n\t        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n\t        XFilter.prototype['@@transducer/step'] = function (result, input) {\n\t            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n\t        };\n\t        return _curry2(function _xfilter(f, xf) {\n\t            return new XFilter(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xfind = function () {\n\t        function XFind(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t            this.found = false;\n\t        }\n\t        XFind.prototype['@@transducer/init'] = _xfBase.init;\n\t        XFind.prototype['@@transducer/result'] = function (result) {\n\t            if (!this.found) {\n\t                result = this.xf['@@transducer/step'](result, void 0);\n\t            }\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XFind.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.f(input)) {\n\t                this.found = true;\n\t                result = _reduced(this.xf['@@transducer/step'](result, input));\n\t            }\n\t            return result;\n\t        };\n\t        return _curry2(function _xfind(f, xf) {\n\t            return new XFind(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xfindIndex = function () {\n\t        function XFindIndex(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t            this.idx = -1;\n\t            this.found = false;\n\t        }\n\t        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n\t        XFindIndex.prototype['@@transducer/result'] = function (result) {\n\t            if (!this.found) {\n\t                result = this.xf['@@transducer/step'](result, -1);\n\t            }\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n\t            this.idx += 1;\n\t            if (this.f(input)) {\n\t                this.found = true;\n\t                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n\t            }\n\t            return result;\n\t        };\n\t        return _curry2(function _xfindIndex(f, xf) {\n\t            return new XFindIndex(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xfindLast = function () {\n\t        function XFindLast(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t        }\n\t        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n\t        XFindLast.prototype['@@transducer/result'] = function (result) {\n\t            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n\t        };\n\t        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.f(input)) {\n\t                this.last = input;\n\t            }\n\t            return result;\n\t        };\n\t        return _curry2(function _xfindLast(f, xf) {\n\t            return new XFindLast(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xfindLastIndex = function () {\n\t        function XFindLastIndex(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t            this.idx = -1;\n\t            this.lastIdx = -1;\n\t        }\n\t        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n\t        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n\t            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n\t        };\n\t        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n\t            this.idx += 1;\n\t            if (this.f(input)) {\n\t                this.lastIdx = this.idx;\n\t            }\n\t            return result;\n\t        };\n\t        return _curry2(function _xfindLastIndex(f, xf) {\n\t            return new XFindLastIndex(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xmap = function () {\n\t        function XMap(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t        }\n\t        XMap.prototype['@@transducer/init'] = _xfBase.init;\n\t        XMap.prototype['@@transducer/result'] = _xfBase.result;\n\t        XMap.prototype['@@transducer/step'] = function (result, input) {\n\t            return this.xf['@@transducer/step'](result, this.f(input));\n\t        };\n\t        return _curry2(function _xmap(f, xf) {\n\t            return new XMap(f, xf);\n\t        });\n\t    }();\n\t\n\t    var _xtake = function () {\n\t        function XTake(n, xf) {\n\t            this.xf = xf;\n\t            this.n = n;\n\t        }\n\t        XTake.prototype['@@transducer/init'] = _xfBase.init;\n\t        XTake.prototype['@@transducer/result'] = _xfBase.result;\n\t        XTake.prototype['@@transducer/step'] = function (result, input) {\n\t            if (this.n === 0) {\n\t                return _reduced(result);\n\t            } else {\n\t                this.n -= 1;\n\t                return this.xf['@@transducer/step'](result, input);\n\t            }\n\t        };\n\t        return _curry2(function _xtake(n, xf) {\n\t            return new XTake(n, xf);\n\t        });\n\t    }();\n\t\n\t    var _xtakeWhile = function () {\n\t        function XTakeWhile(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t        }\n\t        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n\t        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n\t        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n\t            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n\t        };\n\t        return _curry2(function _xtakeWhile(f, xf) {\n\t            return new XTakeWhile(f, xf);\n\t        });\n\t    }();\n\t\n\t    /**\n\t     * Adds two values.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Math\n\t     * @sig Number -> Number -> Number\n\t     * @param {Number} a\n\t     * @param {Number} b\n\t     * @return {Number}\n\t     * @see R.subtract\n\t     * @example\n\t     *\n\t     *      R.add(2, 3);       //=>  5\n\t     *      R.add(7)(10);      //=> 17\n\t     */\n\t    var add = _curry2(function add(a, b) {\n\t        return Number(a) + Number(b);\n\t    });\n\t\n\t    /**\n\t     * Applies a function to the value at the given index of an array, returning a\n\t     * new copy of the array with the element at the given index replaced with the\n\t     * result of the function application.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category List\n\t     * @sig (a -> a) -> Number -> [a] -> [a]\n\t     * @param {Function} fn The function to apply.\n\t     * @param {Number} idx The index.\n\t     * @param {Array|Arguments} list An array-like object whose value\n\t     *        at the supplied index will be replaced.\n\t     * @return {Array} A copy of the supplied array-like object with\n\t     *         the element at index `idx` replaced with the value\n\t     *         returned by applying `fn` to the existing element.\n\t     * @see R.update\n\t     * @example\n\t     *\n\t     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n\t     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n\t     */\n\t    var adjust = _curry3(function adjust(fn, idx, list) {\n\t        if (idx >= list.length || idx < -list.length) {\n\t            return list;\n\t        }\n\t        var start = idx < 0 ? list.length : 0;\n\t        var _idx = start + idx;\n\t        var _list = _concat(list);\n\t        _list[_idx] = fn(list[_idx]);\n\t        return _list;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if all elements of the list match the predicate, `false` if\n\t     * there are any that don't.\n\t     *\n\t     * Dispatches to the `all` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> Boolean\n\t     * @param {Function} fn The predicate function.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n\t     *         otherwise.\n\t     * @see R.any, R.none, R.transduce\n\t     * @example\n\t     *\n\t     *      var lessThan2 = R.flip(R.lt)(2);\n\t     *      var lessThan3 = R.flip(R.lt)(3);\n\t     *      R.all(lessThan2)([1, 2]); //=> false\n\t     *      R.all(lessThan3)([1, 2]); //=> true\n\t     */\n\t    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n\t        var idx = 0;\n\t        while (idx < list.length) {\n\t            if (!fn(list[idx])) {\n\t                return false;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return true;\n\t    }));\n\t\n\t    /**\n\t     * Returns a function that always returns the given value. Note that for\n\t     * non-primitives the value returned is a reference to the original value.\n\t     *\n\t     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n\t     * other languages and libraries.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig a -> (* -> a)\n\t     * @param {*} val The value to wrap in a function\n\t     * @return {Function} A Function :: * -> val.\n\t     * @example\n\t     *\n\t     *      var t = R.always('Tee');\n\t     *      t(); //=> 'Tee'\n\t     */\n\t    var always = _curry1(function always(val) {\n\t        return function () {\n\t            return val;\n\t        };\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if both arguments are `true`; `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Logic\n\t     * @sig * -> * -> *\n\t     * @param {Boolean} a A boolean value\n\t     * @param {Boolean} b A boolean value\n\t     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n\t     * @see R.both\n\t     * @example\n\t     *\n\t     *      R.and(true, true); //=> true\n\t     *      R.and(true, false); //=> false\n\t     *      R.and(false, true); //=> false\n\t     *      R.and(false, false); //=> false\n\t     */\n\t    var and = _curry2(function and(a, b) {\n\t        return a && b;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if at least one of elements of the list match the predicate,\n\t     * `false` otherwise.\n\t     *\n\t     * Dispatches to the `any` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> Boolean\n\t     * @param {Function} fn The predicate function.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n\t     *         otherwise.\n\t     * @see R.all, R.none, R.transduce\n\t     * @example\n\t     *\n\t     *      var lessThan0 = R.flip(R.lt)(0);\n\t     *      var lessThan2 = R.flip(R.lt)(2);\n\t     *      R.any(lessThan0)([1, 2]); //=> false\n\t     *      R.any(lessThan2)([1, 2]); //=> true\n\t     */\n\t    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n\t        var idx = 0;\n\t        while (idx < list.length) {\n\t            if (fn(list[idx])) {\n\t                return true;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return false;\n\t    }));\n\t\n\t    /**\n\t     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n\t     * greater than the length of the list, an empty list is returned.\n\t     *\n\t     * Dispatches to the `aperture` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [[a]]\n\t     * @param {Number} n The size of the tuples to create\n\t     * @param {Array} list The list to split into `n`-tuples\n\t     * @return {Array} The new list.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n\t     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\t     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n\t     */\n\t    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\t\n\t    /**\n\t     * Returns a new list containing the contents of the given list, followed by\n\t     * the given element.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig a -> [a] -> [a]\n\t     * @param {*} el The element to add to the end of the new list.\n\t     * @param {Array} list The list whose contents will be added to the beginning of the output\n\t     *        list.\n\t     * @return {Array} A new list containing the contents of the old list followed by `el`.\n\t     * @see R.prepend\n\t     * @example\n\t     *\n\t     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n\t     *      R.append('tests', []); //=> ['tests']\n\t     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n\t     */\n\t    var append = _curry2(function append(el, list) {\n\t        return _concat(list, [el]);\n\t    });\n\t\n\t    /**\n\t     * Applies function `fn` to the argument list `args`. This is useful for\n\t     * creating a fixed-arity function from a variadic function. `fn` should be a\n\t     * bound function if context is significant.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category Function\n\t     * @sig (*... -> a) -> [*] -> a\n\t     * @param {Function} fn\n\t     * @param {Array} args\n\t     * @return {*}\n\t     * @see R.call, R.unapply\n\t     * @example\n\t     *\n\t     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n\t     *      R.apply(Math.max, nums); //=> 42\n\t     */\n\t    var apply = _curry2(function apply(fn, args) {\n\t        return fn.apply(this, args);\n\t    });\n\t\n\t    /**\n\t     * Makes a shallow clone of an object, setting or overriding the specified\n\t     * property with the given value. Note that this copies and flattens prototype\n\t     * properties onto the new object as well. All non-primitive properties are\n\t     * copied by reference.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Object\n\t     * @sig String -> a -> {k: v} -> {k: v}\n\t     * @param {String} prop the property name to set\n\t     * @param {*} val the new value\n\t     * @param {Object} obj the object to clone\n\t     * @return {Object} a new object similar to the original except for the specified property.\n\t     * @see R.dissoc\n\t     * @example\n\t     *\n\t     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n\t     */\n\t    var assoc = _curry3(function assoc(prop, val, obj) {\n\t        var result = {};\n\t        for (var p in obj) {\n\t            result[p] = obj[p];\n\t        }\n\t        result[prop] = val;\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Makes a shallow clone of an object, setting or overriding the nodes required\n\t     * to create the given path, and placing the specific value at the tail end of\n\t     * that path. Note that this copies and flattens prototype properties onto the\n\t     * new object as well. All non-primitive properties are copied by reference.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Object\n\t     * @sig [String] -> a -> {k: v} -> {k: v}\n\t     * @param {Array} path the path to set\n\t     * @param {*} val the new value\n\t     * @param {Object} obj the object to clone\n\t     * @return {Object} a new object similar to the original except along the specified path.\n\t     * @see R.dissocPath\n\t     * @example\n\t     *\n\t     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n\t     */\n\t    var assocPath = _curry3(function assocPath(path, val, obj) {\n\t        switch (path.length) {\n\t        case 0:\n\t            return val;\n\t        case 1:\n\t            return assoc(path[0], val, obj);\n\t        default:\n\t            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Creates a function that is bound to a context.\n\t     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n\t     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.6.0\n\t     * @category Function\n\t     * @category Object\n\t     * @sig (* -> *) -> {*} -> (* -> *)\n\t     * @param {Function} fn The function to bind to context\n\t     * @param {Object} thisObj The context to bind `fn` to\n\t     * @return {Function} A function that will execute in the context of `thisObj`.\n\t     * @see R.partial\n\t     */\n\t    var bind = _curry2(function bind(fn, thisObj) {\n\t        return _arity(fn.length, function () {\n\t            return fn.apply(thisObj, arguments);\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Restricts a number to be within a range.\n\t     *\n\t     * Also works for other ordered types such as Strings and Dates.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.20.0\n\t     * @category Relaction\n\t     * @sig Ord a => a -> a -> a -> a\n\t     * @param {Number} minimum number\n\t     * @param {Number} maximum number\n\t     * @param {Number} value to be clamped\n\t     * @return {Number} Returns the clamped value\n\t     * @example\n\t     *\n\t     *      R.clamp(1, 10, -1) // => 1\n\t     *      R.clamp(1, 10, 11) // => 10\n\t     *      R.clamp(1, 10, 4)  // => 4\n\t     */\n\t    var clamp = _curry3(function clamp(min, max, value) {\n\t        if (min > max) {\n\t            throw new Error('min must not be greater than max in clamp(min, max, value)');\n\t        }\n\t        return value < min ? min : value > max ? max : value;\n\t    });\n\t\n\t    /**\n\t     * Makes a comparator function out of a function that reports whether the first\n\t     * element is less than the second.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (a, b -> Boolean) -> (a, b -> Number)\n\t     * @param {Function} pred A predicate function of arity two.\n\t     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n\t     * @example\n\t     *\n\t     *      var cmp = R.comparator((a, b) => a.age < b.age);\n\t     *      var people = [\n\t     *        // ...\n\t     *      ];\n\t     *      R.sort(cmp, people);\n\t     */\n\t    var comparator = _curry1(function comparator(pred) {\n\t        return function (a, b) {\n\t            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n\t        };\n\t    });\n\t\n\t    /**\n\t     * Counts the elements of a list according to how many match each value of a\n\t     * key generated by the supplied function. Returns an object mapping the keys\n\t     * produced by `fn` to the number of occurrences in the list. Note that all\n\t     * keys are coerced to strings because of how JavaScript objects work.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig (a -> String) -> [a] -> {*}\n\t     * @param {Function} fn The function used to map values to keys.\n\t     * @param {Array} list The list to count elements from.\n\t     * @return {Object} An object mapping keys to number of occurrences in the list.\n\t     * @example\n\t     *\n\t     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n\t     *      var letters = R.split('', 'abcABCaaaBBc');\n\t     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n\t     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n\t     */\n\t    var countBy = _curry2(function countBy(fn, list) {\n\t        var counts = {};\n\t        var len = list.length;\n\t        var idx = 0;\n\t        while (idx < len) {\n\t            var key = fn(list[idx]);\n\t            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;\n\t            idx += 1;\n\t        }\n\t        return counts;\n\t    });\n\t\n\t    /**\n\t     * Returns a curried equivalent of the provided function, with the specified\n\t     * arity. The curried function has two unusual capabilities. First, its\n\t     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n\t     * following are equivalent:\n\t     *\n\t     *   - `g(1)(2)(3)`\n\t     *   - `g(1)(2, 3)`\n\t     *   - `g(1, 2)(3)`\n\t     *   - `g(1, 2, 3)`\n\t     *\n\t     * Secondly, the special placeholder value `R.__` may be used to specify\n\t     * \"gaps\", allowing partial application of any combination of arguments,\n\t     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n\t     * following are equivalent:\n\t     *\n\t     *   - `g(1, 2, 3)`\n\t     *   - `g(_, 2, 3)(1)`\n\t     *   - `g(_, _, 3)(1)(2)`\n\t     *   - `g(_, _, 3)(1, 2)`\n\t     *   - `g(_, 2)(1)(3)`\n\t     *   - `g(_, 2)(1, 3)`\n\t     *   - `g(_, 2)(_, 3)(1)`\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.5.0\n\t     * @category Function\n\t     * @sig Number -> (* -> a) -> (* -> a)\n\t     * @param {Number} length The arity for the returned function.\n\t     * @param {Function} fn The function to curry.\n\t     * @return {Function} A new, curried function.\n\t     * @see R.curry\n\t     * @example\n\t     *\n\t     *      var sumArgs = (...args) => R.sum(args);\n\t     *\n\t     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n\t     *      var f = curriedAddFourNumbers(1, 2);\n\t     *      var g = f(3);\n\t     *      g(4); //=> 10\n\t     */\n\t    var curryN = _curry2(function curryN(length, fn) {\n\t        if (length === 1) {\n\t            return _curry1(fn);\n\t        }\n\t        return _arity(length, _curryN(length, [], fn));\n\t    });\n\t\n\t    /**\n\t     * Decrements its argument.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Math\n\t     * @sig Number -> Number\n\t     * @param {Number} n\n\t     * @return {Number}\n\t     * @see R.inc\n\t     * @example\n\t     *\n\t     *      R.dec(42); //=> 41\n\t     */\n\t    var dec = add(-1);\n\t\n\t    /**\n\t     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n\t     * otherwise the first argument is returned.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category Logic\n\t     * @sig a -> b -> a | b\n\t     * @param {a} val The default value.\n\t     * @param {b} val The value to return if it is not null or undefined\n\t     * @return {*} The the second value or the default value\n\t     * @example\n\t     *\n\t     *      var defaultTo42 = R.defaultTo(42);\n\t     *\n\t     *      defaultTo42(null);  //=> 42\n\t     *      defaultTo42(undefined);  //=> 42\n\t     *      defaultTo42('Ramda');  //=> 'Ramda'\n\t     *      defaultTo42(parseInt('string')); //=> 42\n\t     */\n\t    var defaultTo = _curry2(function defaultTo(d, v) {\n\t        return v == null || v !== v ? d : v;\n\t    });\n\t\n\t    /**\n\t     * Finds the set (i.e. no duplicates) of all elements in the first list not\n\t     * contained in the second list. Duplication is determined according to the\n\t     * value returned by applying the supplied predicate to two list elements.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n\t     * @param {Function} pred A predicate used to test whether two items are equal.\n\t     * @param {Array} list1 The first list.\n\t     * @param {Array} list2 The second list.\n\t     * @return {Array} The elements in `list1` that are not in `list2`.\n\t     * @see R.difference\n\t     * @example\n\t     *\n\t     *      var cmp = (x, y) => x.a === y.a;\n\t     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n\t     *      var l2 = [{a: 3}, {a: 4}];\n\t     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n\t     */\n\t    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n\t        var out = [];\n\t        var idx = 0;\n\t        var firstLen = first.length;\n\t        while (idx < firstLen) {\n\t            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n\t                out.push(first[idx]);\n\t            }\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Returns a new object that does not contain a `prop` property.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category Object\n\t     * @sig String -> {k: v} -> {k: v}\n\t     * @param {String} prop the name of the property to dissociate\n\t     * @param {Object} obj the object to clone\n\t     * @return {Object} a new object similar to the original but without the specified property\n\t     * @see R.assoc\n\t     * @example\n\t     *\n\t     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n\t     */\n\t    var dissoc = _curry2(function dissoc(prop, obj) {\n\t        var result = {};\n\t        for (var p in obj) {\n\t            if (p !== prop) {\n\t                result[p] = obj[p];\n\t            }\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Makes a shallow clone of an object, omitting the property at the given path.\n\t     * Note that this copies and flattens prototype properties onto the new object\n\t     * as well. All non-primitive properties are copied by reference.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.11.0\n\t     * @category Object\n\t     * @sig [String] -> {k: v} -> {k: v}\n\t     * @param {Array} path the path to set\n\t     * @param {Object} obj the object to clone\n\t     * @return {Object} a new object without the property at path\n\t     * @see R.assocPath\n\t     * @example\n\t     *\n\t     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n\t     */\n\t    var dissocPath = _curry2(function dissocPath(path, obj) {\n\t        switch (path.length) {\n\t        case 0:\n\t            return obj;\n\t        case 1:\n\t            return dissoc(path[0], obj);\n\t        default:\n\t            var head = path[0];\n\t            var tail = _slice(path, 1);\n\t            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Divides two numbers. Equivalent to `a / b`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Math\n\t     * @sig Number -> Number -> Number\n\t     * @param {Number} a The first value.\n\t     * @param {Number} b The second value.\n\t     * @return {Number} The result of `a / b`.\n\t     * @see R.multiply\n\t     * @example\n\t     *\n\t     *      R.divide(71, 100); //=> 0.71\n\t     *\n\t     *      var half = R.divide(R.__, 2);\n\t     *      half(42); //=> 21\n\t     *\n\t     *      var reciprocal = R.divide(1);\n\t     *      reciprocal(4);   //=> 0.25\n\t     */\n\t    var divide = _curry2(function divide(a, b) {\n\t        return a / b;\n\t    });\n\t\n\t    /**\n\t     * Returns a new list containing the last `n` elements of a given list, passing\n\t     * each value to the supplied predicate function, skipping elements while the\n\t     * predicate function returns `true`. The predicate function is passed one\n\t     * argument: *(value)*.\n\t     *\n\t     * Dispatches to the `dropWhile` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> [a]\n\t     * @param {Function} fn The function called per iteration.\n\t     * @param {Array} list The collection to iterate over.\n\t     * @return {Array} A new array.\n\t     * @see R.takeWhile, R.transduce, R.addIndex\n\t     * @example\n\t     *\n\t     *      var lteTwo = x => x <= 2;\n\t     *\n\t     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n\t     */\n\t    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        while (idx < len && pred(list[idx])) {\n\t            idx += 1;\n\t        }\n\t        return _slice(list, idx);\n\t    }));\n\t\n\t    /**\n\t     * Returns the empty value of its argument's type. Ramda defines the empty\n\t     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n\t     * types are supported if they define `<Type>.empty` and/or\n\t     * `<Type>.prototype.empty`.\n\t     *\n\t     * Dispatches to the `empty` method of the first argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category Function\n\t     * @sig a -> a\n\t     * @param {*} x\n\t     * @return {*}\n\t     * @example\n\t     *\n\t     *      R.empty(Just(42));      //=> Nothing()\n\t     *      R.empty([1, 2, 3]);     //=> []\n\t     *      R.empty('unicorns');    //=> ''\n\t     *      R.empty({x: 1, y: 2});  //=> {}\n\t     */\n\t    // else\n\t    var empty = _curry1(function empty(x) {\n\t        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n\t            return arguments;\n\t        }() : // else\n\t        void 0;\n\t    });\n\t\n\t    /**\n\t     * Creates a new object by recursively evolving a shallow copy of `object`,\n\t     * according to the `transformation` functions. All non-primitive properties\n\t     * are copied by reference.\n\t     *\n\t     * A `transformation` function will not be invoked if its corresponding key\n\t     * does not exist in the evolved object.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Object\n\t     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n\t     * @param {Object} transformations The object specifying transformation functions to apply\n\t     *        to the object.\n\t     * @param {Object} object The object to be transformed.\n\t     * @return {Object} The transformed object.\n\t     * @example\n\t     *\n\t     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n\t     *      var transformations = {\n\t     *        firstName: R.trim,\n\t     *        lastName: R.trim, // Will not get invoked.\n\t     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n\t     *      };\n\t     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n\t     */\n\t    var evolve = _curry2(function evolve(transformations, object) {\n\t        var result = {};\n\t        var transformation, key, type;\n\t        for (key in object) {\n\t            transformation = transformations[key];\n\t            type = typeof transformation;\n\t            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns the first element of the list which matches the predicate, or\n\t     * `undefined` if no element matches.\n\t     *\n\t     * Dispatches to the `find` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> a | undefined\n\t     * @param {Function} fn The predicate function used to determine if the element is the\n\t     *        desired one.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Object} The element found, or `undefined`.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n\t     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n\t     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n\t     */\n\t    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        while (idx < len) {\n\t            if (fn(list[idx])) {\n\t                return list[idx];\n\t            }\n\t            idx += 1;\n\t        }\n\t    }));\n\t\n\t    /**\n\t     * Returns the index of the first element of the list which matches the\n\t     * predicate, or `-1` if no element matches.\n\t     *\n\t     * Dispatches to the `findIndex` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> Number\n\t     * @param {Function} fn The predicate function used to determine if the element is the\n\t     * desired one.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Number} The index of the element found, or `-1`.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n\t     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n\t     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n\t     */\n\t    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        while (idx < len) {\n\t            if (fn(list[idx])) {\n\t                return idx;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return -1;\n\t    }));\n\t\n\t    /**\n\t     * Returns the last element of the list which matches the predicate, or\n\t     * `undefined` if no element matches.\n\t     *\n\t     * Dispatches to the `findLast` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> a | undefined\n\t     * @param {Function} fn The predicate function used to determine if the element is the\n\t     * desired one.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Object} The element found, or `undefined`.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n\t     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n\t     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n\t     */\n\t    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n\t        var idx = list.length - 1;\n\t        while (idx >= 0) {\n\t            if (fn(list[idx])) {\n\t                return list[idx];\n\t            }\n\t            idx -= 1;\n\t        }\n\t    }));\n\t\n\t    /**\n\t     * Returns the index of the last element of the list which matches the\n\t     * predicate, or `-1` if no element matches.\n\t     *\n\t     * Dispatches to the `findLastIndex` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> Number\n\t     * @param {Function} fn The predicate function used to determine if the element is the\n\t     * desired one.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Number} The index of the element found, or `-1`.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n\t     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n\t     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n\t     */\n\t    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n\t        var idx = list.length - 1;\n\t        while (idx >= 0) {\n\t            if (fn(list[idx])) {\n\t                return idx;\n\t            }\n\t            idx -= 1;\n\t        }\n\t        return -1;\n\t    }));\n\t\n\t    /**\n\t     * Iterate over an input `list`, calling a provided function `fn` for each\n\t     * element in the list.\n\t     *\n\t     * `fn` receives one argument: *(value)*.\n\t     *\n\t     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n\t     * arrays), unlike the native `Array.prototype.forEach` method. For more\n\t     * details on this behavior, see:\n\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n\t     *\n\t     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n\t     * the original array. In some libraries this function is named `each`.\n\t     *\n\t     * Dispatches to the `forEach` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category List\n\t     * @sig (a -> *) -> [a] -> [a]\n\t     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {Array} The original list.\n\t     * @see R.addIndex\n\t     * @example\n\t     *\n\t     *      var printXPlusFive = x => console.log(x + 5);\n\t     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n\t     *      //-> 6\n\t     *      //-> 7\n\t     *      //-> 8\n\t     */\n\t    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n\t        var len = list.length;\n\t        var idx = 0;\n\t        while (idx < len) {\n\t            fn(list[idx]);\n\t            idx += 1;\n\t        }\n\t        return list;\n\t    }));\n\t\n\t    /**\n\t     * Creates a new object out of a list key-value pairs.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category List\n\t     * @sig [[k,v]] -> {k: v}\n\t     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n\t     * @return {Object} The object made by pairing up `keys` and `values`.\n\t     * @see R.toPairs, R.pair\n\t     * @example\n\t     *\n\t     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n\t     */\n\t    var fromPairs = _curry1(function fromPairs(pairs) {\n\t        var idx = 0;\n\t        var len = pairs.length;\n\t        var out = {};\n\t        while (idx < len) {\n\t            if (_isArray(pairs[idx]) && pairs[idx].length) {\n\t                out[pairs[idx][0]] = pairs[idx][1];\n\t            }\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the first argument is greater than the second; `false`\n\t     * otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord a => a -> a -> Boolean\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {Boolean}\n\t     * @see R.lt\n\t     * @example\n\t     *\n\t     *      R.gt(2, 1); //=> true\n\t     *      R.gt(2, 2); //=> false\n\t     *      R.gt(2, 3); //=> false\n\t     *      R.gt('a', 'z'); //=> false\n\t     *      R.gt('z', 'a'); //=> true\n\t     */\n\t    var gt = _curry2(function gt(a, b) {\n\t        return a > b;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the first argument is greater than or equal to the second;\n\t     * `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord a => a -> a -> Boolean\n\t     * @param {Number} a\n\t     * @param {Number} b\n\t     * @return {Boolean}\n\t     * @see R.lte\n\t     * @example\n\t     *\n\t     *      R.gte(2, 1); //=> true\n\t     *      R.gte(2, 2); //=> true\n\t     *      R.gte(2, 3); //=> false\n\t     *      R.gte('a', 'z'); //=> false\n\t     *      R.gte('z', 'a'); //=> true\n\t     */\n\t    var gte = _curry2(function gte(a, b) {\n\t        return a >= b;\n\t    });\n\t\n\t    /**\n\t     * Returns whether or not an object has an own property with the specified name\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category Object\n\t     * @sig s -> {s: x} -> Boolean\n\t     * @param {String} prop The name of the property to check for.\n\t     * @param {Object} obj The object to query.\n\t     * @return {Boolean} Whether the property exists.\n\t     * @example\n\t     *\n\t     *      var hasName = R.has('name');\n\t     *      hasName({name: 'alice'});   //=> true\n\t     *      hasName({name: 'bob'});     //=> true\n\t     *      hasName({});                //=> false\n\t     *\n\t     *      var point = {x: 0, y: 0};\n\t     *      var pointHas = R.has(R.__, point);\n\t     *      pointHas('x');  //=> true\n\t     *      pointHas('y');  //=> true\n\t     *      pointHas('z');  //=> false\n\t     */\n\t    var has = _curry2(_has);\n\t\n\t    /**\n\t     * Returns whether or not an object or its prototype chain has a property with\n\t     * the specified name\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category Object\n\t     * @sig s -> {s: x} -> Boolean\n\t     * @param {String} prop The name of the property to check for.\n\t     * @param {Object} obj The object to query.\n\t     * @return {Boolean} Whether the property exists.\n\t     * @example\n\t     *\n\t     *      function Rectangle(width, height) {\n\t     *        this.width = width;\n\t     *        this.height = height;\n\t     *      }\n\t     *      Rectangle.prototype.area = function() {\n\t     *        return this.width * this.height;\n\t     *      };\n\t     *\n\t     *      var square = new Rectangle(2, 2);\n\t     *      R.hasIn('width', square);  //=> true\n\t     *      R.hasIn('area', square);  //=> true\n\t     */\n\t    var hasIn = _curry2(function hasIn(prop, obj) {\n\t        return prop in obj;\n\t    });\n\t\n\t    /**\n\t     * Returns true if its arguments are identical, false otherwise. Values are\n\t     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n\t     * `0` and `-0` are not identical.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.15.0\n\t     * @category Relation\n\t     * @sig a -> a -> Boolean\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {Boolean}\n\t     * @example\n\t     *\n\t     *      var o = {};\n\t     *      R.identical(o, o); //=> true\n\t     *      R.identical(1, 1); //=> true\n\t     *      R.identical(1, '1'); //=> false\n\t     *      R.identical([], []); //=> false\n\t     *      R.identical(0, -0); //=> false\n\t     *      R.identical(NaN, NaN); //=> true\n\t     */\n\t    // SameValue algorithm\n\t    // Steps 1-5, 7-10\n\t    // Steps 6.b-6.e: +0 != -0\n\t    // Step 6.a: NaN == NaN\n\t    var identical = _curry2(function identical(a, b) {\n\t        // SameValue algorithm\n\t        if (a === b) {\n\t            // Steps 1-5, 7-10\n\t            // Steps 6.b-6.e: +0 != -0\n\t            return a !== 0 || 1 / a === 1 / b;\n\t        } else {\n\t            // Step 6.a: NaN == NaN\n\t            return a !== a && b !== b;\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A function that does nothing but return the parameter supplied to it. Good\n\t     * as a default or placeholder function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig a -> a\n\t     * @param {*} x The value to return.\n\t     * @return {*} The input value, `x`.\n\t     * @example\n\t     *\n\t     *      R.identity(1); //=> 1\n\t     *\n\t     *      var obj = {};\n\t     *      R.identity(obj) === obj; //=> true\n\t     */\n\t    var identity = _curry1(_identity);\n\t\n\t    /**\n\t     * Creates a function that will process either the `onTrue` or the `onFalse`\n\t     * function depending upon the result of the `condition` predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Logic\n\t     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n\t     * @param {Function} condition A predicate function\n\t     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n\t     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n\t     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n\t     *                    function depending upon the result of the `condition` predicate.\n\t     * @see R.unless, R.when\n\t     * @example\n\t     *\n\t     *      var incCount = R.ifElse(\n\t     *        R.has('count'),\n\t     *        R.over(R.lensProp('count'), R.inc),\n\t     *        R.assoc('count', 1)\n\t     *      );\n\t     *      incCount({});           //=> { count: 1 }\n\t     *      incCount({ count: 1 }); //=> { count: 2 }\n\t     */\n\t    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n\t        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n\t            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Increments its argument.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Math\n\t     * @sig Number -> Number\n\t     * @param {Number} n\n\t     * @return {Number}\n\t     * @see R.dec\n\t     * @example\n\t     *\n\t     *      R.inc(42); //=> 43\n\t     */\n\t    var inc = add(1);\n\t\n\t    /**\n\t     * Inserts the supplied element into the list, at index `index`. _Note that\n\t     * this is not destructive_: it returns a copy of the list with the changes.\n\t     * <small>No lists have been harmed in the application of this function.</small>\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.2\n\t     * @category List\n\t     * @sig Number -> a -> [a] -> [a]\n\t     * @param {Number} index The position to insert the element\n\t     * @param {*} elt The element to insert into the Array\n\t     * @param {Array} list The list to insert into\n\t     * @return {Array} A new Array with `elt` inserted at `index`.\n\t     * @example\n\t     *\n\t     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n\t     */\n\t    var insert = _curry3(function insert(idx, elt, list) {\n\t        idx = idx < list.length && idx >= 0 ? idx : list.length;\n\t        var result = _slice(list);\n\t        result.splice(idx, 0, elt);\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n\t     * destructive_: it returns a copy of the list with the changes.\n\t     * <small>No lists have been harmed in the application of this function.</small>\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [a] -> [a]\n\t     * @param {Number} index The position to insert the sub-list\n\t     * @param {Array} elts The sub-list to insert into the Array\n\t     * @param {Array} list The list to insert the sub-list into\n\t     * @return {Array} A new Array with `elts` inserted starting at `index`.\n\t     * @example\n\t     *\n\t     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n\t     */\n\t    var insertAll = _curry3(function insertAll(idx, elts, list) {\n\t        idx = idx < list.length && idx >= 0 ? idx : list.length;\n\t        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n\t    });\n\t\n\t    /**\n\t     * Creates a new list with the separator interposed between elements.\n\t     *\n\t     * Dispatches to the `intersperse` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category List\n\t     * @sig a -> [a] -> [a]\n\t     * @param {*} separator The element to add to the list.\n\t     * @param {Array} list The list to be interposed.\n\t     * @return {Array} The new list.\n\t     * @example\n\t     *\n\t     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n\t     */\n\t    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n\t        var out = [];\n\t        var idx = 0;\n\t        var length = list.length;\n\t        while (idx < length) {\n\t            if (idx === length - 1) {\n\t                out.push(list[idx]);\n\t            } else {\n\t                out.push(list[idx], separator);\n\t            }\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    }));\n\t\n\t    /**\n\t     * See if an object (`val`) is an instance of the supplied constructor. This\n\t     * function will check up the inheritance chain, if any.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category Type\n\t     * @sig (* -> {*}) -> a -> Boolean\n\t     * @param {Object} ctor A constructor\n\t     * @param {*} val The value to test\n\t     * @return {Boolean}\n\t     * @example\n\t     *\n\t     *      R.is(Object, {}); //=> true\n\t     *      R.is(Number, 1); //=> true\n\t     *      R.is(Object, 1); //=> false\n\t     *      R.is(String, 's'); //=> true\n\t     *      R.is(String, new String('')); //=> true\n\t     *      R.is(Object, new String('')); //=> true\n\t     *      R.is(Object, 's'); //=> false\n\t     *      R.is(Number, {}); //=> false\n\t     */\n\t    var is = _curry2(function is(Ctor, val) {\n\t        return val != null && val.constructor === Ctor || val instanceof Ctor;\n\t    });\n\t\n\t    /**\n\t     * Tests whether or not an object is similar to an array.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.5.0\n\t     * @category Type\n\t     * @category List\n\t     * @sig * -> Boolean\n\t     * @param {*} x The object to test.\n\t     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n\t     * @example\n\t     *\n\t     *      R.isArrayLike([]); //=> true\n\t     *      R.isArrayLike(true); //=> false\n\t     *      R.isArrayLike({}); //=> false\n\t     *      R.isArrayLike({length: 10}); //=> false\n\t     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n\t     */\n\t    var isArrayLike = _curry1(function isArrayLike(x) {\n\t        if (_isArray(x)) {\n\t            return true;\n\t        }\n\t        if (!x) {\n\t            return false;\n\t        }\n\t        if (typeof x !== 'object') {\n\t            return false;\n\t        }\n\t        if (x instanceof String) {\n\t            return false;\n\t        }\n\t        if (x.nodeType === 1) {\n\t            return !!x.length;\n\t        }\n\t        if (x.length === 0) {\n\t            return true;\n\t        }\n\t        if (x.length > 0) {\n\t            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n\t        }\n\t        return false;\n\t    });\n\t\n\t    /**\n\t     * Checks if the input value is `null` or `undefined`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Type\n\t     * @sig * -> Boolean\n\t     * @param {*} x The value to test.\n\t     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n\t     * @example\n\t     *\n\t     *      R.isNil(null); //=> true\n\t     *      R.isNil(undefined); //=> true\n\t     *      R.isNil(0); //=> false\n\t     *      R.isNil([]); //=> false\n\t     */\n\t    var isNil = _curry1(function isNil(x) {\n\t        return x == null;\n\t    });\n\t\n\t    /**\n\t     * Returns a list containing the names of all the enumerable own properties of\n\t     * the supplied object.\n\t     * Note that the order of the output array is not guaranteed to be consistent\n\t     * across different JS platforms.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig {k: v} -> [k]\n\t     * @param {Object} obj The object to extract properties from\n\t     * @return {Array} An array of the object's own properties.\n\t     * @example\n\t     *\n\t     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n\t     */\n\t    // cover IE < 9 keys issues\n\t    // Safari bug\n\t    var keys = function () {\n\t        // cover IE < 9 keys issues\n\t        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n\t        var nonEnumerableProps = [\n\t            'constructor',\n\t            'valueOf',\n\t            'isPrototypeOf',\n\t            'toString',\n\t            'propertyIsEnumerable',\n\t            'hasOwnProperty',\n\t            'toLocaleString'\n\t        ];\n\t        // Safari bug\n\t        var hasArgsEnumBug = function () {\n\t            'use strict';\n\t            return arguments.propertyIsEnumerable('length');\n\t        }();\n\t        var contains = function contains(list, item) {\n\t            var idx = 0;\n\t            while (idx < list.length) {\n\t                if (list[idx] === item) {\n\t                    return true;\n\t                }\n\t                idx += 1;\n\t            }\n\t            return false;\n\t        };\n\t        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n\t            return Object(obj) !== obj ? [] : Object.keys(obj);\n\t        }) : _curry1(function keys(obj) {\n\t            if (Object(obj) !== obj) {\n\t                return [];\n\t            }\n\t            var prop, nIdx;\n\t            var ks = [];\n\t            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n\t            for (prop in obj) {\n\t                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n\t                    ks[ks.length] = prop;\n\t                }\n\t            }\n\t            if (hasEnumBug) {\n\t                nIdx = nonEnumerableProps.length - 1;\n\t                while (nIdx >= 0) {\n\t                    prop = nonEnumerableProps[nIdx];\n\t                    if (_has(prop, obj) && !contains(ks, prop)) {\n\t                        ks[ks.length] = prop;\n\t                    }\n\t                    nIdx -= 1;\n\t                }\n\t            }\n\t            return ks;\n\t        });\n\t    }();\n\t\n\t    /**\n\t     * Returns a list containing the names of all the properties of the supplied\n\t     * object, including prototype properties.\n\t     * Note that the order of the output array is not guaranteed to be consistent\n\t     * across different JS platforms.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.0\n\t     * @category Object\n\t     * @sig {k: v} -> [k]\n\t     * @param {Object} obj The object to extract properties from\n\t     * @return {Array} An array of the object's own and prototype properties.\n\t     * @example\n\t     *\n\t     *      var F = function() { this.x = 'X'; };\n\t     *      F.prototype.y = 'Y';\n\t     *      var f = new F();\n\t     *      R.keysIn(f); //=> ['x', 'y']\n\t     */\n\t    var keysIn = _curry1(function keysIn(obj) {\n\t        var prop;\n\t        var ks = [];\n\t        for (prop in obj) {\n\t            ks[ks.length] = prop;\n\t        }\n\t        return ks;\n\t    });\n\t\n\t    /**\n\t     * Returns the number of elements in the array by returning `list.length`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category List\n\t     * @sig [a] -> Number\n\t     * @param {Array} list The array to inspect.\n\t     * @return {Number} The length of the array.\n\t     * @example\n\t     *\n\t     *      R.length([]); //=> 0\n\t     *      R.length([1, 2, 3]); //=> 3\n\t     */\n\t    var length = _curry1(function length(list) {\n\t        return list != null && is(Number, list.length) ? list.length : NaN;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the first argument is less than the second; `false`\n\t     * otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord a => a -> a -> Boolean\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {Boolean}\n\t     * @see R.gt\n\t     * @example\n\t     *\n\t     *      R.lt(2, 1); //=> false\n\t     *      R.lt(2, 2); //=> false\n\t     *      R.lt(2, 3); //=> true\n\t     *      R.lt('a', 'z'); //=> true\n\t     *      R.lt('z', 'a'); //=> false\n\t     */\n\t    var lt = _curry2(function lt(a, b) {\n\t        return a < b;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the first argument is less than or equal to the second;\n\t     * `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord a => a -> a -> Boolean\n\t     * @param {Number} a\n\t     * @param {Number} b\n\t     * @return {Boolean}\n\t     * @see R.gte\n\t     * @example\n\t     *\n\t     *      R.lte(2, 1); //=> false\n\t     *      R.lte(2, 2); //=> true\n\t     *      R.lte(2, 3); //=> true\n\t     *      R.lte('a', 'z'); //=> true\n\t     *      R.lte('z', 'a'); //=> false\n\t     */\n\t    var lte = _curry2(function lte(a, b) {\n\t        return a <= b;\n\t    });\n\t\n\t    /**\n\t     * The mapAccum function behaves like a combination of map and reduce; it\n\t     * applies a function to each element of a list, passing an accumulating\n\t     * parameter from left to right, and returning a final value of this\n\t     * accumulator together with the new list.\n\t     *\n\t     * The iterator function receives two arguments, *acc* and *value*, and should\n\t     * return a tuple *[acc, value]*.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category List\n\t     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n\t     * @param {Function} fn The function to be called on every element of the input `list`.\n\t     * @param {*} acc The accumulator value.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {*} The final, accumulated value.\n\t     * @see R.addIndex\n\t     * @example\n\t     *\n\t     *      var digits = ['1', '2', '3', '4'];\n\t     *      var appender = (a, b) => [a + b, a + b];\n\t     *\n\t     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n\t     */\n\t    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        var result = [];\n\t        var tuple = [acc];\n\t        while (idx < len) {\n\t            tuple = fn(tuple[0], list[idx]);\n\t            result[idx] = tuple[1];\n\t            idx += 1;\n\t        }\n\t        return [\n\t            tuple[0],\n\t            result\n\t        ];\n\t    });\n\t\n\t    /**\n\t     * The mapAccumRight function behaves like a combination of map and reduce; it\n\t     * applies a function to each element of a list, passing an accumulating\n\t     * parameter from right to left, and returning a final value of this\n\t     * accumulator together with the new list.\n\t     *\n\t     * Similar to `mapAccum`, except moves through the input list from the right to\n\t     * the left.\n\t     *\n\t     * The iterator function receives two arguments, *acc* and *value*, and should\n\t     * return a tuple *[acc, value]*.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category List\n\t     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n\t     * @param {Function} fn The function to be called on every element of the input `list`.\n\t     * @param {*} acc The accumulator value.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {*} The final, accumulated value.\n\t     * @see R.addIndex\n\t     * @example\n\t     *\n\t     *      var digits = ['1', '2', '3', '4'];\n\t     *      var append = (a, b) => [a + b, a + b];\n\t     *\n\t     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n\t     */\n\t    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n\t        var idx = list.length - 1;\n\t        var result = [];\n\t        var tuple = [acc];\n\t        while (idx >= 0) {\n\t            tuple = fn(tuple[0], list[idx]);\n\t            result[idx] = tuple[1];\n\t            idx -= 1;\n\t        }\n\t        return [\n\t            tuple[0],\n\t            result\n\t        ];\n\t    });\n\t\n\t    /**\n\t     * Tests a regular expression against a String. Note that this function will\n\t     * return an empty array when there are no matches. This differs from\n\t     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n\t     * which returns `null` when there are no matches.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category String\n\t     * @sig RegExp -> String -> [String | Undefined]\n\t     * @param {RegExp} rx A regular expression.\n\t     * @param {String} str The string to match against\n\t     * @return {Array} The list of matches or empty array.\n\t     * @see R.test\n\t     * @example\n\t     *\n\t     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n\t     *      R.match(/a/, 'b'); //=> []\n\t     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n\t     */\n\t    var match = _curry2(function match(rx, str) {\n\t        return str.match(rx) || [];\n\t    });\n\t\n\t    /**\n\t     * mathMod behaves like the modulo operator should mathematically, unlike the\n\t     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n\t     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n\t     * when the modulus is zero or negative.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category Math\n\t     * @sig Number -> Number -> Number\n\t     * @param {Number} m The dividend.\n\t     * @param {Number} p the modulus.\n\t     * @return {Number} The result of `b mod a`.\n\t     * @example\n\t     *\n\t     *      R.mathMod(-17, 5);  //=> 3\n\t     *      R.mathMod(17, 5);   //=> 2\n\t     *      R.mathMod(17, -5);  //=> NaN\n\t     *      R.mathMod(17, 0);   //=> NaN\n\t     *      R.mathMod(17.2, 5); //=> NaN\n\t     *      R.mathMod(17, 5.3); //=> NaN\n\t     *\n\t     *      var clock = R.mathMod(R.__, 12);\n\t     *      clock(15); //=> 3\n\t     *      clock(24); //=> 0\n\t     *\n\t     *      var seventeenMod = R.mathMod(17);\n\t     *      seventeenMod(3);  //=> 2\n\t     *      seventeenMod(4);  //=> 1\n\t     *      seventeenMod(10); //=> 7\n\t     */\n\t    var mathMod = _curry2(function mathMod(m, p) {\n\t        if (!_isInteger(m)) {\n\t            return NaN;\n\t        }\n\t        if (!_isInteger(p) || p < 1) {\n\t            return NaN;\n\t        }\n\t        return (m % p + p) % p;\n\t    });\n\t\n\t    /**\n\t     * Returns the larger of its two arguments.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord a => a -> a -> a\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {*}\n\t     * @see R.maxBy, R.min\n\t     * @example\n\t     *\n\t     *      R.max(789, 123); //=> 789\n\t     *      R.max('a', 'b'); //=> 'b'\n\t     */\n\t    var max = _curry2(function max(a, b) {\n\t        return b > a ? b : a;\n\t    });\n\t\n\t    /**\n\t     * Takes a function and two values, and returns whichever value produces the\n\t     * larger result when passed to the provided function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Relation\n\t     * @sig Ord b => (a -> b) -> a -> a -> a\n\t     * @param {Function} f\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {*}\n\t     * @see R.max, R.minBy\n\t     * @example\n\t     *\n\t     *      //  square :: Number -> Number\n\t     *      var square = n => n * n;\n\t     *\n\t     *      R.maxBy(square, -3, 2); //=> -3\n\t     *\n\t     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n\t     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n\t     */\n\t    var maxBy = _curry3(function maxBy(f, a, b) {\n\t        return f(b) > f(a) ? b : a;\n\t    });\n\t\n\t    /**\n\t     * Create a new object with the own properties of the first object merged with\n\t     * the own properties of the second object. If a key exists in both objects,\n\t     * the value from the second object will be used.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig {k: v} -> {k: v} -> {k: v}\n\t     * @param {Object} l\n\t     * @param {Object} r\n\t     * @return {Object}\n\t     * @see R.mergeWith, R.mergeWithKey\n\t     * @example\n\t     *\n\t     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n\t     *      //=> { 'name': 'fred', 'age': 40 }\n\t     *\n\t     *      var resetToDefault = R.merge(R.__, {x: 0});\n\t     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n\t     */\n\t    var merge = _curry2(function merge(l, r) {\n\t        return _assign({}, l, r);\n\t    });\n\t\n\t    /**\n\t     * Merges a list of objects together into one object.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category List\n\t     * @sig [{k: v}] -> {k: v}\n\t     * @param {Array} list An array of objects\n\t     * @return {Object} A merged object.\n\t     * @see R.reduce\n\t     * @example\n\t     *\n\t     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n\t     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n\t     */\n\t    var mergeAll = _curry1(function mergeAll(list) {\n\t        return _assign.apply(null, [{}].concat(list));\n\t    });\n\t\n\t    /**\n\t     * Creates a new object with the own properties of the two provided objects. If\n\t     * a key exists in both objects, the provided function is applied to the key\n\t     * and the values associated with the key in each object, with the result being\n\t     * used as the value associated with the key in the returned object. The key\n\t     * will be excluded from the returned object if the resulting value is\n\t     * `undefined`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Object\n\t     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n\t     * @param {Function} fn\n\t     * @param {Object} l\n\t     * @param {Object} r\n\t     * @return {Object}\n\t     * @see R.merge, R.mergeWith\n\t     * @example\n\t     *\n\t     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n\t     *      R.mergeWithKey(concatValues,\n\t     *                     { a: true, thing: 'foo', values: [10, 20] },\n\t     *                     { b: true, thing: 'bar', values: [15, 35] });\n\t     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n\t     */\n\t    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n\t        var result = {};\n\t        var k;\n\t        for (k in l) {\n\t            if (_has(k, l)) {\n\t                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n\t            }\n\t        }\n\t        for (k in r) {\n\t            if (_has(k, r) && !_has(k, result)) {\n\t                result[k] = r[k];\n\t            }\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns the smaller of its two arguments.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord a => a -> a -> a\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {*}\n\t     * @see R.minBy, R.max\n\t     * @example\n\t     *\n\t     *      R.min(789, 123); //=> 123\n\t     *      R.min('a', 'b'); //=> 'a'\n\t     */\n\t    var min = _curry2(function min(a, b) {\n\t        return b < a ? b : a;\n\t    });\n\t\n\t    /**\n\t     * Takes a function and two values, and returns whichever value produces the\n\t     * smaller result when passed to the provided function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Relation\n\t     * @sig Ord b => (a -> b) -> a -> a -> a\n\t     * @param {Function} f\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {*}\n\t     * @see R.min, R.maxBy\n\t     * @example\n\t     *\n\t     *      //  square :: Number -> Number\n\t     *      var square = n => n * n;\n\t     *\n\t     *      R.minBy(square, -3, 2); //=> 2\n\t     *\n\t     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n\t     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n\t     */\n\t    var minBy = _curry3(function minBy(f, a, b) {\n\t        return f(b) < f(a) ? b : a;\n\t    });\n\t\n\t    /**\n\t     * Divides the second parameter by the first and returns the remainder. Note\n\t     * that this function preserves the JavaScript-style behavior for modulo. For\n\t     * mathematical modulo see `mathMod`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category Math\n\t     * @sig Number -> Number -> Number\n\t     * @param {Number} a The value to the divide.\n\t     * @param {Number} b The pseudo-modulus\n\t     * @return {Number} The result of `b % a`.\n\t     * @see R.mathMod\n\t     * @example\n\t     *\n\t     *      R.modulo(17, 3); //=> 2\n\t     *      // JS behavior:\n\t     *      R.modulo(-17, 3); //=> -2\n\t     *      R.modulo(17, -3); //=> 2\n\t     *\n\t     *      var isOdd = R.modulo(R.__, 2);\n\t     *      isOdd(42); //=> 0\n\t     *      isOdd(21); //=> 1\n\t     */\n\t    var modulo = _curry2(function modulo(a, b) {\n\t        return a % b;\n\t    });\n\t\n\t    /**\n\t     * Multiplies two numbers. Equivalent to `a * b` but curried.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Math\n\t     * @sig Number -> Number -> Number\n\t     * @param {Number} a The first value.\n\t     * @param {Number} b The second value.\n\t     * @return {Number} The result of `a * b`.\n\t     * @see R.divide\n\t     * @example\n\t     *\n\t     *      var double = R.multiply(2);\n\t     *      var triple = R.multiply(3);\n\t     *      double(3);       //=>  6\n\t     *      triple(4);       //=> 12\n\t     *      R.multiply(2, 5);  //=> 10\n\t     */\n\t    var multiply = _curry2(function multiply(a, b) {\n\t        return a * b;\n\t    });\n\t\n\t    /**\n\t     * Wraps a function of any arity (including nullary) in a function that accepts\n\t     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n\t     * supplied function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig Number -> (* -> a) -> (* -> a)\n\t     * @param {Number} n The desired arity of the new function.\n\t     * @param {Function} fn The function to wrap.\n\t     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n\t     *         arity `n`.\n\t     * @example\n\t     *\n\t     *      var takesTwoArgs = (a, b) => [a, b];\n\t     *\n\t     *      takesTwoArgs.length; //=> 2\n\t     *      takesTwoArgs(1, 2); //=> [1, 2]\n\t     *\n\t     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n\t     *      takesOneArg.length; //=> 1\n\t     *      // Only `n` arguments are passed to the wrapped function\n\t     *      takesOneArg(1, 2); //=> [1, undefined]\n\t     */\n\t    var nAry = _curry2(function nAry(n, fn) {\n\t        switch (n) {\n\t        case 0:\n\t            return function () {\n\t                return fn.call(this);\n\t            };\n\t        case 1:\n\t            return function (a0) {\n\t                return fn.call(this, a0);\n\t            };\n\t        case 2:\n\t            return function (a0, a1) {\n\t                return fn.call(this, a0, a1);\n\t            };\n\t        case 3:\n\t            return function (a0, a1, a2) {\n\t                return fn.call(this, a0, a1, a2);\n\t            };\n\t        case 4:\n\t            return function (a0, a1, a2, a3) {\n\t                return fn.call(this, a0, a1, a2, a3);\n\t            };\n\t        case 5:\n\t            return function (a0, a1, a2, a3, a4) {\n\t                return fn.call(this, a0, a1, a2, a3, a4);\n\t            };\n\t        case 6:\n\t            return function (a0, a1, a2, a3, a4, a5) {\n\t                return fn.call(this, a0, a1, a2, a3, a4, a5);\n\t            };\n\t        case 7:\n\t            return function (a0, a1, a2, a3, a4, a5, a6) {\n\t                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n\t            };\n\t        case 8:\n\t            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n\t                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n\t            };\n\t        case 9:\n\t            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n\t                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n\t            };\n\t        case 10:\n\t            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n\t                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n\t            };\n\t        default:\n\t            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Negates its argument.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Math\n\t     * @sig Number -> Number\n\t     * @param {Number} n\n\t     * @return {Number}\n\t     * @example\n\t     *\n\t     *      R.negate(42); //=> -42\n\t     */\n\t    var negate = _curry1(function negate(n) {\n\t        return -n;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if no elements of the list match the predicate, `false`\n\t     * otherwise.\n\t     *\n\t     * Dispatches to the `any` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> Boolean\n\t     * @param {Function} fn The predicate function.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n\t     * @see R.all, R.any\n\t     * @example\n\t     *\n\t     *      var isEven = n => n % 2 === 0;\n\t     *\n\t     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n\t     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n\t     */\n\t    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\t\n\t    /**\n\t     * A function that returns the `!` of its argument. It will return `true` when\n\t     * passed false-y value, and `false` when passed a truth-y one.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Logic\n\t     * @sig * -> Boolean\n\t     * @param {*} a any value\n\t     * @return {Boolean} the logical inverse of passed argument.\n\t     * @see R.complement\n\t     * @example\n\t     *\n\t     *      R.not(true); //=> false\n\t     *      R.not(false); //=> true\n\t     *      R.not(0); => true\n\t     *      R.not(1); => false\n\t     */\n\t    var not = _curry1(function not(a) {\n\t        return !a;\n\t    });\n\t\n\t    /**\n\t     * Returns the nth element of the given list or string. If n is negative the\n\t     * element at index length + n is returned.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Number -> [a] -> a | Undefined\n\t     * @sig Number -> String -> String\n\t     * @param {Number} offset\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @example\n\t     *\n\t     *      var list = ['foo', 'bar', 'baz', 'quux'];\n\t     *      R.nth(1, list); //=> 'bar'\n\t     *      R.nth(-1, list); //=> 'quux'\n\t     *      R.nth(-99, list); //=> undefined\n\t     *\n\t     *      R.nth('abc', 2); //=> 'c'\n\t     *      R.nth('abc', 3); //=> ''\n\t     */\n\t    var nth = _curry2(function nth(offset, list) {\n\t        var idx = offset < 0 ? list.length + offset : offset;\n\t        return _isString(list) ? list.charAt(idx) : list[idx];\n\t    });\n\t\n\t    /**\n\t     * Returns a function which returns its nth argument.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Function\n\t     * @sig Number -> *... -> *\n\t     * @param {Number} n\n\t     * @return {Function}\n\t     * @example\n\t     *\n\t     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n\t     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n\t     */\n\t    var nthArg = _curry1(function nthArg(n) {\n\t        return function () {\n\t            return nth(n, arguments);\n\t        };\n\t    });\n\t\n\t    /**\n\t     * Creates an object containing a single key:value pair.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category Object\n\t     * @sig String -> a -> {String:a}\n\t     * @param {String} key\n\t     * @param {*} val\n\t     * @return {Object}\n\t     * @see R.pair\n\t     * @example\n\t     *\n\t     *      var matchPhrases = R.compose(\n\t     *        R.objOf('must'),\n\t     *        R.map(R.objOf('match_phrase'))\n\t     *      );\n\t     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n\t     */\n\t    var objOf = _curry2(function objOf(key, val) {\n\t        var obj = {};\n\t        obj[key] = val;\n\t        return obj;\n\t    });\n\t\n\t    /**\n\t     * Returns a singleton array containing the value provided.\n\t     *\n\t     * Note this `of` is different from the ES6 `of`; See\n\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category Function\n\t     * @sig a -> [a]\n\t     * @param {*} x any value\n\t     * @return {Array} An array wrapping `x`.\n\t     * @example\n\t     *\n\t     *      R.of(null); //=> [null]\n\t     *      R.of([42]); //=> [[42]]\n\t     */\n\t    var of = _curry1(_of);\n\t\n\t    /**\n\t     * Accepts a function `fn` and returns a function that guards invocation of\n\t     * `fn` such that `fn` can only ever be called once, no matter how many times\n\t     * the returned function is invoked. The first value calculated is returned in\n\t     * subsequent invocations.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (a... -> b) -> (a... -> b)\n\t     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n\t     * @return {Function} The wrapped function.\n\t     * @example\n\t     *\n\t     *      var addOneOnce = R.once(x => x + 1);\n\t     *      addOneOnce(10); //=> 11\n\t     *      addOneOnce(addOneOnce(50)); //=> 11\n\t     */\n\t    var once = _curry1(function once(fn) {\n\t        var called = false;\n\t        var result;\n\t        return _arity(fn.length, function () {\n\t            if (called) {\n\t                return result;\n\t            }\n\t            called = true;\n\t            result = fn.apply(this, arguments);\n\t            return result;\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n\t     * if both arguments are `false`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Logic\n\t     * @sig * -> * -> *\n\t     * @param {Boolean} a A boolean value\n\t     * @param {Boolean} b A boolean value\n\t     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n\t     * @see R.either\n\t     * @example\n\t     *\n\t     *      R.or(true, true); //=> true\n\t     *      R.or(true, false); //=> true\n\t     *      R.or(false, true); //=> true\n\t     *      R.or(false, false); //=> false\n\t     */\n\t    var or = _curry2(function or(a, b) {\n\t        return a || b;\n\t    });\n\t\n\t    /**\n\t     * Returns the result of \"setting\" the portion of the given data structure\n\t     * focused by the given lens to the result of applying the given function to\n\t     * the focused value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig Lens s a -> (a -> a) -> s -> s\n\t     * @param {Lens} lens\n\t     * @param {*} v\n\t     * @param {*} x\n\t     * @return {*}\n\t     * @see R.prop, R.lensIndex, R.lensProp\n\t     * @example\n\t     *\n\t     *      var headLens = R.lensIndex(0);\n\t     *\n\t     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n\t     */\n\t    // `Identity` is a functor that holds a single value, where `map` simply\n\t    // transforms the held value with the provided function.\n\t    // The value returned by the getter function is first transformed with `f`,\n\t    // then set as the value of an `Identity`. This is then mapped over with the\n\t    // setter function of the lens.\n\t    var over = function () {\n\t        // `Identity` is a functor that holds a single value, where `map` simply\n\t        // transforms the held value with the provided function.\n\t        var Identity = function (x) {\n\t            return {\n\t                value: x,\n\t                map: function (f) {\n\t                    return Identity(f(x));\n\t                }\n\t            };\n\t        };\n\t        return _curry3(function over(lens, f, x) {\n\t            // The value returned by the getter function is first transformed with `f`,\n\t            // then set as the value of an `Identity`. This is then mapped over with the\n\t            // setter function of the lens.\n\t            return lens(function (y) {\n\t                return Identity(f(y));\n\t            })(x).value;\n\t        });\n\t    }();\n\t\n\t    /**\n\t     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category List\n\t     * @sig a -> b -> (a,b)\n\t     * @param {*} fst\n\t     * @param {*} snd\n\t     * @return {Array}\n\t     * @see R.objOf, R.of\n\t     * @example\n\t     *\n\t     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n\t     */\n\t    var pair = _curry2(function pair(fst, snd) {\n\t        return [\n\t            fst,\n\t            snd\n\t        ];\n\t    });\n\t\n\t    /**\n\t     * Retrieve the value at a given path.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.0\n\t     * @category Object\n\t     * @sig [String] -> {k: v} -> v | Undefined\n\t     * @param {Array} path The path to use.\n\t     * @param {Object} obj The object to retrieve the nested property from.\n\t     * @return {*} The data at `path`.\n\t     * @example\n\t     *\n\t     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n\t     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n\t     */\n\t    var path = _curry2(function path(paths, obj) {\n\t        var val = obj;\n\t        var idx = 0;\n\t        while (idx < paths.length) {\n\t            if (val == null) {\n\t                return;\n\t            }\n\t            val = val[paths[idx]];\n\t            idx += 1;\n\t        }\n\t        return val;\n\t    });\n\t\n\t    /**\n\t     * If the given, non-null object has a value at the given path, returns the\n\t     * value at that path. Otherwise returns the provided default value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category Object\n\t     * @sig a -> [String] -> Object -> a\n\t     * @param {*} d The default value.\n\t     * @param {Array} p The path to use.\n\t     * @param {Object} obj The object to retrieve the nested property from.\n\t     * @return {*} The data at `path` of the supplied object or the default value.\n\t     * @example\n\t     *\n\t     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n\t     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n\t     */\n\t    var pathOr = _curry3(function pathOr(d, p, obj) {\n\t        return defaultTo(d, path(p, obj));\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the specified object property at given path satisfies the\n\t     * given predicate; `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Logic\n\t     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n\t     * @param {Function} pred\n\t     * @param {Array} propPath\n\t     * @param {*} obj\n\t     * @return {Boolean}\n\t     * @see R.propSatisfies, R.path\n\t     * @example\n\t     *\n\t     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n\t     */\n\t    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n\t        return propPath.length > 0 && pred(path(propPath, obj));\n\t    });\n\t\n\t    /**\n\t     * Returns a partial copy of an object containing only the keys specified. If\n\t     * the key does not exist, the property is ignored.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig [k] -> {k: v} -> {k: v}\n\t     * @param {Array} names an array of String property names to copy onto a new object\n\t     * @param {Object} obj The object to copy from\n\t     * @return {Object} A new object with only properties from `names` on it.\n\t     * @see R.omit, R.props\n\t     * @example\n\t     *\n\t     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n\t     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n\t     */\n\t    var pick = _curry2(function pick(names, obj) {\n\t        var result = {};\n\t        var idx = 0;\n\t        while (idx < names.length) {\n\t            if (names[idx] in obj) {\n\t                result[names[idx]] = obj[names[idx]];\n\t            }\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Similar to `pick` except that this one includes a `key: undefined` pair for\n\t     * properties that don't exist.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig [k] -> {k: v} -> {k: v}\n\t     * @param {Array} names an array of String property names to copy onto a new object\n\t     * @param {Object} obj The object to copy from\n\t     * @return {Object} A new object with only properties from `names` on it.\n\t     * @see R.pick\n\t     * @example\n\t     *\n\t     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n\t     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n\t     */\n\t    var pickAll = _curry2(function pickAll(names, obj) {\n\t        var result = {};\n\t        var idx = 0;\n\t        var len = names.length;\n\t        while (idx < len) {\n\t            var name = names[idx];\n\t            result[name] = obj[name];\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns a partial copy of an object containing only the keys that satisfy\n\t     * the supplied predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Object\n\t     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n\t     * @param {Function} pred A predicate to determine whether or not a key\n\t     *        should be included on the output object.\n\t     * @param {Object} obj The object to copy from\n\t     * @return {Object} A new object with only properties that satisfy `pred`\n\t     *         on it.\n\t     * @see R.pick, R.filter\n\t     * @example\n\t     *\n\t     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n\t     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n\t     */\n\t    var pickBy = _curry2(function pickBy(test, obj) {\n\t        var result = {};\n\t        for (var prop in obj) {\n\t            if (test(obj[prop], prop, obj)) {\n\t                result[prop] = obj[prop];\n\t            }\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns a new list with the given element at the front, followed by the\n\t     * contents of the list.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig a -> [a] -> [a]\n\t     * @param {*} el The item to add to the head of the output list.\n\t     * @param {Array} list The array to add to the tail of the output list.\n\t     * @return {Array} A new array.\n\t     * @see R.append\n\t     * @example\n\t     *\n\t     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n\t     */\n\t    var prepend = _curry2(function prepend(el, list) {\n\t        return _concat([el], list);\n\t    });\n\t\n\t    /**\n\t     * Returns a function that when supplied an object returns the indicated\n\t     * property of that object, if it exists.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig s -> {s: a} -> a | Undefined\n\t     * @param {String} p The property name\n\t     * @param {Object} obj The object to query\n\t     * @return {*} The value at `obj.p`.\n\t     * @example\n\t     *\n\t     *      R.prop('x', {x: 100}); //=> 100\n\t     *      R.prop('x', {}); //=> undefined\n\t     */\n\t    var prop = _curry2(function prop(p, obj) {\n\t        return obj[p];\n\t    });\n\t\n\t    /**\n\t     * If the given, non-null object has an own property with the specified name,\n\t     * returns the value of that property. Otherwise returns the provided default\n\t     * value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.6.0\n\t     * @category Object\n\t     * @sig a -> String -> Object -> a\n\t     * @param {*} val The default value.\n\t     * @param {String} p The name of the property to return.\n\t     * @param {Object} obj The object to query.\n\t     * @return {*} The value of given property of the supplied object or the default value.\n\t     * @example\n\t     *\n\t     *      var alice = {\n\t     *        name: 'ALICE',\n\t     *        age: 101\n\t     *      };\n\t     *      var favorite = R.prop('favoriteLibrary');\n\t     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n\t     *\n\t     *      favorite(alice);  //=> undefined\n\t     *      favoriteWithDefault(alice);  //=> 'Ramda'\n\t     */\n\t    var propOr = _curry3(function propOr(val, p, obj) {\n\t        return obj != null && _has(p, obj) ? obj[p] : val;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the specified object property satisfies the given\n\t     * predicate; `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Logic\n\t     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n\t     * @param {Function} pred\n\t     * @param {String} name\n\t     * @param {*} obj\n\t     * @return {Boolean}\n\t     * @see R.propEq, R.propIs\n\t     * @example\n\t     *\n\t     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n\t     */\n\t    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n\t        return pred(obj[name]);\n\t    });\n\t\n\t    /**\n\t     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n\t     * order.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig [k] -> {k: v} -> [v]\n\t     * @param {Array} ps The property names to fetch\n\t     * @param {Object} obj The object to query\n\t     * @return {Array} The corresponding values or partially applied function.\n\t     * @example\n\t     *\n\t     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n\t     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n\t     *\n\t     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n\t     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n\t     */\n\t    var props = _curry2(function props(ps, obj) {\n\t        var len = ps.length;\n\t        var out = [];\n\t        var idx = 0;\n\t        while (idx < len) {\n\t            out[idx] = obj[ps[idx]];\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Number -> Number -> [Number]\n\t     * @param {Number} from The first number in the list.\n\t     * @param {Number} to One more than the last number in the list.\n\t     * @return {Array} The list of numbers in tthe set `[a, b)`.\n\t     * @example\n\t     *\n\t     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n\t     *      R.range(50, 53);  //=> [50, 51, 52]\n\t     */\n\t    var range = _curry2(function range(from, to) {\n\t        if (!(_isNumber(from) && _isNumber(to))) {\n\t            throw new TypeError('Both arguments to range must be numbers');\n\t        }\n\t        var result = [];\n\t        var n = from;\n\t        while (n < to) {\n\t            result.push(n);\n\t            n += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns a single item by iterating through the list, successively calling\n\t     * the iterator function and passing it an accumulator value and the current\n\t     * value from the array, and then passing the result to the next call.\n\t     *\n\t     * Similar to `reduce`, except moves through the input list from the right to\n\t     * the left.\n\t     *\n\t     * The iterator function receives two values: *(acc, value)*\n\t     *\n\t     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n\t     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n\t     * on this behavior, see:\n\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a,b -> a) -> a -> [b] -> a\n\t     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n\t     *        current element from the array.\n\t     * @param {*} acc The accumulator value.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {*} The final, accumulated value.\n\t     * @see R.addIndex\n\t     * @example\n\t     *\n\t     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n\t     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n\t     *\n\t     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n\t     */\n\t    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n\t        var idx = list.length - 1;\n\t        while (idx >= 0) {\n\t            acc = fn(acc, list[idx]);\n\t            idx -= 1;\n\t        }\n\t        return acc;\n\t    });\n\t\n\t    /**\n\t     * Returns a value wrapped to indicate that it is the final value of the reduce\n\t     * and transduce functions. The returned value should be considered a black\n\t     * box: the internal structure is not guaranteed to be stable.\n\t     *\n\t     * Note: this optimization is unavailable to functions not explicitly listed\n\t     * above. For instance, it is not currently supported by reduceRight.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.15.0\n\t     * @category List\n\t     * @sig a -> *\n\t     * @param {*} x The final value of the reduce.\n\t     * @return {*} The wrapped value.\n\t     * @see R.reduce, R.transduce\n\t     * @example\n\t     *\n\t     *      R.reduce(\n\t     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n\t     *        0,\n\t     *        [1, 2, 3, 4, 5]) // 10\n\t     */\n\t    var reduced = _curry1(_reduced);\n\t\n\t    /**\n\t     * Removes the sub-list of `list` starting at index `start` and containing\n\t     * `count` elements. _Note that this is not destructive_: it returns a copy of\n\t     * the list with the changes.\n\t     * <small>No lists have been harmed in the application of this function.</small>\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.2\n\t     * @category List\n\t     * @sig Number -> Number -> [a] -> [a]\n\t     * @param {Number} start The position to start removing elements\n\t     * @param {Number} count The number of elements to remove\n\t     * @param {Array} list The list to remove from\n\t     * @return {Array} A new Array with `count` elements from `start` removed.\n\t     * @example\n\t     *\n\t     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n\t     */\n\t    var remove = _curry3(function remove(start, count, list) {\n\t        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n\t    });\n\t\n\t    /**\n\t     * Replace a substring or regex match in a string with a replacement.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category String\n\t     * @sig RegExp|String -> String -> String -> String\n\t     * @param {RegExp|String} pattern A regular expression or a substring to match.\n\t     * @param {String} replacement The string to replace the matches with.\n\t     * @param {String} str The String to do the search and replacement in.\n\t     * @return {String} The result.\n\t     * @example\n\t     *\n\t     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n\t     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n\t     *\n\t     *      // Use the \"g\" (global) flag to replace all occurrences:\n\t     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n\t     */\n\t    var replace = _curry3(function replace(regex, replacement, str) {\n\t        return str.replace(regex, replacement);\n\t    });\n\t\n\t    /**\n\t     * Returns a new list or string with the elements or characters in reverse\n\t     * order.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [a]\n\t     * @sig String -> String\n\t     * @param {Array|String} list\n\t     * @return {Array|String}\n\t     * @example\n\t     *\n\t     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n\t     *      R.reverse([1, 2]);     //=> [2, 1]\n\t     *      R.reverse([1]);        //=> [1]\n\t     *      R.reverse([]);         //=> []\n\t     *\n\t     *      R.reverse('abc');      //=> 'cba'\n\t     *      R.reverse('ab');       //=> 'ba'\n\t     *      R.reverse('a');        //=> 'a'\n\t     *      R.reverse('');         //=> ''\n\t     */\n\t    var reverse = _curry1(function reverse(list) {\n\t        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n\t    });\n\t\n\t    /**\n\t     * Scan is similar to reduce, but returns a list of successively reduced values\n\t     * from the left\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category List\n\t     * @sig (a,b -> a) -> a -> [b] -> [a]\n\t     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n\t     *        current element from the array\n\t     * @param {*} acc The accumulator value.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {Array} A list of all intermediately reduced values.\n\t     * @example\n\t     *\n\t     *      var numbers = [1, 2, 3, 4];\n\t     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n\t     */\n\t    var scan = _curry3(function scan(fn, acc, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        var result = [acc];\n\t        while (idx < len) {\n\t            acc = fn(acc, list[idx]);\n\t            result[idx + 1] = acc;\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns the result of \"setting\" the portion of the given data structure\n\t     * focused by the given lens to the given value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig Lens s a -> a -> s -> s\n\t     * @param {Lens} lens\n\t     * @param {*} v\n\t     * @param {*} x\n\t     * @return {*}\n\t     * @see R.prop, R.lensIndex, R.lensProp\n\t     * @example\n\t     *\n\t     *      var xLens = R.lensProp('x');\n\t     *\n\t     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n\t     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n\t     */\n\t    var set = _curry3(function set(lens, v, x) {\n\t        return over(lens, always(v), x);\n\t    });\n\t\n\t    /**\n\t     * Returns the elements of the given list or string (or object with a `slice`\n\t     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n\t     *\n\t     * Dispatches to the `slice` method of the third argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.4\n\t     * @category List\n\t     * @sig Number -> Number -> [a] -> [a]\n\t     * @sig Number -> Number -> String -> String\n\t     * @param {Number} fromIndex The start index (inclusive).\n\t     * @param {Number} toIndex The end index (exclusive).\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @example\n\t     *\n\t     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n\t     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n\t     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n\t     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n\t     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n\t     */\n\t    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n\t        return Array.prototype.slice.call(list, fromIndex, toIndex);\n\t    }));\n\t\n\t    /**\n\t     * Returns a copy of the list, sorted according to the comparator function,\n\t     * which should accept two values at a time and return a negative number if the\n\t     * first value is smaller, a positive number if it's larger, and zero if they\n\t     * are equal. Please note that this is a **copy** of the list. It does not\n\t     * modify the original.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a,a -> Number) -> [a] -> [a]\n\t     * @param {Function} comparator A sorting function :: a -> b -> Int\n\t     * @param {Array} list The list to sort\n\t     * @return {Array} a new array with its elements sorted by the comparator function.\n\t     * @example\n\t     *\n\t     *      var diff = function(a, b) { return a - b; };\n\t     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n\t     */\n\t    var sort = _curry2(function sort(comparator, list) {\n\t        return _slice(list).sort(comparator);\n\t    });\n\t\n\t    /**\n\t     * Sorts the list according to the supplied function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig Ord b => (a -> b) -> [a] -> [a]\n\t     * @param {Function} fn\n\t     * @param {Array} list The list to sort.\n\t     * @return {Array} A new list sorted by the keys generated by `fn`.\n\t     * @example\n\t     *\n\t     *      var sortByFirstItem = R.sortBy(R.prop(0));\n\t     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n\t     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n\t     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n\t     *      var alice = {\n\t     *        name: 'ALICE',\n\t     *        age: 101\n\t     *      };\n\t     *      var bob = {\n\t     *        name: 'Bob',\n\t     *        age: -10\n\t     *      };\n\t     *      var clara = {\n\t     *        name: 'clara',\n\t     *        age: 314.159\n\t     *      };\n\t     *      var people = [clara, bob, alice];\n\t     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n\t     */\n\t    var sortBy = _curry2(function sortBy(fn, list) {\n\t        return _slice(list).sort(function (a, b) {\n\t            var aa = fn(a);\n\t            var bb = fn(b);\n\t            return aa < bb ? -1 : aa > bb ? 1 : 0;\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Splits a given list or string at a given index.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [[a], [a]]\n\t     * @sig Number -> String -> [String, String]\n\t     * @param {Number} index The index where the array/string is split.\n\t     * @param {Array|String} array The array/string to be split.\n\t     * @return {Array}\n\t     * @example\n\t     *\n\t     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n\t     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n\t     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n\t     */\n\t    var splitAt = _curry2(function splitAt(index, array) {\n\t        return [\n\t            slice(0, index, array),\n\t            slice(index, length(array), array)\n\t        ];\n\t    });\n\t\n\t    /**\n\t     * Splits a collection into slices of the specified length.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [[a]]\n\t     * @sig Number -> String -> [String]\n\t     * @param {Number} n\n\t     * @param {Array} list\n\t     * @return {Array}\n\t     * @example\n\t     *\n\t     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n\t     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n\t     */\n\t    var splitEvery = _curry2(function splitEvery(n, list) {\n\t        if (n <= 0) {\n\t            throw new Error('First argument to splitEvery must be a positive integer');\n\t        }\n\t        var result = [];\n\t        var idx = 0;\n\t        while (idx < list.length) {\n\t            result.push(slice(idx, idx += n, list));\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Takes a list and a predicate and returns a pair of lists with the following properties:\n\t     *\n\t     *  - the result of concatenating the two output lists is equivalent to the input list;\n\t     *  - none of the elements of the first output list satisfies the predicate; and\n\t     *  - if the second output list is non-empty, its first element satisfies the predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n\t     * @param {Function} pred The predicate that determines where the array is split.\n\t     * @param {Array} list The array to be split.\n\t     * @return {Array}\n\t     * @example\n\t     *\n\t     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n\t     */\n\t    var splitWhen = _curry2(function splitWhen(pred, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        var prefix = [];\n\t        while (idx < len && !pred(list[idx])) {\n\t            prefix.push(list[idx]);\n\t            idx += 1;\n\t        }\n\t        return [\n\t            prefix,\n\t            _slice(list, idx)\n\t        ];\n\t    });\n\t\n\t    /**\n\t     * Subtracts its second argument from its first argument.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Math\n\t     * @sig Number -> Number -> Number\n\t     * @param {Number} a The first value.\n\t     * @param {Number} b The second value.\n\t     * @return {Number} The result of `a - b`.\n\t     * @see R.add\n\t     * @example\n\t     *\n\t     *      R.subtract(10, 8); //=> 2\n\t     *\n\t     *      var minus5 = R.subtract(R.__, 5);\n\t     *      minus5(17); //=> 12\n\t     *\n\t     *      var complementaryAngle = R.subtract(90);\n\t     *      complementaryAngle(30); //=> 60\n\t     *      complementaryAngle(72); //=> 18\n\t     */\n\t    var subtract = _curry2(function subtract(a, b) {\n\t        return Number(a) - Number(b);\n\t    });\n\t\n\t    /**\n\t     * Returns all but the first element of the given list or string (or object\n\t     * with a `tail` method).\n\t     *\n\t     * Dispatches to the `slice` method of the first argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [a]\n\t     * @sig String -> String\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @see R.head, R.init, R.last\n\t     * @example\n\t     *\n\t     *      R.tail([1, 2, 3]);  //=> [2, 3]\n\t     *      R.tail([1, 2]);     //=> [2]\n\t     *      R.tail([1]);        //=> []\n\t     *      R.tail([]);         //=> []\n\t     *\n\t     *      R.tail('abc');  //=> 'bc'\n\t     *      R.tail('ab');   //=> 'b'\n\t     *      R.tail('a');    //=> ''\n\t     *      R.tail('');     //=> ''\n\t     */\n\t    var tail = _checkForMethod('tail', slice(1, Infinity));\n\t\n\t    /**\n\t     * Returns the first `n` elements of the given list, string, or\n\t     * transducer/transformer (or object with a `take` method).\n\t     *\n\t     * Dispatches to the `take` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [a]\n\t     * @sig Number -> String -> String\n\t     * @param {Number} n\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @see R.drop\n\t     * @example\n\t     *\n\t     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n\t     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n\t     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n\t     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n\t     *      R.take(3, 'ramda');               //=> 'ram'\n\t     *\n\t     *      var personnel = [\n\t     *        'Dave Brubeck',\n\t     *        'Paul Desmond',\n\t     *        'Eugene Wright',\n\t     *        'Joe Morello',\n\t     *        'Gerry Mulligan',\n\t     *        'Bob Bates',\n\t     *        'Joe Dodge',\n\t     *        'Ron Crotty'\n\t     *      ];\n\t     *\n\t     *      var takeFive = R.take(5);\n\t     *      takeFive(personnel);\n\t     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n\t     */\n\t    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n\t        return slice(0, n < 0 ? Infinity : n, xs);\n\t    }));\n\t\n\t    /**\n\t     * Returns a new list containing the last `n` elements of a given list, passing\n\t     * each value to the supplied predicate function, and terminating when the\n\t     * predicate function returns `false`. Excludes the element that caused the\n\t     * predicate function to fail. The predicate function is passed one argument:\n\t     * *(value)*.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> [a]\n\t     * @param {Function} fn The function called per iteration.\n\t     * @param {Array} list The collection to iterate over.\n\t     * @return {Array} A new array.\n\t     * @see R.dropLastWhile, R.addIndex\n\t     * @example\n\t     *\n\t     *      var isNotOne = x => x !== 1;\n\t     *\n\t     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n\t     */\n\t    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n\t        var idx = list.length - 1;\n\t        while (idx >= 0 && fn(list[idx])) {\n\t            idx -= 1;\n\t        }\n\t        return _slice(list, idx + 1, Infinity);\n\t    });\n\t\n\t    /**\n\t     * Returns a new list containing the first `n` elements of a given list,\n\t     * passing each value to the supplied predicate function, and terminating when\n\t     * the predicate function returns `false`. Excludes the element that caused the\n\t     * predicate function to fail. The predicate function is passed one argument:\n\t     * *(value)*.\n\t     *\n\t     * Dispatches to the `takeWhile` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> [a]\n\t     * @param {Function} fn The function called per iteration.\n\t     * @param {Array} list The collection to iterate over.\n\t     * @return {Array} A new array.\n\t     * @see R.dropWhile, R.transduce, R.addIndex\n\t     * @example\n\t     *\n\t     *      var isNotFour = x => x !== 4;\n\t     *\n\t     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n\t     */\n\t    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        while (idx < len && fn(list[idx])) {\n\t            idx += 1;\n\t        }\n\t        return _slice(list, 0, idx);\n\t    }));\n\t\n\t    /**\n\t     * Runs the given function with the supplied object, then returns the object.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (a -> *) -> a -> a\n\t     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n\t     * @param {*} x\n\t     * @return {*} `x`.\n\t     * @example\n\t     *\n\t     *      var sayX = x => console.log('x is ' + x);\n\t     *      R.tap(sayX, 100); //=> 100\n\t     *      //-> 'x is 100'\n\t     */\n\t    var tap = _curry2(function tap(fn, x) {\n\t        fn(x);\n\t        return x;\n\t    });\n\t\n\t    /**\n\t     * Calls an input function `n` times, returning an array containing the results\n\t     * of those function calls.\n\t     *\n\t     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n\t     * and is gradually incremented to `n - 1`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.3\n\t     * @category List\n\t     * @sig (Number -> a) -> Number -> [a]\n\t     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n\t     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n\t     * @return {Array} An array containing the return values of all calls to `fn`.\n\t     * @example\n\t     *\n\t     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n\t     */\n\t    var times = _curry2(function times(fn, n) {\n\t        var len = Number(n);\n\t        var idx = 0;\n\t        var list;\n\t        if (len < 0 || isNaN(len)) {\n\t            throw new RangeError('n must be a non-negative number');\n\t        }\n\t        list = new Array(len);\n\t        while (idx < len) {\n\t            list[idx] = fn(idx);\n\t            idx += 1;\n\t        }\n\t        return list;\n\t    });\n\t\n\t    /**\n\t     * Converts an object into an array of key, value arrays. Only the object's\n\t     * own properties are used.\n\t     * Note that the order of the output array is not guaranteed to be consistent\n\t     * across different JS platforms.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.4.0\n\t     * @category Object\n\t     * @sig {String: *} -> [[String,*]]\n\t     * @param {Object} obj The object to extract from\n\t     * @return {Array} An array of key, value arrays from the object's own properties.\n\t     * @see R.fromPairs\n\t     * @example\n\t     *\n\t     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n\t     */\n\t    var toPairs = _curry1(function toPairs(obj) {\n\t        var pairs = [];\n\t        for (var prop in obj) {\n\t            if (_has(prop, obj)) {\n\t                pairs[pairs.length] = [\n\t                    prop,\n\t                    obj[prop]\n\t                ];\n\t            }\n\t        }\n\t        return pairs;\n\t    });\n\t\n\t    /**\n\t     * Converts an object into an array of key, value arrays. The object's own\n\t     * properties and prototype properties are used. Note that the order of the\n\t     * output array is not guaranteed to be consistent across different JS\n\t     * platforms.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.4.0\n\t     * @category Object\n\t     * @sig {String: *} -> [[String,*]]\n\t     * @param {Object} obj The object to extract from\n\t     * @return {Array} An array of key, value arrays from the object's own\n\t     *         and prototype properties.\n\t     * @example\n\t     *\n\t     *      var F = function() { this.x = 'X'; };\n\t     *      F.prototype.y = 'Y';\n\t     *      var f = new F();\n\t     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n\t     */\n\t    var toPairsIn = _curry1(function toPairsIn(obj) {\n\t        var pairs = [];\n\t        for (var prop in obj) {\n\t            pairs[pairs.length] = [\n\t                prop,\n\t                obj[prop]\n\t            ];\n\t        }\n\t        return pairs;\n\t    });\n\t\n\t    /**\n\t     * Transposes the rows and columns of a 2D list.\n\t     * When passed a list of `n` lists of length `x`,\n\t     * returns a list of `x` lists of length `n`.\n\t     *\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig [[a]] -> [[a]]\n\t     * @param {Array} list A 2D list\n\t     * @return {Array} A 2D list\n\t     * @example\n\t     *\n\t     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n\t     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n\t     *\n\t     * If some of the rows are shorter than the following rows, their elements are skipped:\n\t     *\n\t     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n\t     */\n\t    var transpose = _curry1(function transpose(outerlist) {\n\t        var i = 0;\n\t        var result = [];\n\t        while (i < outerlist.length) {\n\t            var innerlist = outerlist[i];\n\t            var j = 0;\n\t            while (j < innerlist.length) {\n\t                if (typeof result[j] === 'undefined') {\n\t                    result[j] = [];\n\t                }\n\t                result[j].push(innerlist[j]);\n\t                j += 1;\n\t            }\n\t            i += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Removes (strips) whitespace from both ends of the string.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.6.0\n\t     * @category String\n\t     * @sig String -> String\n\t     * @param {String} str The string to trim.\n\t     * @return {String} Trimmed version of `str`.\n\t     * @example\n\t     *\n\t     *      R.trim('   xyz  '); //=> 'xyz'\n\t     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n\t     */\n\t    var trim = function () {\n\t        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n\t        var zeroWidth = '\\u200B';\n\t        var hasProtoTrim = typeof String.prototype.trim === 'function';\n\t        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n\t            return _curry1(function trim(str) {\n\t                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n\t                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n\t                return str.replace(beginRx, '').replace(endRx, '');\n\t            });\n\t        } else {\n\t            return _curry1(function trim(str) {\n\t                return str.trim();\n\t            });\n\t        }\n\t    }();\n\t\n\t    /**\n\t     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n\t     * function evaluates the `tryer`; if it does not throw, it simply returns the\n\t     * result. If the `tryer` *does* throw, the returned function evaluates the\n\t     * `catcher` function and returns its result. Note that for effective\n\t     * composition with this function, both the `tryer` and `catcher` functions\n\t     * must return the same type of results.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.20.0\n\t     * @category Function\n\t     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n\t     * @param {Function} tryer The function that may throw.\n\t     * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n\t     * @return {Function} A new function that will catch exceptions and send then to the catcher.\n\t     * @example\n\t     *\n\t     *      R.tryCatch(R.prop('x'), R.F, {x: true}); //=> true\n\t     *      R.tryCatch(R.prop('x'), R.F, null);      //=> false\n\t     */\n\t    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n\t        return _arity(tryer.length, function () {\n\t            try {\n\t                return tryer.apply(this, arguments);\n\t            } catch (e) {\n\t                return catcher.apply(this, _concat([e], arguments));\n\t            }\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Gives a single-word string description of the (native) type of a value,\n\t     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n\t     * attempt to distinguish user Object types any further, reporting them all as\n\t     * 'Object'.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Type\n\t     * @sig (* -> {*}) -> String\n\t     * @param {*} val The value to test\n\t     * @return {String}\n\t     * @example\n\t     *\n\t     *      R.type({}); //=> \"Object\"\n\t     *      R.type(1); //=> \"Number\"\n\t     *      R.type(false); //=> \"Boolean\"\n\t     *      R.type('s'); //=> \"String\"\n\t     *      R.type(null); //=> \"Null\"\n\t     *      R.type([]); //=> \"Array\"\n\t     *      R.type(/[A-z]/); //=> \"RegExp\"\n\t     */\n\t    var type = _curry1(function type(val) {\n\t        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n\t    });\n\t\n\t    /**\n\t     * Takes a function `fn`, which takes a single array argument, and returns a\n\t     * function which:\n\t     *\n\t     *   - takes any number of positional arguments;\n\t     *   - passes these arguments to `fn` as an array; and\n\t     *   - returns the result.\n\t     *\n\t     * In other words, R.unapply derives a variadic function from a function which\n\t     * takes an array. R.unapply is the inverse of R.apply.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Function\n\t     * @sig ([*...] -> a) -> (*... -> a)\n\t     * @param {Function} fn\n\t     * @return {Function}\n\t     * @see R.apply\n\t     * @example\n\t     *\n\t     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n\t     */\n\t    var unapply = _curry1(function unapply(fn) {\n\t        return function () {\n\t            return fn(_slice(arguments));\n\t        };\n\t    });\n\t\n\t    /**\n\t     * Wraps a function of any arity (including nullary) in a function that accepts\n\t     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n\t     * supplied function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.0\n\t     * @category Function\n\t     * @sig (* -> b) -> (a -> b)\n\t     * @param {Function} fn The function to wrap.\n\t     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n\t     *         arity 1.\n\t     * @example\n\t     *\n\t     *      var takesTwoArgs = function(a, b) {\n\t     *        return [a, b];\n\t     *      };\n\t     *      takesTwoArgs.length; //=> 2\n\t     *      takesTwoArgs(1, 2); //=> [1, 2]\n\t     *\n\t     *      var takesOneArg = R.unary(takesTwoArgs);\n\t     *      takesOneArg.length; //=> 1\n\t     *      // Only 1 argument is passed to the wrapped function\n\t     *      takesOneArg(1, 2); //=> [1, undefined]\n\t     */\n\t    var unary = _curry1(function unary(fn) {\n\t        return nAry(1, fn);\n\t    });\n\t\n\t    /**\n\t     * Returns a function of arity `n` from a (manually) curried function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category Function\n\t     * @sig Number -> (a -> b) -> (a -> c)\n\t     * @param {Number} length The arity for the returned function.\n\t     * @param {Function} fn The function to uncurry.\n\t     * @return {Function} A new function.\n\t     * @see R.curry\n\t     * @example\n\t     *\n\t     *      var addFour = a => b => c => d => a + b + c + d;\n\t     *\n\t     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n\t     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n\t     */\n\t    var uncurryN = _curry2(function uncurryN(depth, fn) {\n\t        return curryN(depth, function () {\n\t            var currentDepth = 1;\n\t            var value = fn;\n\t            var idx = 0;\n\t            var endIdx;\n\t            while (currentDepth <= depth && typeof value === 'function') {\n\t                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n\t                value = value.apply(this, _slice(arguments, idx, endIdx));\n\t                currentDepth += 1;\n\t                idx = endIdx;\n\t            }\n\t            return value;\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Builds a list from a seed value. Accepts an iterator function, which returns\n\t     * either false to stop iteration or an array of length 2 containing the value\n\t     * to add to the resulting list and the seed to be used in the next call to the\n\t     * iterator function.\n\t     *\n\t     * The iterator function receives one argument: *(seed)*.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category List\n\t     * @sig (a -> [b]) -> * -> [b]\n\t     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n\t     *        either false to quit iteration or an array of length two to proceed. The element\n\t     *        at index 0 of this array will be added to the resulting array, and the element\n\t     *        at index 1 will be passed to the next call to `fn`.\n\t     * @param {*} seed The seed value.\n\t     * @return {Array} The final list.\n\t     * @example\n\t     *\n\t     *      var f = n => n > 50 ? false : [-n, n + 10];\n\t     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n\t     */\n\t    var unfold = _curry2(function unfold(fn, seed) {\n\t        var pair = fn(seed);\n\t        var result = [];\n\t        while (pair && pair.length) {\n\t            result[result.length] = pair[0];\n\t            pair = fn(pair[1]);\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns a new list containing only one copy of each element in the original\n\t     * list, based upon the value returned by applying the supplied predicate to\n\t     * two list elements. Prefers the first item if two items compare equal based\n\t     * on the predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.0\n\t     * @category List\n\t     * @sig (a, a -> Boolean) -> [a] -> [a]\n\t     * @param {Function} pred A predicate used to test whether two items are equal.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} The list of unique items.\n\t     * @example\n\t     *\n\t     *      var strEq = R.eqBy(String);\n\t     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n\t     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n\t     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n\t     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n\t     */\n\t    var uniqWith = _curry2(function uniqWith(pred, list) {\n\t        var idx = 0;\n\t        var len = list.length;\n\t        var result = [];\n\t        var item;\n\t        while (idx < len) {\n\t            item = list[idx];\n\t            if (!_containsWith(pred, item, result)) {\n\t                result[result.length] = item;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Tests the final argument by passing it to the given predicate function. If\n\t     * the predicate is not satisfied, the function will return the result of\n\t     * calling the `whenFalseFn` function with the same argument. If the predicate\n\t     * is satisfied, the argument is returned as is.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category Logic\n\t     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n\t     * @param {Function} pred        A predicate function\n\t     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n\t     *                               to a falsy value.\n\t     * @param {*}        x           An object to test with the `pred` function and\n\t     *                               pass to `whenFalseFn` if necessary.\n\t     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n\t     * @see R.ifElse, R.when\n\t     * @example\n\t     *\n\t     *      // coerceArray :: (a|[a]) -> [a]\n\t     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n\t     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n\t     *      coerceArray(1);         //=> [1]\n\t     */\n\t    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n\t        return pred(x) ? x : whenFalseFn(x);\n\t    });\n\t\n\t    /**\n\t     * Takes a predicate, a transformation function, and an initial value,\n\t     * and returns a value of the same type as the initial value.\n\t     * It does so by applying the transformation until the predicate is satisfied,\n\t     * at which point it returns the satisfactory value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.20.0\n\t     * @category Logic\n\t     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n\t     * @param {Function} pred A predicate function\n\t     * @param {Function} fn The iterator function\n\t     * @param {*} init Initial value\n\t     * @return {*} Final value that satisfies predicate\n\t     * @example\n\t     *\n\t     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n\t     */\n\t    var until = _curry3(function until(pred, fn, init) {\n\t        var val = init;\n\t        while (!pred(val)) {\n\t            val = fn(val);\n\t        }\n\t        return val;\n\t    });\n\t\n\t    /**\n\t     * Returns a new copy of the array with the element at the provided index\n\t     * replaced with the given value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category List\n\t     * @sig Number -> a -> [a] -> [a]\n\t     * @param {Number} idx The index to update.\n\t     * @param {*} x The value to exist at the given index of the returned array.\n\t     * @param {Array|Arguments} list The source array-like object to be updated.\n\t     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n\t     * @see R.adjust\n\t     * @example\n\t     *\n\t     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n\t     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n\t     */\n\t    var update = _curry3(function update(idx, x, list) {\n\t        return adjust(always(x), idx, list);\n\t    });\n\t\n\t    /**\n\t     * Accepts a function `fn` and a list of transformer functions and returns a\n\t     * new curried function. When the new function is invoked, it calls the\n\t     * function `fn` with parameters consisting of the result of calling each\n\t     * supplied handler on successive arguments to the new function.\n\t     *\n\t     * If more arguments are passed to the returned function than transformer\n\t     * functions, those arguments are passed directly to `fn` as additional\n\t     * parameters. If you expect additional arguments that don't need to be\n\t     * transformed, although you can ignore them, it's best to pass an identity\n\t     * function so that the new function reports the correct arity.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n\t     * @param {Function} fn The function to wrap.\n\t     * @param {Array} transformers A list of transformer functions\n\t     * @return {Function} The wrapped function.\n\t     * @example\n\t     *\n\t     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n\t     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n\t     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n\t     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n\t     */\n\t    var useWith = _curry2(function useWith(fn, transformers) {\n\t        return curryN(transformers.length, function () {\n\t            var args = [];\n\t            var idx = 0;\n\t            while (idx < transformers.length) {\n\t                args.push(transformers[idx].call(this, arguments[idx]));\n\t                idx += 1;\n\t            }\n\t            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns a list of all the enumerable own properties of the supplied object.\n\t     * Note that the order of the output array is not guaranteed across different\n\t     * JS platforms.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig {k: v} -> [v]\n\t     * @param {Object} obj The object to extract values from\n\t     * @return {Array} An array of the values of the object's own properties.\n\t     * @example\n\t     *\n\t     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n\t     */\n\t    var values = _curry1(function values(obj) {\n\t        var props = keys(obj);\n\t        var len = props.length;\n\t        var vals = [];\n\t        var idx = 0;\n\t        while (idx < len) {\n\t            vals[idx] = obj[props[idx]];\n\t            idx += 1;\n\t        }\n\t        return vals;\n\t    });\n\t\n\t    /**\n\t     * Returns a list of all the properties, including prototype properties, of the\n\t     * supplied object.\n\t     * Note that the order of the output array is not guaranteed to be consistent\n\t     * across different JS platforms.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.0\n\t     * @category Object\n\t     * @sig {k: v} -> [v]\n\t     * @param {Object} obj The object to extract values from\n\t     * @return {Array} An array of the values of the object's own and prototype properties.\n\t     * @example\n\t     *\n\t     *      var F = function() { this.x = 'X'; };\n\t     *      F.prototype.y = 'Y';\n\t     *      var f = new F();\n\t     *      R.valuesIn(f); //=> ['X', 'Y']\n\t     */\n\t    var valuesIn = _curry1(function valuesIn(obj) {\n\t        var prop;\n\t        var vs = [];\n\t        for (prop in obj) {\n\t            vs[vs.length] = obj[prop];\n\t        }\n\t        return vs;\n\t    });\n\t\n\t    /**\n\t     * Returns a \"view\" of the given data structure, determined by the given lens.\n\t     * The lens's focus determines which portion of the data structure is visible.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig Lens s a -> s -> a\n\t     * @param {Lens} lens\n\t     * @param {*} x\n\t     * @return {*}\n\t     * @see R.prop, R.lensIndex, R.lensProp\n\t     * @example\n\t     *\n\t     *      var xLens = R.lensProp('x');\n\t     *\n\t     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n\t     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n\t     */\n\t    // `Const` is a functor that effectively ignores the function given to `map`.\n\t    // Using `Const` effectively ignores the setter function of the `lens`,\n\t    // leaving the value returned by the getter function unmodified.\n\t    var view = function () {\n\t        // `Const` is a functor that effectively ignores the function given to `map`.\n\t        var Const = function (x) {\n\t            return {\n\t                value: x,\n\t                map: function () {\n\t                    return this;\n\t                }\n\t            };\n\t        };\n\t        return _curry2(function view(lens, x) {\n\t            // Using `Const` effectively ignores the setter function of the `lens`,\n\t            // leaving the value returned by the getter function unmodified.\n\t            return lens(Const)(x).value;\n\t        });\n\t    }();\n\t\n\t    /**\n\t     * Tests the final argument by passing it to the given predicate function. If\n\t     * the predicate is satisfied, the function will return the result of calling\n\t     * the `whenTrueFn` function with the same argument. If the predicate is not\n\t     * satisfied, the argument is returned as is.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category Logic\n\t     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n\t     * @param {Function} pred       A predicate function\n\t     * @param {Function} whenTrueFn A function to invoke when the `condition`\n\t     *                              evaluates to a truthy value.\n\t     * @param {*}        x          An object to test with the `pred` function and\n\t     *                              pass to `whenTrueFn` if necessary.\n\t     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n\t     * @see R.ifElse, R.unless\n\t     * @example\n\t     *\n\t     *      // truncate :: String -> String\n\t     *      var truncate = R.when(\n\t     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n\t     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n\t     *      );\n\t     *      truncate('12345');         //=> '12345'\n\t     *      truncate('0123456789ABC'); //=> '0123456789…'\n\t     */\n\t    var when = _curry3(function when(pred, whenTrueFn, x) {\n\t        return pred(x) ? whenTrueFn(x) : x;\n\t    });\n\t\n\t    /**\n\t     * Takes a spec object and a test object; returns true if the test satisfies\n\t     * the spec. Each of the spec's own properties must be a predicate function.\n\t     * Each predicate is applied to the value of the corresponding property of the\n\t     * test object. `where` returns true if all the predicates return true, false\n\t     * otherwise.\n\t     *\n\t     * `where` is well suited to declaratively expressing constraints for other\n\t     * functions such as `filter` and `find`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category Object\n\t     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n\t     * @param {Object} spec\n\t     * @param {Object} testObj\n\t     * @return {Boolean}\n\t     * @example\n\t     *\n\t     *      // pred :: Object -> Boolean\n\t     *      var pred = R.where({\n\t     *        a: R.equals('foo'),\n\t     *        b: R.complement(R.equals('bar')),\n\t     *        x: R.gt(_, 10),\n\t     *        y: R.lt(_, 20)\n\t     *      });\n\t     *\n\t     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n\t     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n\t     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n\t     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n\t     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n\t     */\n\t    var where = _curry2(function where(spec, testObj) {\n\t        for (var prop in spec) {\n\t            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    });\n\t\n\t    /**\n\t     * Wrap a function inside another to allow you to make adjustments to the\n\t     * parameters, or do other processing either before the internal function is\n\t     * called or with its results.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n\t     * @param {Function} fn The function to wrap.\n\t     * @param {Function} wrapper The wrapper function.\n\t     * @return {Function} The wrapped function.\n\t     * @example\n\t     *\n\t     *      var greet = name => 'Hello ' + name;\n\t     *\n\t     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n\t     *\n\t     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n\t     *\n\t     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n\t     *        return gr(name.substring(0, 3));\n\t     *      });\n\t     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n\t     */\n\t    var wrap = _curry2(function wrap(fn, wrapper) {\n\t        return curryN(fn.length, function () {\n\t            return wrapper.apply(this, _concat([fn], arguments));\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Creates a new list out of the two supplied by creating each possible pair\n\t     * from the lists.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [b] -> [[a,b]]\n\t     * @param {Array} as The first list.\n\t     * @param {Array} bs The second list.\n\t     * @return {Array} The list made by combining each possible pair from\n\t     *         `as` and `bs` into pairs (`[a, b]`).\n\t     * @example\n\t     *\n\t     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n\t     */\n\t    // = xprodWith(prepend); (takes about 3 times as long...)\n\t    var xprod = _curry2(function xprod(a, b) {\n\t        // = xprodWith(prepend); (takes about 3 times as long...)\n\t        var idx = 0;\n\t        var ilen = a.length;\n\t        var j;\n\t        var jlen = b.length;\n\t        var result = [];\n\t        while (idx < ilen) {\n\t            j = 0;\n\t            while (j < jlen) {\n\t                result[result.length] = [\n\t                    a[idx],\n\t                    b[j]\n\t                ];\n\t                j += 1;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Creates a new list out of the two supplied by pairing up equally-positioned\n\t     * items from both lists. The returned list is truncated to the length of the\n\t     * shorter of the two input lists.\n\t     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [b] -> [[a,b]]\n\t     * @param {Array} list1 The first array to consider.\n\t     * @param {Array} list2 The second array to consider.\n\t     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n\t     * @example\n\t     *\n\t     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n\t     */\n\t    var zip = _curry2(function zip(a, b) {\n\t        var rv = [];\n\t        var idx = 0;\n\t        var len = Math.min(a.length, b.length);\n\t        while (idx < len) {\n\t            rv[idx] = [\n\t                a[idx],\n\t                b[idx]\n\t            ];\n\t            idx += 1;\n\t        }\n\t        return rv;\n\t    });\n\t\n\t    /**\n\t     * Creates a new object out of a list of keys and a list of values.\n\t     * Key/value pairing is truncated to the length of the shorter of the two lists.\n\t     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category List\n\t     * @sig [String] -> [*] -> {String: *}\n\t     * @param {Array} keys The array that will be properties on the output object.\n\t     * @param {Array} values The list of values on the output object.\n\t     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n\t     * @example\n\t     *\n\t     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n\t     */\n\t    var zipObj = _curry2(function zipObj(keys, values) {\n\t        var idx = 0;\n\t        var len = Math.min(keys.length, values.length);\n\t        var out = {};\n\t        while (idx < len) {\n\t            out[keys[idx]] = values[idx];\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Creates a new list out of the two supplied by applying the function to each\n\t     * equally-positioned pair in the lists. The returned list is truncated to the\n\t     * length of the shorter of the two input lists.\n\t     *\n\t     * @function\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n\t     * @param {Function} fn The function used to combine the two elements into one value.\n\t     * @param {Array} list1 The first array to consider.\n\t     * @param {Array} list2 The second array to consider.\n\t     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n\t     *         using `fn`.\n\t     * @example\n\t     *\n\t     *      var f = (x, y) => {\n\t     *        // ...\n\t     *      };\n\t     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n\t     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n\t     */\n\t    var zipWith = _curry3(function zipWith(fn, a, b) {\n\t        var rv = [];\n\t        var idx = 0;\n\t        var len = Math.min(a.length, b.length);\n\t        while (idx < len) {\n\t            rv[idx] = fn(a[idx], b[idx]);\n\t            idx += 1;\n\t        }\n\t        return rv;\n\t    });\n\t\n\t    /**\n\t     * A function that always returns `false`. Any passed in parameters are ignored.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Function\n\t     * @sig * -> Boolean\n\t     * @param {*}\n\t     * @return {Boolean}\n\t     * @see R.always, R.T\n\t     * @example\n\t     *\n\t     *      R.F(); //=> false\n\t     */\n\t    var F = always(false);\n\t\n\t    /**\n\t     * A function that always returns `true`. Any passed in parameters are ignored.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Function\n\t     * @sig * -> Boolean\n\t     * @param {*}\n\t     * @return {Boolean}\n\t     * @see R.always, R.F\n\t     * @example\n\t     *\n\t     *      R.T(); //=> true\n\t     */\n\t    var T = always(true);\n\t\n\t    /**\n\t     * Copies an object.\n\t     *\n\t     * @private\n\t     * @param {*} value The value to be copied\n\t     * @param {Array} refFrom Array containing the source references\n\t     * @param {Array} refTo Array containing the copied source references\n\t     * @param {Boolean} deep Whether or not to perform deep cloning.\n\t     * @return {*} The copied value.\n\t     */\n\t    var _clone = function _clone(value, refFrom, refTo, deep) {\n\t        var copy = function copy(copiedValue) {\n\t            var len = refFrom.length;\n\t            var idx = 0;\n\t            while (idx < len) {\n\t                if (value === refFrom[idx]) {\n\t                    return refTo[idx];\n\t                }\n\t                idx += 1;\n\t            }\n\t            refFrom[idx + 1] = value;\n\t            refTo[idx + 1] = copiedValue;\n\t            for (var key in value) {\n\t                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n\t            }\n\t            return copiedValue;\n\t        };\n\t        switch (type(value)) {\n\t        case 'Object':\n\t            return copy({});\n\t        case 'Array':\n\t            return copy([]);\n\t        case 'Date':\n\t            return new Date(value.valueOf());\n\t        case 'RegExp':\n\t            return _cloneRegExp(value);\n\t        default:\n\t            return value;\n\t        }\n\t    };\n\t\n\t    var _createPartialApplicator = function _createPartialApplicator(concat) {\n\t        return _curry2(function (fn, args) {\n\t            return _arity(Math.max(0, fn.length - args.length), function () {\n\t                return fn.apply(this, concat(args, arguments));\n\t            });\n\t        });\n\t    };\n\t\n\t    var _dropLast = function dropLast(n, xs) {\n\t        return take(n < xs.length ? xs.length - n : 0, xs);\n\t    };\n\t\n\t    // Values of other types are only equal if identical.\n\t    var _equals = function _equals(a, b, stackA, stackB) {\n\t        if (identical(a, b)) {\n\t            return true;\n\t        }\n\t        if (type(a) !== type(b)) {\n\t            return false;\n\t        }\n\t        if (a == null || b == null) {\n\t            return false;\n\t        }\n\t        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n\t            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n\t        }\n\t        switch (type(a)) {\n\t        case 'Arguments':\n\t        case 'Array':\n\t        case 'Object':\n\t            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n\t                return a === b;\n\t            }\n\t            break;\n\t        case 'Boolean':\n\t        case 'Number':\n\t        case 'String':\n\t            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n\t                return false;\n\t            }\n\t            break;\n\t        case 'Date':\n\t            if (!identical(a.valueOf(), b.valueOf())) {\n\t                return false;\n\t            }\n\t            break;\n\t        case 'Error':\n\t            return a.name === b.name && a.message === b.message;\n\t        case 'RegExp':\n\t            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n\t                return false;\n\t            }\n\t            break;\n\t        case 'Map':\n\t        case 'Set':\n\t            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n\t                return false;\n\t            }\n\t            break;\n\t        case 'Int8Array':\n\t        case 'Uint8Array':\n\t        case 'Uint8ClampedArray':\n\t        case 'Int16Array':\n\t        case 'Uint16Array':\n\t        case 'Int32Array':\n\t        case 'Uint32Array':\n\t        case 'Float32Array':\n\t        case 'Float64Array':\n\t            break;\n\t        case 'ArrayBuffer':\n\t            break;\n\t        default:\n\t            // Values of other types are only equal if identical.\n\t            return false;\n\t        }\n\t        var keysA = keys(a);\n\t        if (keysA.length !== keys(b).length) {\n\t            return false;\n\t        }\n\t        var idx = stackA.length - 1;\n\t        while (idx >= 0) {\n\t            if (stackA[idx] === a) {\n\t                return stackB[idx] === b;\n\t            }\n\t            idx -= 1;\n\t        }\n\t        stackA.push(a);\n\t        stackB.push(b);\n\t        idx = keysA.length - 1;\n\t        while (idx >= 0) {\n\t            var key = keysA[idx];\n\t            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n\t                return false;\n\t            }\n\t            idx -= 1;\n\t        }\n\t        stackA.pop();\n\t        stackB.pop();\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n\t     * function based on the flag passed in.\n\t     *\n\t     * @private\n\t     */\n\t    var _makeFlat = function _makeFlat(recursive) {\n\t        return function flatt(list) {\n\t            var value, jlen, j;\n\t            var result = [];\n\t            var idx = 0;\n\t            var ilen = list.length;\n\t            while (idx < ilen) {\n\t                if (isArrayLike(list[idx])) {\n\t                    value = recursive ? flatt(list[idx]) : list[idx];\n\t                    j = 0;\n\t                    jlen = value.length;\n\t                    while (j < jlen) {\n\t                        result[result.length] = value[j];\n\t                        j += 1;\n\t                    }\n\t                } else {\n\t                    result[result.length] = list[idx];\n\t                }\n\t                idx += 1;\n\t            }\n\t            return result;\n\t        };\n\t    };\n\t\n\t    var _reduce = function () {\n\t        function _arrayReduce(xf, acc, list) {\n\t            var idx = 0;\n\t            var len = list.length;\n\t            while (idx < len) {\n\t                acc = xf['@@transducer/step'](acc, list[idx]);\n\t                if (acc && acc['@@transducer/reduced']) {\n\t                    acc = acc['@@transducer/value'];\n\t                    break;\n\t                }\n\t                idx += 1;\n\t            }\n\t            return xf['@@transducer/result'](acc);\n\t        }\n\t        function _iterableReduce(xf, acc, iter) {\n\t            var step = iter.next();\n\t            while (!step.done) {\n\t                acc = xf['@@transducer/step'](acc, step.value);\n\t                if (acc && acc['@@transducer/reduced']) {\n\t                    acc = acc['@@transducer/value'];\n\t                    break;\n\t                }\n\t                step = iter.next();\n\t            }\n\t            return xf['@@transducer/result'](acc);\n\t        }\n\t        function _methodReduce(xf, acc, obj) {\n\t            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n\t        }\n\t        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n\t        return function _reduce(fn, acc, list) {\n\t            if (typeof fn === 'function') {\n\t                fn = _xwrap(fn);\n\t            }\n\t            if (isArrayLike(list)) {\n\t                return _arrayReduce(fn, acc, list);\n\t            }\n\t            if (typeof list.reduce === 'function') {\n\t                return _methodReduce(fn, acc, list);\n\t            }\n\t            if (list[symIterator] != null) {\n\t                return _iterableReduce(fn, acc, list[symIterator]());\n\t            }\n\t            if (typeof list.next === 'function') {\n\t                return _iterableReduce(fn, acc, list);\n\t            }\n\t            throw new TypeError('reduce: list must be array or iterable');\n\t        };\n\t    }();\n\t\n\t    var _stepCat = function () {\n\t        var _stepCatArray = {\n\t            '@@transducer/init': Array,\n\t            '@@transducer/step': function (xs, x) {\n\t                xs.push(x);\n\t                return xs;\n\t            },\n\t            '@@transducer/result': _identity\n\t        };\n\t        var _stepCatString = {\n\t            '@@transducer/init': String,\n\t            '@@transducer/step': function (a, b) {\n\t                return a + b;\n\t            },\n\t            '@@transducer/result': _identity\n\t        };\n\t        var _stepCatObject = {\n\t            '@@transducer/init': Object,\n\t            '@@transducer/step': function (result, input) {\n\t                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n\t            },\n\t            '@@transducer/result': _identity\n\t        };\n\t        return function _stepCat(obj) {\n\t            if (_isTransformer(obj)) {\n\t                return obj;\n\t            }\n\t            if (isArrayLike(obj)) {\n\t                return _stepCatArray;\n\t            }\n\t            if (typeof obj === 'string') {\n\t                return _stepCatString;\n\t            }\n\t            if (typeof obj === 'object') {\n\t                return _stepCatObject;\n\t            }\n\t            throw new Error('Cannot create transformer for ' + obj);\n\t        };\n\t    }();\n\t\n\t    var _xdropLastWhile = function () {\n\t        function XDropLastWhile(fn, xf) {\n\t            this.f = fn;\n\t            this.retained = [];\n\t            this.xf = xf;\n\t        }\n\t        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n\t        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n\t            this.retained = null;\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n\t            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n\t        };\n\t        XDropLastWhile.prototype.flush = function (result, input) {\n\t            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n\t            this.retained = [];\n\t            return this.xf['@@transducer/step'](result, input);\n\t        };\n\t        XDropLastWhile.prototype.retain = function (result, input) {\n\t            this.retained.push(input);\n\t            return result;\n\t        };\n\t        return _curry2(function _xdropLastWhile(fn, xf) {\n\t            return new XDropLastWhile(fn, xf);\n\t        });\n\t    }();\n\t\n\t    var _xgroupBy = function () {\n\t        function XGroupBy(f, xf) {\n\t            this.xf = xf;\n\t            this.f = f;\n\t            this.inputs = {};\n\t        }\n\t        XGroupBy.prototype['@@transducer/init'] = _xfBase.init;\n\t        XGroupBy.prototype['@@transducer/result'] = function (result) {\n\t            var key;\n\t            for (key in this.inputs) {\n\t                if (_has(key, this.inputs)) {\n\t                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n\t                    if (result['@@transducer/reduced']) {\n\t                        result = result['@@transducer/value'];\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this.inputs = null;\n\t            return this.xf['@@transducer/result'](result);\n\t        };\n\t        XGroupBy.prototype['@@transducer/step'] = function (result, input) {\n\t            var key = this.f(input);\n\t            this.inputs[key] = this.inputs[key] || [\n\t                key,\n\t                []\n\t            ];\n\t            this.inputs[key][1] = append(input, this.inputs[key][1]);\n\t            return result;\n\t        };\n\t        return _curry2(function _xgroupBy(f, xf) {\n\t            return new XGroupBy(f, xf);\n\t        });\n\t    }();\n\t\n\t    /**\n\t     * Creates a new list iteration function from an existing one by adding two new\n\t     * parameters to its callback function: the current index, and the entire list.\n\t     *\n\t     * This would turn, for instance, Ramda's simple `map` function into one that\n\t     * more closely resembles `Array.prototype.map`. Note that this will only work\n\t     * for functions in which the iteration callback function is the first\n\t     * parameter, and where the list is the last parameter. (This latter might be\n\t     * unimportant if the list parameter is not used.)\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.15.0\n\t     * @category Function\n\t     * @category List\n\t     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n\t     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n\t     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n\t     * @example\n\t     *\n\t     *      var mapIndexed = R.addIndex(R.map);\n\t     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n\t     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n\t     */\n\t    var addIndex = _curry1(function addIndex(fn) {\n\t        return curryN(fn.length, function () {\n\t            var idx = 0;\n\t            var origFn = arguments[0];\n\t            var list = arguments[arguments.length - 1];\n\t            var args = _slice(arguments);\n\t            args[0] = function () {\n\t                var result = origFn.apply(this, _concat(arguments, [\n\t                    idx,\n\t                    list\n\t                ]));\n\t                idx += 1;\n\t                return result;\n\t            };\n\t            return fn.apply(this, args);\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Wraps a function of any arity (including nullary) in a function that accepts\n\t     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n\t     * supplied function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.2.0\n\t     * @category Function\n\t     * @sig (* -> c) -> (a, b -> c)\n\t     * @param {Function} fn The function to wrap.\n\t     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n\t     *         arity 2.\n\t     * @example\n\t     *\n\t     *      var takesThreeArgs = function(a, b, c) {\n\t     *        return [a, b, c];\n\t     *      };\n\t     *      takesThreeArgs.length; //=> 3\n\t     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n\t     *\n\t     *      var takesTwoArgs = R.binary(takesThreeArgs);\n\t     *      takesTwoArgs.length; //=> 2\n\t     *      // Only 2 arguments are passed to the wrapped function\n\t     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n\t     */\n\t    var binary = _curry1(function binary(fn) {\n\t        return nAry(2, fn);\n\t    });\n\t\n\t    /**\n\t     * Creates a deep copy of the value which may contain (nested) `Array`s and\n\t     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n\t     * copied, but assigned by their reference.\n\t     *\n\t     * Dispatches to a `clone` method if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig {*} -> {*}\n\t     * @param {*} value The object or array to clone\n\t     * @return {*} A new object or array.\n\t     * @example\n\t     *\n\t     *      var objects = [{}, {}, {}];\n\t     *      var objectsClone = R.clone(objects);\n\t     *      objects[0] === objectsClone[0]; //=> false\n\t     */\n\t    var clone = _curry1(function clone(value) {\n\t        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n\t    });\n\t\n\t    /**\n\t     * Returns a curried equivalent of the provided function. The curried function\n\t     * has two unusual capabilities. First, its arguments needn't be provided one\n\t     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n\t     * following are equivalent:\n\t     *\n\t     *   - `g(1)(2)(3)`\n\t     *   - `g(1)(2, 3)`\n\t     *   - `g(1, 2)(3)`\n\t     *   - `g(1, 2, 3)`\n\t     *\n\t     * Secondly, the special placeholder value `R.__` may be used to specify\n\t     * \"gaps\", allowing partial application of any combination of arguments,\n\t     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n\t     * following are equivalent:\n\t     *\n\t     *   - `g(1, 2, 3)`\n\t     *   - `g(_, 2, 3)(1)`\n\t     *   - `g(_, _, 3)(1)(2)`\n\t     *   - `g(_, _, 3)(1, 2)`\n\t     *   - `g(_, 2)(1)(3)`\n\t     *   - `g(_, 2)(1, 3)`\n\t     *   - `g(_, 2)(_, 3)(1)`\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (* -> a) -> (* -> a)\n\t     * @param {Function} fn The function to curry.\n\t     * @return {Function} A new, curried function.\n\t     * @see R.curryN\n\t     * @example\n\t     *\n\t     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n\t     *\n\t     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n\t     *      var f = curriedAddFourNumbers(1, 2);\n\t     *      var g = f(3);\n\t     *      g(4); //=> 10\n\t     */\n\t    var curry = _curry1(function curry(fn) {\n\t        return curryN(fn.length, fn);\n\t    });\n\t\n\t    /**\n\t     * Returns all but the first `n` elements of the given list, string, or\n\t     * transducer/transformer (or object with a `drop` method).\n\t     *\n\t     * Dispatches to the `drop` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [a]\n\t     * @sig Number -> String -> String\n\t     * @param {Number} n\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @see R.take, R.transduce\n\t     * @example\n\t     *\n\t     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n\t     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n\t     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n\t     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n\t     *      R.drop(3, 'ramda');               //=> 'da'\n\t     */\n\t    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n\t        return slice(Math.max(0, n), Infinity, xs);\n\t    }));\n\t\n\t    /**\n\t     * Returns a list containing all but the last `n` elements of the given `list`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [a]\n\t     * @sig Number -> String -> String\n\t     * @param {Number} n The number of elements of `xs` to skip.\n\t     * @param {Array} xs The collection to consider.\n\t     * @return {Array}\n\t     * @see R.takeLast\n\t     * @example\n\t     *\n\t     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n\t     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n\t     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n\t     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n\t     *      R.dropLast(3, 'ramda');               //=> 'ra'\n\t     */\n\t    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\t\n\t    /**\n\t     * Returns a new list containing all but last the`n` elements of a given list,\n\t     * passing each value from the right to the supplied predicate function,\n\t     * skipping elements while the predicate function returns `true`. The predicate\n\t     * function is passed one argument: (value)*.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category List\n\t     * @sig (a -> Boolean) -> [a] -> [a]\n\t     * @param {Function} fn The function called per iteration.\n\t     * @param {Array} list The collection to iterate over.\n\t     * @return {Array} A new array.\n\t     * @see R.takeLastWhile, R.addIndex\n\t     * @example\n\t     *\n\t     *      var lteThree = x => x <= 3;\n\t     *\n\t     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n\t     */\n\t    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\t\n\t    /**\n\t     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n\t     * cyclical data structures.\n\t     *\n\t     * Dispatches symmetrically to the `equals` methods of both arguments, if\n\t     * present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.15.0\n\t     * @category Relation\n\t     * @sig a -> b -> Boolean\n\t     * @param {*} a\n\t     * @param {*} b\n\t     * @return {Boolean}\n\t     * @example\n\t     *\n\t     *      R.equals(1, 1); //=> true\n\t     *      R.equals(1, '1'); //=> false\n\t     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n\t     *\n\t     *      var a = {}; a.v = a;\n\t     *      var b = {}; b.v = b;\n\t     *      R.equals(a, b); //=> true\n\t     */\n\t    var equals = _curry2(function equals(a, b) {\n\t        return _equals(a, b, [], []);\n\t    });\n\t\n\t    /**\n\t     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n\t     * same type containing the members of the given filterable which satisfy the\n\t     * given predicate.\n\t     *\n\t     * Dispatches to the `filter` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n\t     * @param {Function} pred\n\t     * @param {Array} filterable\n\t     * @return {Array}\n\t     * @see R.reject, R.transduce, R.addIndex\n\t     * @example\n\t     *\n\t     *      var isEven = n => n % 2 === 0;\n\t     *\n\t     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n\t     *\n\t     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n\t     */\n\t    // else\n\t    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n\t        return _isObject(filterable) ? _reduce(function (acc, key) {\n\t            if (pred(filterable[key])) {\n\t                acc[key] = filterable[key];\n\t            }\n\t            return acc;\n\t        }, {}, keys(filterable)) : // else\n\t        _filter(pred, filterable);\n\t    }));\n\t\n\t    /**\n\t     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n\t     * and putting them in a new array, depth-first.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [b]\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} The flattened list.\n\t     * @see R.unnest\n\t     * @example\n\t     *\n\t     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n\t     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t     */\n\t    var flatten = _curry1(_makeFlat(true));\n\t\n\t    /**\n\t     * Returns a new function much like the supplied one, except that the first two\n\t     * arguments' order is reversed.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n\t     * @param {Function} fn The function to invoke with its first two parameters reversed.\n\t     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n\t     * @example\n\t     *\n\t     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n\t     *\n\t     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n\t     *\n\t     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n\t     */\n\t    var flip = _curry1(function flip(fn) {\n\t        return curry(function (a, b) {\n\t            var args = _slice(arguments);\n\t            args[0] = b;\n\t            args[1] = a;\n\t            return fn.apply(this, args);\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Splits a list into sub-lists stored in an object, based on the result of\n\t     * calling a String-returning function on each element, and grouping the\n\t     * results according to values returned.\n\t     *\n\t     * Dispatches to the `groupBy` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig (a -> String) -> [a] -> {String: [a]}\n\t     * @param {Function} fn Function :: a -> String\n\t     * @param {Array} list The array to group\n\t     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n\t     *         that produced that key when passed to `fn`.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      var byGrade = R.groupBy(function(student) {\n\t     *        var score = student.score;\n\t     *        return score < 65 ? 'F' :\n\t     *               score < 70 ? 'D' :\n\t     *               score < 80 ? 'C' :\n\t     *               score < 90 ? 'B' : 'A';\n\t     *      });\n\t     *      var students = [{name: 'Abby', score: 84},\n\t     *                      {name: 'Eddy', score: 58},\n\t     *                      // ...\n\t     *                      {name: 'Jack', score: 69}];\n\t     *      byGrade(students);\n\t     *      // {\n\t     *      //   'A': [{name: 'Dianne', score: 99}],\n\t     *      //   'B': [{name: 'Abby', score: 84}]\n\t     *      //   // ...,\n\t     *      //   'F': [{name: 'Eddy', score: 58}]\n\t     *      // }\n\t     */\n\t    var groupBy = _curry2(_dispatchable('groupBy', _xgroupBy, function groupBy(fn, list) {\n\t        return _reduce(function (acc, elt) {\n\t            var key = fn(elt);\n\t            acc[key] = append(elt, acc[key] || (acc[key] = []));\n\t            return acc;\n\t        }, {}, list);\n\t    }));\n\t\n\t    /**\n\t     * Returns the first element of the given list or string. In some libraries\n\t     * this function is named `first`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> a | Undefined\n\t     * @sig String -> String\n\t     * @param {Array|String} list\n\t     * @return {*}\n\t     * @see R.tail, R.init, R.last\n\t     * @example\n\t     *\n\t     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n\t     *      R.head([]); //=> undefined\n\t     *\n\t     *      R.head('abc'); //=> 'a'\n\t     *      R.head(''); //=> ''\n\t     */\n\t    var head = nth(0);\n\t\n\t    /**\n\t     * Given a function that generates a key, turns a list of objects into an\n\t     * object indexing the objects by the given key. Note that if multiple\n\t     * objects generate the same value for the indexing key only the last value\n\t     * will be included in the generated object.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n\t     * @param {Function} fn Function :: a -> String\n\t     * @param {Array} array The array of objects to index\n\t     * @return {Object} An object indexing each array element by the given property.\n\t     * @example\n\t     *\n\t     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n\t     *      R.indexBy(R.prop('id'), list);\n\t     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n\t     */\n\t    var indexBy = _curry2(function indexBy(fn, list) {\n\t        return _reduce(function (acc, elem) {\n\t            var key = fn(elem);\n\t            acc[key] = elem;\n\t            return acc;\n\t        }, {}, list);\n\t    });\n\t\n\t    /**\n\t     * Returns all but the last element of the given list or string.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category List\n\t     * @sig [a] -> [a]\n\t     * @sig String -> String\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @see R.last, R.head, R.tail\n\t     * @example\n\t     *\n\t     *      R.init([1, 2, 3]);  //=> [1, 2]\n\t     *      R.init([1, 2]);     //=> [1]\n\t     *      R.init([1]);        //=> []\n\t     *      R.init([]);         //=> []\n\t     *\n\t     *      R.init('abc');  //=> 'ab'\n\t     *      R.init('ab');   //=> 'a'\n\t     *      R.init('a');    //=> ''\n\t     *      R.init('');     //=> ''\n\t     */\n\t    var init = slice(0, -1);\n\t\n\t    /**\n\t     * Combines two lists into a set (i.e. no duplicates) composed of those\n\t     * elements common to both lists. Duplication is determined according to the\n\t     * value returned by applying the supplied predicate to two list elements.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n\t     * @param {Function} pred A predicate function that determines whether\n\t     *        the two supplied elements are equal.\n\t     * @param {Array} list1 One list of items to compare\n\t     * @param {Array} list2 A second list of items to compare\n\t     * @return {Array} A new list containing those elements common to both lists.\n\t     * @see R.intersection\n\t     * @example\n\t     *\n\t     *      var buffaloSpringfield = [\n\t     *        {id: 824, name: 'Richie Furay'},\n\t     *        {id: 956, name: 'Dewey Martin'},\n\t     *        {id: 313, name: 'Bruce Palmer'},\n\t     *        {id: 456, name: 'Stephen Stills'},\n\t     *        {id: 177, name: 'Neil Young'}\n\t     *      ];\n\t     *      var csny = [\n\t     *        {id: 204, name: 'David Crosby'},\n\t     *        {id: 456, name: 'Stephen Stills'},\n\t     *        {id: 539, name: 'Graham Nash'},\n\t     *        {id: 177, name: 'Neil Young'}\n\t     *      ];\n\t     *\n\t     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n\t     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n\t     */\n\t    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n\t        var lookupList, filteredList;\n\t        if (list1.length > list2.length) {\n\t            lookupList = list1;\n\t            filteredList = list2;\n\t        } else {\n\t            lookupList = list2;\n\t            filteredList = list1;\n\t        }\n\t        var results = [];\n\t        var idx = 0;\n\t        while (idx < filteredList.length) {\n\t            if (_containsWith(pred, filteredList[idx], lookupList)) {\n\t                results[results.length] = filteredList[idx];\n\t            }\n\t            idx += 1;\n\t        }\n\t        return uniqWith(pred, results);\n\t    });\n\t\n\t    /**\n\t     * Transforms the items of the list with the transducer and appends the\n\t     * transformed items to the accumulator using an appropriate iterator function\n\t     * based on the accumulator type.\n\t     *\n\t     * The accumulator can be an array, string, object or a transformer. Iterated\n\t     * items will be appended to arrays and concatenated to strings. Objects will\n\t     * be merged directly or 2-item arrays will be merged as key, value pairs.\n\t     *\n\t     * The accumulator can also be a transformer object that provides a 2-arity\n\t     * reducing iterator function, step, 0-arity initial value function, init, and\n\t     * 1-arity result extraction function result. The step function is used as the\n\t     * iterator function in reduce. The result function is used to convert the\n\t     * final accumulator into the return type and in most cases is R.identity. The\n\t     * init function is used to provide the initial accumulator.\n\t     *\n\t     * The iteration is performed with R.reduce after initializing the transducer.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category List\n\t     * @sig a -> (b -> b) -> [c] -> a\n\t     * @param {*} acc The initial accumulator value.\n\t     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {*} The final, accumulated value.\n\t     * @example\n\t     *\n\t     *      var numbers = [1, 2, 3, 4];\n\t     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n\t     *\n\t     *      R.into([], transducer, numbers); //=> [2, 3]\n\t     *\n\t     *      var intoArray = R.into([]);\n\t     *      intoArray(transducer, numbers); //=> [2, 3]\n\t     */\n\t    var into = _curry3(function into(acc, xf, list) {\n\t        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n\t    });\n\t\n\t    /**\n\t     * Same as R.invertObj, however this accounts for objects with duplicate values\n\t     * by putting the values into an array.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Object\n\t     * @sig {s: x} -> {x: [ s, ... ]}\n\t     * @param {Object} obj The object or array to invert\n\t     * @return {Object} out A new object with keys\n\t     * in an array.\n\t     * @example\n\t     *\n\t     *      var raceResultsByFirstName = {\n\t     *        first: 'alice',\n\t     *        second: 'jake',\n\t     *        third: 'alice',\n\t     *      };\n\t     *      R.invert(raceResultsByFirstName);\n\t     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n\t     */\n\t    var invert = _curry1(function invert(obj) {\n\t        var props = keys(obj);\n\t        var len = props.length;\n\t        var idx = 0;\n\t        var out = {};\n\t        while (idx < len) {\n\t            var key = props[idx];\n\t            var val = obj[key];\n\t            var list = _has(val, out) ? out[val] : out[val] = [];\n\t            list[list.length] = key;\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Returns a new object with the keys of the given object as values, and the\n\t     * values of the given object, which are coerced to strings, as keys. Note\n\t     * that the last key found is preferred when handling the same value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Object\n\t     * @sig {s: x} -> {x: s}\n\t     * @param {Object} obj The object or array to invert\n\t     * @return {Object} out A new object\n\t     * @example\n\t     *\n\t     *      var raceResults = {\n\t     *        first: 'alice',\n\t     *        second: 'jake'\n\t     *      };\n\t     *      R.invertObj(raceResults);\n\t     *      //=> { 'alice': 'first', 'jake':'second' }\n\t     *\n\t     *      // Alternatively:\n\t     *      var raceResults = ['alice', 'jake'];\n\t     *      R.invertObj(raceResults);\n\t     *      //=> { 'alice': '0', 'jake':'1' }\n\t     */\n\t    var invertObj = _curry1(function invertObj(obj) {\n\t        var props = keys(obj);\n\t        var len = props.length;\n\t        var idx = 0;\n\t        var out = {};\n\t        while (idx < len) {\n\t            var key = props[idx];\n\t            out[obj[key]] = key;\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the given value is its type's empty value; `false`\n\t     * otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Logic\n\t     * @sig a -> Boolean\n\t     * @param {*} x\n\t     * @return {Boolean}\n\t     * @see R.empty\n\t     * @example\n\t     *\n\t     *      R.isEmpty([1, 2, 3]);   //=> false\n\t     *      R.isEmpty([]);          //=> true\n\t     *      R.isEmpty('');          //=> true\n\t     *      R.isEmpty(null);        //=> false\n\t     *      R.isEmpty({});          //=> true\n\t     *      R.isEmpty({length: 0}); //=> false\n\t     */\n\t    var isEmpty = _curry1(function isEmpty(x) {\n\t        return x != null && equals(x, empty(x));\n\t    });\n\t\n\t    /**\n\t     * Returns the last element of the given list or string.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.4\n\t     * @category List\n\t     * @sig [a] -> a | Undefined\n\t     * @sig String -> String\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @see R.init, R.head, R.tail\n\t     * @example\n\t     *\n\t     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n\t     *      R.last([]); //=> undefined\n\t     *\n\t     *      R.last('abc'); //=> 'c'\n\t     *      R.last(''); //=> ''\n\t     */\n\t    var last = nth(-1);\n\t\n\t    /**\n\t     * Returns the position of the last occurrence of an item in an array, or -1 if\n\t     * the item is not included in the array. `R.equals` is used to determine\n\t     * equality.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig a -> [a] -> Number\n\t     * @param {*} target The item to find.\n\t     * @param {Array} xs The array to search in.\n\t     * @return {Number} the index of the target, or -1 if the target is not found.\n\t     * @see R.indexOf\n\t     * @example\n\t     *\n\t     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n\t     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n\t     */\n\t    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n\t        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n\t            return xs.lastIndexOf(target);\n\t        } else {\n\t            var idx = xs.length - 1;\n\t            while (idx >= 0) {\n\t                if (equals(xs[idx], target)) {\n\t                    return idx;\n\t                }\n\t                idx -= 1;\n\t            }\n\t            return -1;\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Takes a function and\n\t     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n\t     * applies the function to each of the functor's values, and returns\n\t     * a functor of the same shape.\n\t     *\n\t     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n\t     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n\t     *\n\t     * Dispatches to the `map` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * Also treats functions as functors and will compose them together.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Functor f => (a -> b) -> f a -> f b\n\t     * @param {Function} fn The function to be called on every element of the input `list`.\n\t     * @param {Array} list The list to be iterated over.\n\t     * @return {Array} The new list.\n\t     * @see R.transduce, R.addIndex\n\t     * @example\n\t     *\n\t     *      var double = x => x * 2;\n\t     *\n\t     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n\t     *\n\t     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n\t     */\n\t    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n\t        switch (Object.prototype.toString.call(functor)) {\n\t        case '[object Function]':\n\t            return curryN(functor.length, function () {\n\t                return fn.call(this, functor.apply(this, arguments));\n\t            });\n\t        case '[object Object]':\n\t            return _reduce(function (acc, key) {\n\t                acc[key] = fn(functor[key]);\n\t                return acc;\n\t            }, {}, keys(functor));\n\t        default:\n\t            return _map(fn, functor);\n\t        }\n\t    }));\n\t\n\t    /**\n\t     * An Object-specific version of `map`. The function is applied to three\n\t     * arguments: *(value, key, obj)*. If only the value is significant, use\n\t     * `map` instead.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Object\n\t     * @sig ((*, String, Object) -> *) -> Object -> Object\n\t     * @param {Function} fn\n\t     * @param {Object} obj\n\t     * @return {Object}\n\t     * @see R.map\n\t     * @example\n\t     *\n\t     *      var values = { x: 1, y: 2, z: 3 };\n\t     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n\t     *\n\t     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n\t     */\n\t    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n\t        return _reduce(function (acc, key) {\n\t            acc[key] = fn(obj[key], key, obj);\n\t            return acc;\n\t        }, {}, keys(obj));\n\t    });\n\t\n\t    /**\n\t     * Creates a new object with the own properties of the two provided objects. If\n\t     * a key exists in both objects, the provided function is applied to the values\n\t     * associated with the key in each object, with the result being used as the\n\t     * value associated with the key in the returned object. The key will be\n\t     * excluded from the returned object if the resulting value is `undefined`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Object\n\t     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n\t     * @param {Function} fn\n\t     * @param {Object} l\n\t     * @param {Object} r\n\t     * @return {Object}\n\t     * @see R.merge, R.mergeWithKey\n\t     * @example\n\t     *\n\t     *      R.mergeWith(R.concat,\n\t     *                  { a: true, values: [10, 20] },\n\t     *                  { b: true, values: [15, 35] });\n\t     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n\t     */\n\t    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n\t        return mergeWithKey(function (_, _l, _r) {\n\t            return fn(_l, _r);\n\t        }, l, r);\n\t    });\n\t\n\t    /**\n\t     * Takes a function `f` and a list of arguments, and returns a function `g`.\n\t     * When applied, `g` returns the result of applying `f` to the arguments\n\t     * provided initially followed by the arguments provided to `g`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category Function\n\t     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n\t     * @param {Function} f\n\t     * @param {Array} args\n\t     * @return {Function}\n\t     * @see R.partialRight\n\t     * @example\n\t     *\n\t     *      var multiply = (a, b) => a * b;\n\t     *      var double = R.partial(multiply, [2]);\n\t     *      double(2); //=> 4\n\t     *\n\t     *      var greet = (salutation, title, firstName, lastName) =>\n\t     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n\t     *\n\t     *      var sayHello = R.partial(greet, ['Hello']);\n\t     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n\t     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n\t     */\n\t    var partial = _createPartialApplicator(_concat);\n\t\n\t    /**\n\t     * Takes a function `f` and a list of arguments, and returns a function `g`.\n\t     * When applied, `g` returns the result of applying `f` to the arguments\n\t     * provided to `g` followed by the arguments provided initially.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category Function\n\t     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n\t     * @param {Function} f\n\t     * @param {Array} args\n\t     * @return {Function}\n\t     * @see R.partial\n\t     * @example\n\t     *\n\t     *      var greet = (salutation, title, firstName, lastName) =>\n\t     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n\t     *\n\t     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n\t     *\n\t     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n\t     */\n\t    var partialRight = _createPartialApplicator(flip(_concat));\n\t\n\t    /**\n\t     * Determines whether a nested path on an object has a specific value, in\n\t     * `R.equals` terms. Most likely used to filter a list.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category Relation\n\t     * @sig [String] -> * -> {String: *} -> Boolean\n\t     * @param {Array} path The path of the nested property to use\n\t     * @param {*} val The value to compare the nested property with\n\t     * @param {Object} obj The object to check the nested property in\n\t     * @return {Boolean} `true` if the value equals the nested object property,\n\t     *         `false` otherwise.\n\t     * @example\n\t     *\n\t     *      var user1 = { address: { zipCode: 90210 } };\n\t     *      var user2 = { address: { zipCode: 55555 } };\n\t     *      var user3 = { name: 'Bob' };\n\t     *      var users = [ user1, user2, user3 ];\n\t     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n\t     *      R.filter(isFamous, users); //=> [ user1 ]\n\t     */\n\t    var pathEq = _curry3(function pathEq(_path, val, obj) {\n\t        return equals(path(_path, obj), val);\n\t    });\n\t\n\t    /**\n\t     * Returns a new list by plucking the same named property off all objects in\n\t     * the list supplied.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig k -> [{k: v}] -> [v]\n\t     * @param {Number|String} key The key name to pluck off of each object.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} The list of values for the given key.\n\t     * @see R.props\n\t     * @example\n\t     *\n\t     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n\t     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n\t     */\n\t    var pluck = _curry2(function pluck(p, list) {\n\t        return map(prop(p), list);\n\t    });\n\t\n\t    /**\n\t     * Reasonable analog to SQL `select` statement.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @category Relation\n\t     * @sig [k] -> [{k: v}] -> [{k: v}]\n\t     * @param {Array} props The property names to project\n\t     * @param {Array} objs The objects to query\n\t     * @return {Array} An array of objects with just the `props` properties.\n\t     * @example\n\t     *\n\t     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n\t     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n\t     *      var kids = [abby, fred];\n\t     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n\t     */\n\t    // passing `identity` gives correct arity\n\t    var project = useWith(_map, [\n\t        pickAll,\n\t        identity\n\t    ]);\n\t\n\t    /**\n\t     * Returns `true` if the specified object property is equal, in `R.equals`\n\t     * terms, to the given value; `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig String -> a -> Object -> Boolean\n\t     * @param {String} name\n\t     * @param {*} val\n\t     * @param {*} obj\n\t     * @return {Boolean}\n\t     * @see R.equals, R.propSatisfies\n\t     * @example\n\t     *\n\t     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n\t     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n\t     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n\t     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n\t     *      var kids = [abby, fred, rusty, alois];\n\t     *      var hasBrownHair = R.propEq('hair', 'brown');\n\t     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n\t     */\n\t    var propEq = _curry3(function propEq(name, val, obj) {\n\t        return propSatisfies(equals(val), name, obj);\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the specified object property is of the given type;\n\t     * `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Type\n\t     * @sig Type -> String -> Object -> Boolean\n\t     * @param {Function} type\n\t     * @param {String} name\n\t     * @param {*} obj\n\t     * @return {Boolean}\n\t     * @see R.is, R.propSatisfies\n\t     * @example\n\t     *\n\t     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n\t     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n\t     *      R.propIs(Number, 'x', {});            //=> false\n\t     */\n\t    var propIs = _curry3(function propIs(type, name, obj) {\n\t        return propSatisfies(is(type), name, obj);\n\t    });\n\t\n\t    /**\n\t     * Returns a single item by iterating through the list, successively calling\n\t     * the iterator function and passing it an accumulator value and the current\n\t     * value from the array, and then passing the result to the next call.\n\t     *\n\t     * The iterator function receives two values: *(acc, value)*. It may use\n\t     * `R.reduced` to shortcut the iteration.\n\t     *\n\t     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n\t     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n\t     * on this behavior, see:\n\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n\t     *\n\t     * Dispatches to the `reduce` method of the third argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig ((a, b) -> a) -> a -> [b] -> a\n\t     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n\t     *        current element from the array.\n\t     * @param {*} acc The accumulator value.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {*} The final, accumulated value.\n\t     * @see R.reduced, R.addIndex\n\t     * @example\n\t     *\n\t     *      var numbers = [1, 2, 3];\n\t     *      var add = (a, b) => a + b;\n\t     *\n\t     *      R.reduce(add, 10, numbers); //=> 16\n\t     */\n\t    var reduce = _curry3(_reduce);\n\t\n\t    /**\n\t     * Groups the elements of the list according to the result of calling\n\t     * the String-returning function `keyFn` on each element and reduces the elements\n\t     * of each group to a single value via the reducer function `valueFn`.\n\t     *\n\t     * This function is basically a more general `groupBy` function.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.20.0\n\t     * @category List\n\t     * @sig (b -> String) -> ((a, b) -> a) -> a -> [b] -> {String: a}\n\t     * @param {Function} keyFn The function that maps the list's element into a key.\n\t     * @param {Function} valueFn The function that reduces the elements of each group to a single\n\t     *        value. Receives two values, accumulator for a particular group and the current element.\n\t     * @param {*} acc The (initial) accumulator value for each group.\n\t     * @param {Array} list The array to group.\n\t     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n\t     *         `valueFn` for elements which produced that key when passed to `keyFn`.\n\t     * @see R.groupBy, R.reduce\n\t     * @example\n\t     *\n\t     *      var byGrade = R.reduceBy(function(student) {\n\t     *        var score = student.score;\n\t     *        return score < 65 ? 'F' :\n\t     *               score < 70 ? 'D' :\n\t     *               score < 80 ? 'C' :\n\t     *               score < 90 ? 'B' : 'A';\n\t     *      });\n\t     *      var namesByGrade = byGrade(function(acc, student) {\n\t     *        return acc.concat(student.name);\n\t     *      }, []);\n\t     *      var students = [{name: 'Lucy', score: 92},\n\t     *                      {name: 'Drew', score: 85},\n\t     *                      // ...\n\t     *                      {name: 'Bart', score: 62}];\n\t     *      namesByGrade(students);\n\t     *      // {\n\t     *      //   'A': ['Lucy'],\n\t     *      //   'B': ['Drew']\n\t     *      //   // ...,\n\t     *      //   'F': ['Bart']\n\t     *      // }\n\t     */\n\t    var reduceBy = _curryN(4, [], function reduceBy(keyFn, valueFn, valueAcc, list) {\n\t        return _reduce(function (acc, elt) {\n\t            var key = keyFn(elt);\n\t            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n\t            return acc;\n\t        }, {}, list);\n\t    });\n\t\n\t    /**\n\t     * The complement of `filter`.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n\t     * @param {Function} pred\n\t     * @param {Array} filterable\n\t     * @return {Array}\n\t     * @see R.filter, R.transduce, R.addIndex\n\t     * @example\n\t     *\n\t     *      var isOdd = (n) => n % 2 === 1;\n\t     *\n\t     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n\t     *\n\t     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n\t     */\n\t    var reject = _curry2(function reject(pred, filterable) {\n\t        return filter(_complement(pred), filterable);\n\t    });\n\t\n\t    /**\n\t     * Returns a fixed list of size `n` containing a specified identical value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.1\n\t     * @category List\n\t     * @sig a -> n -> [a]\n\t     * @param {*} value The value to repeat.\n\t     * @param {Number} n The desired size of the output list.\n\t     * @return {Array} A new array containing `n` `value`s.\n\t     * @example\n\t     *\n\t     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n\t     *\n\t     *      var obj = {};\n\t     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n\t     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n\t     */\n\t    var repeat = _curry2(function repeat(value, n) {\n\t        return times(always(value), n);\n\t    });\n\t\n\t    /**\n\t     * Adds together all the elements of a list.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Math\n\t     * @sig [Number] -> Number\n\t     * @param {Array} list An array of numbers\n\t     * @return {Number} The sum of all the numbers in the list.\n\t     * @see R.reduce\n\t     * @example\n\t     *\n\t     *      R.sum([2,4,6,8,100,1]); //=> 121\n\t     */\n\t    var sum = reduce(add, 0);\n\t\n\t    /**\n\t     * Returns a new list containing the last `n` elements of the given list.\n\t     * If `n > list.length`, returns a list of `list.length` elements.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category List\n\t     * @sig Number -> [a] -> [a]\n\t     * @sig Number -> String -> String\n\t     * @param {Number} n The number of elements to return.\n\t     * @param {Array} xs The collection to consider.\n\t     * @return {Array}\n\t     * @see R.dropLast\n\t     * @example\n\t     *\n\t     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n\t     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n\t     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n\t     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n\t     *      R.takeLast(3, 'ramda');               //=> 'mda'\n\t     */\n\t    var takeLast = _curry2(function takeLast(n, xs) {\n\t        return drop(n >= 0 ? xs.length - n : 0, xs);\n\t    });\n\t\n\t    /**\n\t     * Initializes a transducer using supplied iterator function. Returns a single\n\t     * item by iterating through the list, successively calling the transformed\n\t     * iterator function and passing it an accumulator value and the current value\n\t     * from the array, and then passing the result to the next call.\n\t     *\n\t     * The iterator function receives two values: *(acc, value)*. It will be\n\t     * wrapped as a transformer to initialize the transducer. A transformer can be\n\t     * passed directly in place of an iterator function. In both cases, iteration\n\t     * may be stopped early with the `R.reduced` function.\n\t     *\n\t     * A transducer is a function that accepts a transformer and returns a\n\t     * transformer and can be composed directly.\n\t     *\n\t     * A transformer is an an object that provides a 2-arity reducing iterator\n\t     * function, step, 0-arity initial value function, init, and 1-arity result\n\t     * extraction function, result. The step function is used as the iterator\n\t     * function in reduce. The result function is used to convert the final\n\t     * accumulator into the return type and in most cases is R.identity. The init\n\t     * function can be used to provide an initial accumulator, but is ignored by\n\t     * transduce.\n\t     *\n\t     * The iteration is performed with R.reduce after initializing the transducer.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category List\n\t     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n\t     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n\t     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n\t     *        current element from the array. Wrapped as transformer, if necessary, and used to\n\t     *        initialize the transducer\n\t     * @param {*} acc The initial accumulator value.\n\t     * @param {Array} list The list to iterate over.\n\t     * @return {*} The final, accumulated value.\n\t     * @see R.reduce, R.reduced, R.into\n\t     * @example\n\t     *\n\t     *      var numbers = [1, 2, 3, 4];\n\t     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n\t     *\n\t     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n\t     */\n\t    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n\t        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n\t    });\n\t\n\t    /**\n\t     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n\t     * of each list. Duplication is determined according to the value returned by\n\t     * applying the supplied predicate to two list elements.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n\t     * @param {Function} pred A predicate used to test whether two items are equal.\n\t     * @param {Array} list1 The first list.\n\t     * @param {Array} list2 The second list.\n\t     * @return {Array} The first and second lists concatenated, with\n\t     *         duplicates removed.\n\t     * @see R.union\n\t     * @example\n\t     *\n\t     *      var l1 = [{a: 1}, {a: 2}];\n\t     *      var l2 = [{a: 1}, {a: 4}];\n\t     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n\t     */\n\t    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n\t        return uniqWith(pred, _concat(list1, list2));\n\t    });\n\t\n\t    /**\n\t     * Takes a spec object and a test object; returns true if the test satisfies\n\t     * the spec, false otherwise. An object satisfies the spec if, for each of the\n\t     * spec's own properties, accessing that property of the object gives the same\n\t     * value (in `R.equals` terms) as accessing that property of the spec.\n\t     *\n\t     * `whereEq` is a specialization of [`where`](#where).\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category Object\n\t     * @sig {String: *} -> {String: *} -> Boolean\n\t     * @param {Object} spec\n\t     * @param {Object} testObj\n\t     * @return {Boolean}\n\t     * @see R.where\n\t     * @example\n\t     *\n\t     *      // pred :: Object -> Boolean\n\t     *      var pred = R.whereEq({a: 1, b: 2});\n\t     *\n\t     *      pred({a: 1});              //=> false\n\t     *      pred({a: 1, b: 2});        //=> true\n\t     *      pred({a: 1, b: 2, c: 3});  //=> true\n\t     *      pred({a: 1, b: 1});        //=> false\n\t     */\n\t    var whereEq = _curry2(function whereEq(spec, testObj) {\n\t        return where(map(equals, spec), testObj);\n\t    });\n\t\n\t    var _flatCat = function () {\n\t        var preservingReduced = function (xf) {\n\t            return {\n\t                '@@transducer/init': _xfBase.init,\n\t                '@@transducer/result': function (result) {\n\t                    return xf['@@transducer/result'](result);\n\t                },\n\t                '@@transducer/step': function (result, input) {\n\t                    var ret = xf['@@transducer/step'](result, input);\n\t                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n\t                }\n\t            };\n\t        };\n\t        return function _xcat(xf) {\n\t            var rxf = preservingReduced(xf);\n\t            return {\n\t                '@@transducer/init': _xfBase.init,\n\t                '@@transducer/result': function (result) {\n\t                    return rxf['@@transducer/result'](result);\n\t                },\n\t                '@@transducer/step': function (result, input) {\n\t                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n\t                }\n\t            };\n\t        };\n\t    }();\n\t\n\t    // Array.prototype.indexOf doesn't exist below IE9\n\t    // manually crawl the list to distinguish between +0 and -0\n\t    // NaN\n\t    // non-zero numbers can utilise Set\n\t    // all these types can utilise Set\n\t    // null can utilise Set\n\t    // anything else not covered above, defer to R.equals\n\t    var _indexOf = function _indexOf(list, a, idx) {\n\t        var inf, item;\n\t        // Array.prototype.indexOf doesn't exist below IE9\n\t        if (typeof list.indexOf === 'function') {\n\t            switch (typeof a) {\n\t            case 'number':\n\t                if (a === 0) {\n\t                    // manually crawl the list to distinguish between +0 and -0\n\t                    inf = 1 / a;\n\t                    while (idx < list.length) {\n\t                        item = list[idx];\n\t                        if (item === 0 && 1 / item === inf) {\n\t                            return idx;\n\t                        }\n\t                        idx += 1;\n\t                    }\n\t                    return -1;\n\t                } else if (a !== a) {\n\t                    // NaN\n\t                    while (idx < list.length) {\n\t                        item = list[idx];\n\t                        if (typeof item === 'number' && item !== item) {\n\t                            return idx;\n\t                        }\n\t                        idx += 1;\n\t                    }\n\t                    return -1;\n\t                }\n\t                // non-zero numbers can utilise Set\n\t                return list.indexOf(a, idx);\n\t            // all these types can utilise Set\n\t            case 'string':\n\t            case 'boolean':\n\t            case 'function':\n\t            case 'undefined':\n\t                return list.indexOf(a, idx);\n\t            case 'object':\n\t                if (a === null) {\n\t                    // null can utilise Set\n\t                    return list.indexOf(a, idx);\n\t                }\n\t            }\n\t        }\n\t        // anything else not covered above, defer to R.equals\n\t        while (idx < list.length) {\n\t            if (equals(list[idx], a)) {\n\t                return idx;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return -1;\n\t    };\n\t\n\t    var _xchain = _curry2(function _xchain(f, xf) {\n\t        return map(f, _flatCat(xf));\n\t    });\n\t\n\t    /**\n\t     * Takes a list of predicates and returns a predicate that returns true for a\n\t     * given list of arguments if every one of the provided predicates is satisfied\n\t     * by those arguments.\n\t     *\n\t     * The function returned is a curried function whose arity matches that of the\n\t     * highest-arity predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Logic\n\t     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n\t     * @param {Array} preds\n\t     * @return {Function}\n\t     * @see R.anyPass\n\t     * @example\n\t     *\n\t     *      var isQueen = R.propEq('rank', 'Q');\n\t     *      var isSpade = R.propEq('suit', '♠︎');\n\t     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n\t     *\n\t     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n\t     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n\t     */\n\t    var allPass = _curry1(function allPass(preds) {\n\t        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n\t            var idx = 0;\n\t            var len = preds.length;\n\t            while (idx < len) {\n\t                if (!preds[idx].apply(this, arguments)) {\n\t                    return false;\n\t                }\n\t                idx += 1;\n\t            }\n\t            return true;\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if all elements are unique, in `R.equals` terms, otherwise\n\t     * `false`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category List\n\t     * @sig [a] -> Boolean\n\t     * @param {Array} list The array to consider.\n\t     * @return {Boolean} `true` if all elements are unique, else `false`.\n\t     * @deprecated since v0.20.0\n\t     * @example\n\t     *\n\t     *      R.allUniq(['1', 1]); //=> true\n\t     *      R.allUniq([1, 1]);   //=> false\n\t     *      R.allUniq([[42], [42]]); //=> false\n\t     */\n\t    var allUniq = _curry1(function allUniq(list) {\n\t        var len = list.length;\n\t        var idx = 0;\n\t        while (idx < len) {\n\t            if (_indexOf(list, list[idx], idx + 1) >= 0) {\n\t                return false;\n\t            }\n\t            idx += 1;\n\t        }\n\t        return true;\n\t    });\n\t\n\t    /**\n\t     * Takes a list of predicates and returns a predicate that returns true for a\n\t     * given list of arguments if at least one of the provided predicates is\n\t     * satisfied by those arguments.\n\t     *\n\t     * The function returned is a curried function whose arity matches that of the\n\t     * highest-arity predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Logic\n\t     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n\t     * @param {Array} preds\n\t     * @return {Function}\n\t     * @see R.allPass\n\t     * @example\n\t     *\n\t     *      var gte = R.anyPass([R.gt, R.equals]);\n\t     *\n\t     *      gte(3, 2); //=> true\n\t     *      gte(2, 2); //=> true\n\t     *      gte(2, 3); //=> false\n\t     */\n\t    var anyPass = _curry1(function anyPass(preds) {\n\t        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n\t            var idx = 0;\n\t            var len = preds.length;\n\t            while (idx < len) {\n\t                if (preds[idx].apply(this, arguments)) {\n\t                    return true;\n\t                }\n\t                idx += 1;\n\t            }\n\t            return false;\n\t        });\n\t    });\n\t\n\t    /**\n\t     * ap applies a list of functions to a list of values.\n\t     *\n\t     * Dispatches to the `ap` method of the second argument, if present. Also\n\t     * treats functions as applicatives.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category Function\n\t     * @sig [f] -> [a] -> [f a]\n\t     * @param {Array} fns An array of functions\n\t     * @param {Array} vs An array of values\n\t     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n\t     * @example\n\t     *\n\t     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n\t     */\n\t    // else\n\t    var ap = _curry2(function ap(applicative, fn) {\n\t        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? curryN(Math.max(applicative.length, fn.length), function () {\n\t            return applicative.apply(this, arguments)(fn.apply(this, arguments));\n\t        }) : // else\n\t        _reduce(function (acc, f) {\n\t            return _concat(acc, map(f, fn));\n\t        }, [], applicative);\n\t    });\n\t\n\t    /**\n\t     * Given a spec object recursively mapping properties to functions, creates a\n\t     * function producing an object of the same structure, by mapping each property\n\t     * to the result of calling its associated function with the supplied arguments.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.20.0\n\t     * @category Function\n\t     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n\t     * @param {Object} spec an object recursively mapping properties to functions for\n\t     *        producing the values for these properties.\n\t     * @return {Function} A function that returns an object of the same structure\n\t     * as `spec', with each property set to the value returned by calling its\n\t     * associated function with the supplied arguments.\n\t     * @see R.juxt\n\t     * @example\n\t     *\n\t     *      var getMetrics = R.applySpec({\n\t     *                                      sum: R.add,\n\t     *                                      nested: { mul: R.multiply }\n\t     *                                   });\n\t     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n\t     */\n\t    var applySpec = _curry1(function applySpec(spec) {\n\t        spec = map(function (v) {\n\t            return typeof v == 'function' ? v : applySpec(v);\n\t        }, spec);\n\t        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n\t            var args = arguments;\n\t            return map(function (f) {\n\t                return apply(f, args);\n\t            }, spec);\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns the result of calling its first argument with the remaining\n\t     * arguments. This is occasionally useful as a converging function for\n\t     * `R.converge`: the left branch can produce a function while the right branch\n\t     * produces a value to be passed to that function as an argument.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category Function\n\t     * @sig (*... -> a),*... -> a\n\t     * @param {Function} fn The function to apply to the remaining arguments.\n\t     * @param {...*} args Any number of positional arguments.\n\t     * @return {*}\n\t     * @see R.apply\n\t     * @example\n\t     *\n\t     *      var indentN = R.pipe(R.times(R.always(' ')),\n\t     *                           R.join(''),\n\t     *                           R.replace(/^(?!$)/gm));\n\t     *\n\t     *      var format = R.converge(R.call, [\n\t     *                                  R.pipe(R.prop('indent'), indentN),\n\t     *                                  R.prop('value')\n\t     *                              ]);\n\t     *\n\t     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n\t     */\n\t    var call = curry(function call(fn) {\n\t        return fn.apply(this, _slice(arguments, 1));\n\t    });\n\t\n\t    /**\n\t     * `chain` maps a function over a list and concatenates the results. `chain`\n\t     * is also known as `flatMap` in some libraries\n\t     *\n\t     * Dispatches to the `chain` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category List\n\t     * @sig (a -> [b]) -> [a] -> [b]\n\t     * @param {Function} fn\n\t     * @param {Array} list\n\t     * @return {Array}\n\t     * @example\n\t     *\n\t     *      var duplicate = n => [n, n];\n\t     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n\t     */\n\t    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n\t        if (typeof monad === 'function') {\n\t            return function () {\n\t                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n\t            };\n\t        }\n\t        return _makeFlat(false)(map(fn, monad));\n\t    }));\n\t\n\t    /**\n\t     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n\t     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n\t     * to `fn` are applied to each of the predicates in turn until one returns a\n\t     * \"truthy\" value, at which point `fn` returns the result of applying its\n\t     * arguments to the corresponding transformer. If none of the predicates\n\t     * matches, `fn` returns undefined.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.6.0\n\t     * @category Logic\n\t     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n\t     * @param {Array} pairs\n\t     * @return {Function}\n\t     * @example\n\t     *\n\t     *      var fn = R.cond([\n\t     *        [R.equals(0),   R.always('water freezes at 0°C')],\n\t     *        [R.equals(100), R.always('water boils at 100°C')],\n\t     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n\t     *      ]);\n\t     *      fn(0); //=> 'water freezes at 0°C'\n\t     *      fn(50); //=> 'nothing special happens at 50°C'\n\t     *      fn(100); //=> 'water boils at 100°C'\n\t     */\n\t    var cond = _curry1(function cond(pairs) {\n\t        var arity = reduce(max, 0, map(function (pair) {\n\t            return pair[0].length;\n\t        }, pairs));\n\t        return _arity(arity, function () {\n\t            var idx = 0;\n\t            while (idx < pairs.length) {\n\t                if (pairs[idx][0].apply(this, arguments)) {\n\t                    return pairs[idx][1].apply(this, arguments);\n\t                }\n\t                idx += 1;\n\t            }\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Wraps a constructor function inside a curried function that can be called\n\t     * with the same arguments and returns the same type. The arity of the function\n\t     * returned is specified to allow using variadic constructor functions.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.4.0\n\t     * @category Function\n\t     * @sig Number -> (* -> {*}) -> (* -> {*})\n\t     * @param {Number} n The arity of the constructor function.\n\t     * @param {Function} Fn The constructor function to wrap.\n\t     * @return {Function} A wrapped, curried constructor function.\n\t     * @example\n\t     *\n\t     *      // Variadic constructor function\n\t     *      var Widget = () => {\n\t     *        this.children = Array.prototype.slice.call(arguments);\n\t     *        // ...\n\t     *      };\n\t     *      Widget.prototype = {\n\t     *        // ...\n\t     *      };\n\t     *      var allConfigs = [\n\t     *        // ...\n\t     *      ];\n\t     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n\t     */\n\t    var constructN = _curry2(function constructN(n, Fn) {\n\t        if (n > 10) {\n\t            throw new Error('Constructor with greater than ten arguments');\n\t        }\n\t        if (n === 0) {\n\t            return function () {\n\t                return new Fn();\n\t            };\n\t        }\n\t        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n\t            switch (arguments.length) {\n\t            case 1:\n\t                return new Fn($0);\n\t            case 2:\n\t                return new Fn($0, $1);\n\t            case 3:\n\t                return new Fn($0, $1, $2);\n\t            case 4:\n\t                return new Fn($0, $1, $2, $3);\n\t            case 5:\n\t                return new Fn($0, $1, $2, $3, $4);\n\t            case 6:\n\t                return new Fn($0, $1, $2, $3, $4, $5);\n\t            case 7:\n\t                return new Fn($0, $1, $2, $3, $4, $5, $6);\n\t            case 8:\n\t                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n\t            case 9:\n\t                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n\t            case 10:\n\t                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n\t            }\n\t        }));\n\t    });\n\t\n\t    /**\n\t     * Accepts a converging function and a list of branching functions and returns\n\t     * a new function. When invoked, this new function is applied to some\n\t     * arguments, each branching function is applied to those same arguments. The\n\t     * results of each branching function are passed as arguments to the converging\n\t     * function to produce the return value.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.4.2\n\t     * @category Function\n\t     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n\t     * @param {Function} after A function. `after` will be invoked with the return values of\n\t     *        `fn1` and `fn2` as its arguments.\n\t     * @param {Array} functions A list of functions.\n\t     * @return {Function} A new function.\n\t     * @example\n\t     *\n\t     *      var add = (a, b) => a + b;\n\t     *      var multiply = (a, b) => a * b;\n\t     *      var subtract = (a, b) => a - b;\n\t     *\n\t     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n\t     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n\t     *\n\t     *      var add3 = (a, b, c) => a + b + c;\n\t     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n\t     */\n\t    var converge = _curry2(function converge(after, fns) {\n\t        return curryN(reduce(max, 0, pluck('length', fns)), function () {\n\t            var args = arguments;\n\t            var context = this;\n\t            return after.apply(context, _map(function (fn) {\n\t                return fn.apply(context, args);\n\t            }, fns));\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns a new list without any consecutively repeating elements. Equality is\n\t     * determined by applying the supplied predicate two consecutive elements. The\n\t     * first element in a series of equal element is the one being preserved.\n\t     *\n\t     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category List\n\t     * @sig (a, a -> Boolean) -> [a] -> [a]\n\t     * @param {Function} pred A predicate used to test whether two items are equal.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} `list` without repeating elements.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n\t     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n\t     */\n\t    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n\t        var result = [];\n\t        var idx = 1;\n\t        var len = list.length;\n\t        if (len !== 0) {\n\t            result[0] = list[0];\n\t            while (idx < len) {\n\t                if (!pred(last(result), list[idx])) {\n\t                    result[result.length] = list[idx];\n\t                }\n\t                idx += 1;\n\t            }\n\t        }\n\t        return result;\n\t    }));\n\t\n\t    /**\n\t     * Takes a function and two values in its domain and returns `true` if the\n\t     * values map to the same value in the codomain; `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.18.0\n\t     * @category Relation\n\t     * @sig (a -> b) -> a -> a -> Boolean\n\t     * @param {Function} f\n\t     * @param {*} x\n\t     * @param {*} y\n\t     * @return {Boolean}\n\t     * @example\n\t     *\n\t     *      R.eqBy(Math.abs, 5, -5); //=> true\n\t     */\n\t    var eqBy = _curry3(function eqBy(f, x, y) {\n\t        return equals(f(x), f(y));\n\t    });\n\t\n\t    /**\n\t     * Reports whether two objects have the same value, in `R.equals` terms, for\n\t     * the specified property. Useful as a curried predicate.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig k -> {k: v} -> {k: v} -> Boolean\n\t     * @param {String} prop The name of the property to compare\n\t     * @param {Object} obj1\n\t     * @param {Object} obj2\n\t     * @return {Boolean}\n\t     *\n\t     * @example\n\t     *\n\t     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n\t     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n\t     *      R.eqProps('a', o1, o2); //=> false\n\t     *      R.eqProps('c', o1, o2); //=> true\n\t     */\n\t    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n\t        return equals(obj1[prop], obj2[prop]);\n\t    });\n\t\n\t    /**\n\t     * Returns the position of the first occurrence of an item in an array, or -1\n\t     * if the item is not included in the array. `R.equals` is used to determine\n\t     * equality.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig a -> [a] -> Number\n\t     * @param {*} target The item to find.\n\t     * @param {Array} xs The array to search in.\n\t     * @return {Number} the index of the target, or -1 if the target is not found.\n\t     * @see R.lastIndexOf\n\t     * @example\n\t     *\n\t     *      R.indexOf(3, [1,2,3,4]); //=> 2\n\t     *      R.indexOf(10, [1,2,3,4]); //=> -1\n\t     */\n\t    var indexOf = _curry2(function indexOf(target, xs) {\n\t        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n\t    });\n\t\n\t    /**\n\t     * juxt applies a list of functions to a list of values.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Function\n\t     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n\t     * @param {Array} fns An array of functions\n\t     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n\t     * @see R.applySpec\n\t     * @example\n\t     *\n\t     *      var range = R.juxt([Math.min, Math.max]);\n\t     *      range(3, 4, 9, -3); //=> [-3, 9]\n\t     */\n\t    var juxt = _curry1(function juxt(fns) {\n\t        return converge(_arrayOf, fns);\n\t    });\n\t\n\t    /**\n\t     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n\t     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n\t     * should not mutate the data structure.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.8.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n\t     * @param {Function} getter\n\t     * @param {Function} setter\n\t     * @return {Lens}\n\t     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n\t     * @example\n\t     *\n\t     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n\t     *\n\t     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n\t     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n\t     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n\t     */\n\t    var lens = _curry2(function lens(getter, setter) {\n\t        return function (toFunctorFn) {\n\t            return function (target) {\n\t                return map(function (focus) {\n\t                    return setter(focus, target);\n\t                }, toFunctorFn(getter(target)));\n\t            };\n\t        };\n\t    });\n\t\n\t    /**\n\t     * Returns a lens whose focus is the specified index.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig Number -> Lens s a\n\t     * @param {Number} n\n\t     * @return {Lens}\n\t     * @see R.view, R.set, R.over\n\t     * @example\n\t     *\n\t     *      var headLens = R.lensIndex(0);\n\t     *\n\t     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n\t     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n\t     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n\t     */\n\t    var lensIndex = _curry1(function lensIndex(n) {\n\t        return lens(nth(n), update(n));\n\t    });\n\t\n\t    /**\n\t     * Returns a lens whose focus is the specified path.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig [String] -> Lens s a\n\t     * @param {Array} path The path to use.\n\t     * @return {Lens}\n\t     * @see R.view, R.set, R.over\n\t     * @example\n\t     *\n\t     *      var xyLens = R.lensPath(['x', 'y']);\n\t     *\n\t     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n\t     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n\t     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n\t     */\n\t    var lensPath = _curry1(function lensPath(p) {\n\t        return lens(path(p), assocPath(p));\n\t    });\n\t\n\t    /**\n\t     * Returns a lens whose focus is the specified property.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category Object\n\t     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n\t     * @sig String -> Lens s a\n\t     * @param {String} k\n\t     * @return {Lens}\n\t     * @see R.view, R.set, R.over\n\t     * @example\n\t     *\n\t     *      var xLens = R.lensProp('x');\n\t     *\n\t     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n\t     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n\t     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n\t     */\n\t    var lensProp = _curry1(function lensProp(k) {\n\t        return lens(prop(k), assoc(k));\n\t    });\n\t\n\t    /**\n\t     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n\t     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category Function\n\t     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n\t     * @param {Function} fn The function to lift into higher context\n\t     * @return {Function} The lifted function.\n\t     * @see R.lift, R.ap\n\t     * @example\n\t     *\n\t     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n\t     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n\t     */\n\t    var liftN = _curry2(function liftN(arity, fn) {\n\t        var lifted = curryN(arity, fn);\n\t        return curryN(arity, function () {\n\t            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns the mean of the given list of numbers.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category Math\n\t     * @sig [Number] -> Number\n\t     * @param {Array} list\n\t     * @return {Number}\n\t     * @example\n\t     *\n\t     *      R.mean([2, 7, 9]); //=> 6\n\t     *      R.mean([]); //=> NaN\n\t     */\n\t    var mean = _curry1(function mean(list) {\n\t        return sum(list) / list.length;\n\t    });\n\t\n\t    /**\n\t     * Returns the median of the given list of numbers.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category Math\n\t     * @sig [Number] -> Number\n\t     * @param {Array} list\n\t     * @return {Number}\n\t     * @example\n\t     *\n\t     *      R.median([2, 9, 7]); //=> 7\n\t     *      R.median([7, 2, 10, 9]); //=> 8\n\t     *      R.median([]); //=> NaN\n\t     */\n\t    var median = _curry1(function median(list) {\n\t        var len = list.length;\n\t        if (len === 0) {\n\t            return NaN;\n\t        }\n\t        var width = 2 - len % 2;\n\t        var idx = (len - width) / 2;\n\t        return mean(_slice(list).sort(function (a, b) {\n\t            return a < b ? -1 : a > b ? 1 : 0;\n\t        }).slice(idx, idx + width));\n\t    });\n\t\n\t    /**\n\t     * Takes a predicate and a list or other \"filterable\" object and returns the\n\t     * pair of filterable objects of the same type of elements which do and do not\n\t     * satisfy, the predicate, respectively.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.4\n\t     * @category List\n\t     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n\t     * @param {Function} pred A predicate to determine which side the element belongs to.\n\t     * @param {Array} filterable the list (or other filterable) to partition.\n\t     * @return {Array} An array, containing first the subset of elements that satisfy the\n\t     *         predicate, and second the subset of elements that do not satisfy.\n\t     * @see R.filter, R.reject\n\t     * @example\n\t     *\n\t     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n\t     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n\t     *\n\t     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n\t     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n\t     */\n\t    var partition = juxt([\n\t        filter,\n\t        reject\n\t    ]);\n\t\n\t    /**\n\t     * Performs left-to-right function composition. The leftmost function may have\n\t     * any arity; the remaining functions must be unary.\n\t     *\n\t     * In some libraries this function is named `sequence`.\n\t     *\n\t     * **Note:** The result of pipe is not automatically curried.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n\t     * @param {...Function} functions\n\t     * @return {Function}\n\t     * @see R.compose\n\t     * @example\n\t     *\n\t     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n\t     *\n\t     *      f(3, 4); // -(3^4) + 1\n\t     */\n\t    var pipe = function pipe() {\n\t        if (arguments.length === 0) {\n\t            throw new Error('pipe requires at least one argument');\n\t        }\n\t        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n\t    };\n\t\n\t    /**\n\t     * Performs left-to-right composition of one or more Promise-returning\n\t     * functions. The leftmost function may have any arity; the remaining functions\n\t     * must be unary.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category Function\n\t     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n\t     * @param {...Function} functions\n\t     * @return {Function}\n\t     * @see R.composeP\n\t     * @example\n\t     *\n\t     *      //  followersForUser :: String -> Promise [User]\n\t     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n\t     */\n\t    var pipeP = function pipeP() {\n\t        if (arguments.length === 0) {\n\t            throw new Error('pipeP requires at least one argument');\n\t        }\n\t        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n\t    };\n\t\n\t    /**\n\t     * Multiplies together all the elements of a list.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Math\n\t     * @sig [Number] -> Number\n\t     * @param {Array} list An array of numbers\n\t     * @return {Number} The product of all the numbers in the list.\n\t     * @see R.reduce\n\t     * @example\n\t     *\n\t     *      R.product([2,4,6,8,100,1]); //=> 38400\n\t     */\n\t    var product = reduce(multiply, 1);\n\t\n\t    /**\n\t     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n\t     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n\t     * Applicative of Traversable.\n\t     *\n\t     * Dispatches to the `sequence` method of the second argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n\t     * @param {Function} of\n\t     * @param {*} traversable\n\t     * @return {*}\n\t     * @see R.traverse\n\t     * @example\n\t     *\n\t     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n\t     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n\t     *\n\t     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n\t     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n\t     */\n\t    var sequence = _curry2(function sequence(of, traversable) {\n\t        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n\t            return ap(map(prepend, x), acc);\n\t        }, of([]), traversable);\n\t    });\n\t\n\t    /**\n\t     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n\t     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n\t     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n\t     * into an Applicative of Traversable.\n\t     *\n\t     * Dispatches to the `sequence` method of the third argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n\t     * @param {Function} of\n\t     * @param {Function} f\n\t     * @param {*} traversable\n\t     * @return {*}\n\t     * @see R.sequence\n\t     * @example\n\t     *\n\t     *      // Returns `Nothing` if the given divisor is `0`\n\t     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n\t     *\n\t     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n\t     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n\t     */\n\t    var traverse = _curry3(function traverse(of, f, traversable) {\n\t        return sequence(of, map(f, traversable));\n\t    });\n\t\n\t    /**\n\t     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n\t     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.3.0\n\t     * @category List\n\t     * @sig Chain c => c (c a) -> c a\n\t     * @param {*} list\n\t     * @return {*}\n\t     * @see R.flatten, R.chain\n\t     * @example\n\t     *\n\t     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n\t     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n\t     */\n\t    var unnest = chain(_identity);\n\t\n\t    var _contains = function _contains(a, list) {\n\t        return _indexOf(list, a, 0) >= 0;\n\t    };\n\t\n\t    //  mapPairs :: (Object, [String]) -> [String]\n\t    var _toString = function _toString(x, seen) {\n\t        var recur = function recur(y) {\n\t            var xs = seen.concat([x]);\n\t            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n\t        };\n\t        //  mapPairs :: (Object, [String]) -> [String]\n\t        var mapPairs = function (obj, keys) {\n\t            return _map(function (k) {\n\t                return _quote(k) + ': ' + recur(obj[k]);\n\t            }, keys.slice().sort());\n\t        };\n\t        switch (Object.prototype.toString.call(x)) {\n\t        case '[object Arguments]':\n\t            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n\t        case '[object Array]':\n\t            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n\t                return /^\\d+$/.test(k);\n\t            }, keys(x)))).join(', ') + ']';\n\t        case '[object Boolean]':\n\t            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n\t        case '[object Date]':\n\t            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n\t        case '[object Null]':\n\t            return 'null';\n\t        case '[object Number]':\n\t            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n\t        case '[object String]':\n\t            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n\t        case '[object Undefined]':\n\t            return 'undefined';\n\t        default:\n\t            if (typeof x.toString === 'function') {\n\t                var repr = x.toString();\n\t                if (repr !== '[object Object]') {\n\t                    return repr;\n\t                }\n\t            }\n\t            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Performs right-to-left function composition. The rightmost function may have\n\t     * any arity; the remaining functions must be unary.\n\t     *\n\t     * **Note:** The result of compose is not automatically curried.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n\t     * @param {...Function} functions\n\t     * @return {Function}\n\t     * @see R.pipe\n\t     * @example\n\t     *\n\t     *      var f = R.compose(R.inc, R.negate, Math.pow);\n\t     *\n\t     *      f(3, 4); // -(3^4) + 1\n\t     */\n\t    var compose = function compose() {\n\t        if (arguments.length === 0) {\n\t            throw new Error('compose requires at least one argument');\n\t        }\n\t        return pipe.apply(this, reverse(arguments));\n\t    };\n\t\n\t    /**\n\t     * Returns the right-to-left Kleisli composition of the provided functions,\n\t     * each of which must return a value of a type supported by [`chain`](#chain).\n\t     *\n\t     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Function\n\t     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n\t     * @param {...Function}\n\t     * @return {Function}\n\t     * @see R.pipeK\n\t     * @example\n\t     *\n\t     *      //  parseJson :: String -> Maybe *\n\t     *      //  get :: String -> Object -> Maybe *\n\t     *\n\t     *      //  getStateCode :: Maybe String -> Maybe String\n\t     *      var getStateCode = R.composeK(\n\t     *        R.compose(Maybe.of, R.toUpper),\n\t     *        get('state'),\n\t     *        get('address'),\n\t     *        get('user'),\n\t     *        parseJson\n\t     *      );\n\t     *\n\t     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n\t     *      //=> Just('NY')\n\t     *      getStateCode(Maybe.of('[Invalid JSON]'));\n\t     *      //=> Nothing()\n\t     */\n\t    var composeK = function composeK() {\n\t        return compose.apply(this, prepend(identity, map(chain, arguments)));\n\t    };\n\t\n\t    /**\n\t     * Performs right-to-left composition of one or more Promise-returning\n\t     * functions. The rightmost function may have any arity; the remaining\n\t     * functions must be unary.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.10.0\n\t     * @category Function\n\t     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n\t     * @param {...Function} functions\n\t     * @return {Function}\n\t     * @see R.pipeP\n\t     * @example\n\t     *\n\t     *      //  followersForUser :: String -> Promise [User]\n\t     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n\t     */\n\t    var composeP = function composeP() {\n\t        if (arguments.length === 0) {\n\t            throw new Error('composeP requires at least one argument');\n\t        }\n\t        return pipeP.apply(this, reverse(arguments));\n\t    };\n\t\n\t    /**\n\t     * Wraps a constructor function inside a curried function that can be called\n\t     * with the same arguments and returns the same type.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (* -> {*}) -> (* -> {*})\n\t     * @param {Function} Fn The constructor function to wrap.\n\t     * @return {Function} A wrapped, curried constructor function.\n\t     * @example\n\t     *\n\t     *      // Constructor function\n\t     *      var Widget = config => {\n\t     *        // ...\n\t     *      };\n\t     *      Widget.prototype = {\n\t     *        // ...\n\t     *      };\n\t     *      var allConfigs = [\n\t     *        // ...\n\t     *      ];\n\t     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n\t     */\n\t    var construct = _curry1(function construct(Fn) {\n\t        return constructN(Fn.length, Fn);\n\t    });\n\t\n\t    /**\n\t     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n\t     * least one element of the given list; `false` otherwise.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig a -> [a] -> Boolean\n\t     * @param {Object} a The item to compare against.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n\t     * @see R.any\n\t     * @example\n\t     *\n\t     *      R.contains(3, [1, 2, 3]); //=> true\n\t     *      R.contains(4, [1, 2, 3]); //=> false\n\t     *      R.contains([42], [[42]]); //=> true\n\t     */\n\t    var contains = _curry2(_contains);\n\t\n\t    /**\n\t     * Finds the set (i.e. no duplicates) of all elements in the first list not\n\t     * contained in the second list.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig [*] -> [*] -> [*]\n\t     * @param {Array} list1 The first list.\n\t     * @param {Array} list2 The second list.\n\t     * @return {Array} The elements in `list1` that are not in `list2`.\n\t     * @see R.differenceWith\n\t     * @example\n\t     *\n\t     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n\t     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n\t     */\n\t    var difference = _curry2(function difference(first, second) {\n\t        var out = [];\n\t        var idx = 0;\n\t        var firstLen = first.length;\n\t        while (idx < firstLen) {\n\t            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n\t                out[out.length] = first[idx];\n\t            }\n\t            idx += 1;\n\t        }\n\t        return out;\n\t    });\n\t\n\t    /**\n\t     * Returns a new list without any consecutively repeating elements. `R.equals`\n\t     * is used to determine equality.\n\t     *\n\t     * Dispatches to the `dropRepeats` method of the first argument, if present.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category List\n\t     * @sig [a] -> [a]\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} `list` without repeating elements.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n\t     */\n\t    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\t\n\t    /**\n\t     * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n\t     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.7.0\n\t     * @category Function\n\t     * @sig (*... -> *) -> ([*]... -> [*])\n\t     * @param {Function} fn The function to lift into higher context\n\t     * @return {Function} The lifted function.\n\t     * @see R.liftN, R.lift\n\t     * @example\n\t     *\n\t     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n\t     *\n\t     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n\t     *\n\t     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n\t     *\n\t     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n\t     */\n\t    var lift = _curry1(function lift(fn) {\n\t        return liftN(fn.length, fn);\n\t    });\n\t\n\t    /**\n\t     * Returns a partial copy of an object omitting the keys specified.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Object\n\t     * @sig [String] -> {String: *} -> {String: *}\n\t     * @param {Array} names an array of String property names to omit from the new object\n\t     * @param {Object} obj The object to copy from\n\t     * @return {Object} A new object with properties from `names` not on it.\n\t     * @see R.pick\n\t     * @example\n\t     *\n\t     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n\t     */\n\t    var omit = _curry2(function omit(names, obj) {\n\t        var result = {};\n\t        for (var prop in obj) {\n\t            if (!_contains(prop, names)) {\n\t                result[prop] = obj[prop];\n\t            }\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns the left-to-right Kleisli composition of the provided functions,\n\t     * each of which must return a value of a type supported by [`chain`](#chain).\n\t     *\n\t     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category Function\n\t     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n\t     * @param {...Function}\n\t     * @return {Function}\n\t     * @see R.composeK\n\t     * @example\n\t     *\n\t     *      //  parseJson :: String -> Maybe *\n\t     *      //  get :: String -> Object -> Maybe *\n\t     *\n\t     *      //  getStateCode :: Maybe String -> Maybe String\n\t     *      var getStateCode = R.pipeK(\n\t     *        parseJson,\n\t     *        get('user'),\n\t     *        get('address'),\n\t     *        get('state'),\n\t     *        R.compose(Maybe.of, R.toUpper)\n\t     *      );\n\t     *\n\t     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n\t     *      //=> Just('NY')\n\t     *      getStateCode(Maybe.of('[Invalid JSON]'));\n\t     *      //=> Nothing()\n\t     */\n\t    var pipeK = function pipeK() {\n\t        return composeK.apply(this, reverse(arguments));\n\t    };\n\t\n\t    /**\n\t     * Returns the string representation of the given value. `eval`'ing the output\n\t     * should result in a value equivalent to the input value. Many of the built-in\n\t     * `toString` methods do not satisfy this requirement.\n\t     *\n\t     * If the given value is an `[object Object]` with a `toString` method other\n\t     * than `Object.prototype.toString`, this method is invoked with no arguments\n\t     * to produce the return value. This means user-defined constructor functions\n\t     * can provide a suitable `toString` method. For example:\n\t     *\n\t     *     function Point(x, y) {\n\t     *       this.x = x;\n\t     *       this.y = y;\n\t     *     }\n\t     *\n\t     *     Point.prototype.toString = function() {\n\t     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n\t     *     };\n\t     *\n\t     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.14.0\n\t     * @category String\n\t     * @sig * -> String\n\t     * @param {*} val\n\t     * @return {String}\n\t     * @example\n\t     *\n\t     *      R.toString(42); //=> '42'\n\t     *      R.toString('abc'); //=> '\"abc\"'\n\t     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n\t     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n\t     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n\t     */\n\t    var toString = _curry1(function toString(val) {\n\t        return _toString(val, []);\n\t    });\n\t\n\t    /**\n\t     * Returns a new list without values in the first argument.\n\t     * `R.equals` is used to determine equality.\n\t     *\n\t     * Acts as a transducer if a transformer is given in list position.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category List\n\t     * @sig [a] -> [a] -> [a]\n\t     * @param {Array} list1 The values to be removed from `list2`.\n\t     * @param {Array} list2 The array to remove values from.\n\t     * @return {Array} The new array without values in `list1`.\n\t     * @see R.transduce\n\t     * @example\n\t     *\n\t     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n\t     */\n\t    var without = _curry2(function (xs, list) {\n\t        return reject(flip(_contains)(xs), list);\n\t    });\n\t\n\t    // A simple Set type that honours R.equals semantics\n\t    /* globals Set */\n\t    /**\n\t       * Combines the logic for checking whether an item is a member of the set and\n\t       * for adding a new item to the set.\n\t       *\n\t       * @param item       The item to check or add to the Set instance.\n\t       * @param shouldAdd  If true, the item will be added to the set if it doesn't\n\t       *                   already exist.\n\t       * @param set        The set instance to check or add to.\n\t       * @return {boolean} When shouldAdd is true, this will return true when a new\n\t       *                   item was added otherwise false. When shouldAdd is false,\n\t       *                   this will return true if the item already exists, otherwise\n\t       *                   false.\n\t       */\n\t    // distinguish between +0 and -0\n\t    // these types can all utilise Set\n\t    // set._items['boolean'] holds a two element array\n\t    // representing [ falseExists, trueExists ]\n\t    // compare functions for reference equality\n\t    /* falls through */\n\t    // reduce the search size of heterogeneous sets by creating buckets\n\t    // for each type.\n\t    // scan through all previously applied items\n\t    var _Set = function () {\n\t        function _Set() {\n\t            /* globals Set */\n\t            this._nativeSet = typeof Set === 'function' ? new Set() : null;\n\t            this._items = {};\n\t        }\n\t        _Set.prototype.add = function (item) {\n\t            return hasOrAdd(item, true, this);\n\t        };\n\t        _Set.prototype.has = function (item) {\n\t            return hasOrAdd(item, false, this);\n\t        };\n\t        /**\n\t       * Combines the logic for checking whether an item is a member of the set and\n\t       * for adding a new item to the set.\n\t       *\n\t       * @param item       The item to check or add to the Set instance.\n\t       * @param shouldAdd  If true, the item will be added to the set if it doesn't\n\t       *                   already exist.\n\t       * @param set        The set instance to check or add to.\n\t       * @return {boolean} When shouldAdd is true, this will return true when a new\n\t       *                   item was added otherwise false. When shouldAdd is false,\n\t       *                   this will return true if the item already exists, otherwise\n\t       *                   false.\n\t       */\n\t        function hasOrAdd(item, shouldAdd, set) {\n\t            var type = typeof item;\n\t            var prevSize, newSize;\n\t            switch (type) {\n\t            case 'string':\n\t            case 'number':\n\t                // distinguish between +0 and -0\n\t                if (item === 0 && !set._items['-0'] && 1 / item === -Infinity) {\n\t                    if (shouldAdd) {\n\t                        set._items['-0'] = true;\n\t                    }\n\t                    return shouldAdd;\n\t                }\n\t                // these types can all utilise Set\n\t                if (set._nativeSet !== null) {\n\t                    if (shouldAdd) {\n\t                        prevSize = set._nativeSet.size;\n\t                        set._nativeSet.add(item);\n\t                        newSize = set._nativeSet.size;\n\t                        return newSize > prevSize;\n\t                    } else {\n\t                        return set._nativeSet.has(item);\n\t                    }\n\t                } else {\n\t                    if (!(type in set._items)) {\n\t                        if (shouldAdd) {\n\t                            set._items[type] = {};\n\t                            set._items[type][item] = true;\n\t                        }\n\t                        return shouldAdd;\n\t                    } else if (item in set._items[type]) {\n\t                        return !shouldAdd;\n\t                    } else {\n\t                        if (shouldAdd) {\n\t                            set._items[type][item] = true;\n\t                        }\n\t                        return shouldAdd;\n\t                    }\n\t                }\n\t            case 'boolean':\n\t                // set._items['boolean'] holds a two element array\n\t                // representing [ falseExists, trueExists ]\n\t                if (type in set._items) {\n\t                    var bIdx = item ? 1 : 0;\n\t                    if (set._items[type][bIdx]) {\n\t                        return !shouldAdd;\n\t                    } else {\n\t                        if (shouldAdd) {\n\t                            set._items[type][bIdx] = true;\n\t                        }\n\t                        return shouldAdd;\n\t                    }\n\t                } else {\n\t                    if (shouldAdd) {\n\t                        set._items[type] = item ? [\n\t                            false,\n\t                            true\n\t                        ] : [\n\t                            true,\n\t                            false\n\t                        ];\n\t                    }\n\t                    return shouldAdd;\n\t                }\n\t            case 'function':\n\t                // compare functions for reference equality\n\t                if (set._nativeSet !== null) {\n\t                    if (shouldAdd) {\n\t                        prevSize = set._nativeSet.size;\n\t                        set._nativeSet.add(item);\n\t                        newSize = set._nativeSet.size;\n\t                        return newSize > prevSize;\n\t                    } else {\n\t                        return set._nativeSet.has(item);\n\t                    }\n\t                } else {\n\t                    if (!(type in set._items)) {\n\t                        if (shouldAdd) {\n\t                            set._items[type] = [item];\n\t                        }\n\t                        return shouldAdd;\n\t                    }\n\t                    if (!_contains(item, set._items[type])) {\n\t                        if (shouldAdd) {\n\t                            set._items[type].push(item);\n\t                        }\n\t                        return shouldAdd;\n\t                    }\n\t                }\n\t                return !shouldAdd;\n\t            case 'undefined':\n\t                if (set._items[type]) {\n\t                    return !shouldAdd;\n\t                } else {\n\t                    if (shouldAdd) {\n\t                        set._items[type] = true;\n\t                    }\n\t                    return shouldAdd;\n\t                }\n\t            case 'object':\n\t                if (item === null) {\n\t                    if (!set._items['null']) {\n\t                        if (shouldAdd) {\n\t                            set._items['null'] = true;\n\t                        }\n\t                        return shouldAdd;\n\t                    }\n\t                    return !shouldAdd;\n\t                }\n\t            /* falls through */\n\t            default:\n\t                // reduce the search size of heterogeneous sets by creating buckets\n\t                // for each type.\n\t                type = Object.prototype.toString.call(item);\n\t                if (!(type in set._items)) {\n\t                    if (shouldAdd) {\n\t                        set._items[type] = [item];\n\t                    }\n\t                    return shouldAdd;\n\t                }\n\t                // scan through all previously applied items\n\t                if (!_contains(item, set._items[type])) {\n\t                    if (shouldAdd) {\n\t                        set._items[type].push(item);\n\t                    }\n\t                    return shouldAdd;\n\t                }\n\t                return !shouldAdd;\n\t            }\n\t        }\n\t        return _Set;\n\t    }();\n\t\n\t    /**\n\t     * A function wrapping calls to the two functions in an `&&` operation,\n\t     * returning the result of the first function if it is false-y and the result\n\t     * of the second function otherwise. Note that this is short-circuited,\n\t     * meaning that the second function will not be invoked if the first returns a\n\t     * false-y value.\n\t     *\n\t     * In addition to functions, `R.both` also accepts any fantasy-land compatible\n\t     * applicative functor.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category Logic\n\t     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n\t     * @param {Function} f a predicate\n\t     * @param {Function} g another predicate\n\t     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n\t     * @see R.and\n\t     * @example\n\t     *\n\t     *      var gt10 = x => x > 10;\n\t     *      var even = x => x % 2 === 0;\n\t     *      var f = R.both(gt10, even);\n\t     *      f(100); //=> true\n\t     *      f(101); //=> false\n\t     */\n\t    var both = _curry2(function both(f, g) {\n\t        return _isFunction(f) ? function _both() {\n\t            return f.apply(this, arguments) && g.apply(this, arguments);\n\t        } : lift(and)(f, g);\n\t    });\n\t\n\t    /**\n\t     * Takes a function `f` and returns a function `g` such that:\n\t     *\n\t     *   - applying `g` to zero or more arguments will give __true__ if applying\n\t     *     the same arguments to `f` gives a logical __false__ value; and\n\t     *\n\t     *   - applying `g` to zero or more arguments will give __false__ if applying\n\t     *     the same arguments to `f` gives a logical __true__ value.\n\t     *\n\t     * `R.complement` will work on all other functors as well.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category Logic\n\t     * @sig (*... -> *) -> (*... -> Boolean)\n\t     * @param {Function} f\n\t     * @return {Function}\n\t     * @see R.not\n\t     * @example\n\t     *\n\t     *      var isEven = n => n % 2 === 0;\n\t     *      var isOdd = R.complement(isEven);\n\t     *      isOdd(21); //=> true\n\t     *      isOdd(42); //=> false\n\t     */\n\t    var complement = lift(not);\n\t\n\t    /**\n\t     * A function wrapping calls to the two functions in an `||` operation,\n\t     * returning the result of the first function if it is truth-y and the result\n\t     * of the second function otherwise. Note that this is short-circuited,\n\t     * meaning that the second function will not be invoked if the first returns a\n\t     * truth-y value.\n\t     *\n\t     * In addition to functions, `R.either` also accepts any fantasy-land compatible\n\t     * applicative functor.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category Logic\n\t     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n\t     * @param {Function} f a predicate\n\t     * @param {Function} g another predicate\n\t     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n\t     * @see R.or\n\t     * @example\n\t     *\n\t     *      var gt10 = x => x > 10;\n\t     *      var even = x => x % 2 === 0;\n\t     *      var f = R.either(gt10, even);\n\t     *      f(101); //=> true\n\t     *      f(8); //=> true\n\t     */\n\t    var either = _curry2(function either(f, g) {\n\t        return _isFunction(f) ? function _either() {\n\t            return f.apply(this, arguments) || g.apply(this, arguments);\n\t        } : lift(or)(f, g);\n\t    });\n\t\n\t    /**\n\t     * Turns a named method with a specified arity into a function that can be\n\t     * called directly supplied with arguments and a target object.\n\t     *\n\t     * The returned function is curried and accepts `arity + 1` parameters where\n\t     * the final parameter is the target object.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n\t     * @param {Number} arity Number of arguments the returned function should take\n\t     *        before the target object.\n\t     * @param {String} method Name of the method to call.\n\t     * @return {Function} A new curried function.\n\t     * @example\n\t     *\n\t     *      var sliceFrom = R.invoker(1, 'slice');\n\t     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n\t     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n\t     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n\t     */\n\t    var invoker = _curry2(function invoker(arity, method) {\n\t        return curryN(arity + 1, function () {\n\t            var target = arguments[arity];\n\t            if (target != null && is(Function, target[method])) {\n\t                return target[method].apply(target, _slice(arguments, 0, arity));\n\t            }\n\t            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Returns a string made by inserting the `separator` between each element and\n\t     * concatenating all the elements into a single string.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig String -> [a] -> String\n\t     * @param {Number|String} separator The string used to separate the elements.\n\t     * @param {Array} xs The elements to join into a string.\n\t     * @return {String} str The string made by concatenating `xs` with `separator`.\n\t     * @see R.split\n\t     * @example\n\t     *\n\t     *      var spacer = R.join(' ');\n\t     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n\t     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n\t     */\n\t    var join = invoker(1, 'join');\n\t\n\t    /**\n\t     * Creates a new function that, when invoked, caches the result of calling `fn`\n\t     * for a given argument set and returns the result. Subsequent calls to the\n\t     * memoized `fn` with the same argument set will not result in an additional\n\t     * call to `fn`; instead, the cached result for that set of arguments will be\n\t     * returned.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Function\n\t     * @sig (*... -> a) -> (*... -> a)\n\t     * @param {Function} fn The function to memoize.\n\t     * @return {Function} Memoized version of `fn`.\n\t     * @example\n\t     *\n\t     *      var count = 0;\n\t     *      var factorial = R.memoize(n => {\n\t     *        count += 1;\n\t     *        return R.product(R.range(1, n + 1));\n\t     *      });\n\t     *      factorial(5); //=> 120\n\t     *      factorial(5); //=> 120\n\t     *      factorial(5); //=> 120\n\t     *      count; //=> 1\n\t     */\n\t    var memoize = _curry1(function memoize(fn) {\n\t        var cache = {};\n\t        return _arity(fn.length, function () {\n\t            var key = toString(arguments);\n\t            if (!_has(key, cache)) {\n\t                cache[key] = fn.apply(this, arguments);\n\t            }\n\t            return cache[key];\n\t        });\n\t    });\n\t\n\t    /**\n\t     * Splits a string into an array of strings based on the given\n\t     * separator.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category String\n\t     * @sig (String | RegExp) -> String -> [String]\n\t     * @param {String|RegExp} sep The pattern.\n\t     * @param {String} str The string to separate into an array.\n\t     * @return {Array} The array of strings from `str` separated by `str`.\n\t     * @see R.join\n\t     * @example\n\t     *\n\t     *      var pathComponents = R.split('/');\n\t     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n\t     *\n\t     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n\t     */\n\t    var split = invoker(1, 'split');\n\t\n\t    /**\n\t     * Determines whether a given string matches a given regular expression.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.12.0\n\t     * @category String\n\t     * @sig RegExp -> String -> Boolean\n\t     * @param {RegExp} pattern\n\t     * @param {String} str\n\t     * @return {Boolean}\n\t     * @see R.match\n\t     * @example\n\t     *\n\t     *      R.test(/^x/, 'xyz'); //=> true\n\t     *      R.test(/^y/, 'xyz'); //=> false\n\t     */\n\t    var test = _curry2(function test(pattern, str) {\n\t        if (!_isRegExp(pattern)) {\n\t            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n\t        }\n\t        return _cloneRegExp(pattern).test(str);\n\t    });\n\t\n\t    /**\n\t     * The lower case version of a string.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category String\n\t     * @sig String -> String\n\t     * @param {String} str The string to lower case.\n\t     * @return {String} The lower case version of `str`.\n\t     * @see R.toUpper\n\t     * @example\n\t     *\n\t     *      R.toLower('XYZ'); //=> 'xyz'\n\t     */\n\t    var toLower = invoker(0, 'toLowerCase');\n\t\n\t    /**\n\t     * The upper case version of a string.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.9.0\n\t     * @category String\n\t     * @sig String -> String\n\t     * @param {String} str The string to upper case.\n\t     * @return {String} The upper case version of `str`.\n\t     * @see R.toLower\n\t     * @example\n\t     *\n\t     *      R.toUpper('abc'); //=> 'ABC'\n\t     */\n\t    var toUpper = invoker(0, 'toUpperCase');\n\t\n\t    /**\n\t     * Returns a new list containing only one copy of each element in the original\n\t     * list, based upon the value returned by applying the supplied function to\n\t     * each list element. Prefers the first item if the supplied function produces\n\t     * the same value on two items. `R.equals` is used for comparison.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.16.0\n\t     * @category List\n\t     * @sig (a -> b) -> [a] -> [a]\n\t     * @param {Function} fn A function used to produce a value to use during comparisons.\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} The list of unique items.\n\t     * @example\n\t     *\n\t     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n\t     */\n\t    var uniqBy = _curry2(function uniqBy(fn, list) {\n\t        var set = new _Set();\n\t        var result = [];\n\t        var idx = 0;\n\t        var appliedItem, item;\n\t        while (idx < list.length) {\n\t            item = list[idx];\n\t            appliedItem = fn(item);\n\t            if (set.add(appliedItem)) {\n\t                result.push(item);\n\t            }\n\t            idx += 1;\n\t        }\n\t        return result;\n\t    });\n\t\n\t    /**\n\t     * Returns the result of concatenating the given lists or strings.\n\t     *\n\t     * Dispatches to the `concat` method of the first argument, if present.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [a] -> [a]\n\t     * @sig String -> String -> String\n\t     * @param {Array|String} a\n\t     * @param {Array|String} b\n\t     * @return {Array|String}\n\t     *\n\t     * @example\n\t     *\n\t     *      R.concat([], []); //=> []\n\t     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n\t     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n\t     */\n\t    var concat = flip(invoker(1, 'concat'));\n\t\n\t    /**\n\t     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n\t     * second list, but not both.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Relation\n\t     * @sig [*] -> [*] -> [*]\n\t     * @param {Array} list1 The first list.\n\t     * @param {Array} list2 The second list.\n\t     * @return {Array} The elements in `list1` or `list2`, but not both.\n\t     * @see R.symmetricDifferenceWith\n\t     * @example\n\t     *\n\t     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n\t     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n\t     */\n\t    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n\t        return concat(difference(list1, list2), difference(list2, list1));\n\t    });\n\t\n\t    /**\n\t     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n\t     * second list, but not both. Duplication is determined according to the value\n\t     * returned by applying the supplied predicate to two list elements.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.19.0\n\t     * @category Relation\n\t     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n\t     * @param {Function} pred A predicate used to test whether two items are equal.\n\t     * @param {Array} list1 The first list.\n\t     * @param {Array} list2 The second list.\n\t     * @return {Array} The elements in `list1` or `list2`, but not both.\n\t     * @see R.symmetricDifference\n\t     * @example\n\t     *\n\t     *      var eqA = R.eqBy(R.prop('a'));\n\t     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n\t     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n\t     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n\t     */\n\t    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n\t        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n\t    });\n\t\n\t    /**\n\t     * Returns a new list containing only one copy of each element in the original\n\t     * list. `R.equals` is used to determine equality.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category List\n\t     * @sig [a] -> [a]\n\t     * @param {Array} list The array to consider.\n\t     * @return {Array} The list of unique items.\n\t     * @example\n\t     *\n\t     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n\t     *      R.uniq([1, '1']);     //=> [1, '1']\n\t     *      R.uniq([[42], [42]]); //=> [[42]]\n\t     */\n\t    var uniq = uniqBy(identity);\n\t\n\t    /**\n\t     * Combines two lists into a set (i.e. no duplicates) composed of those\n\t     * elements common to both lists.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig [*] -> [*] -> [*]\n\t     * @param {Array} list1 The first list.\n\t     * @param {Array} list2 The second list.\n\t     * @return {Array} The list of elements found in both `list1` and `list2`.\n\t     * @see R.intersectionWith\n\t     * @example\n\t     *\n\t     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n\t     */\n\t    var intersection = _curry2(function intersection(list1, list2) {\n\t        var lookupList, filteredList;\n\t        if (list1.length > list2.length) {\n\t            lookupList = list1;\n\t            filteredList = list2;\n\t        } else {\n\t            lookupList = list2;\n\t            filteredList = list1;\n\t        }\n\t        return uniq(_filter(flip(_contains)(lookupList), filteredList));\n\t    });\n\t\n\t    /**\n\t     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n\t     * of each list.\n\t     *\n\t     * @func\n\t     * @memberOf R\n\t     * @since v0.1.0\n\t     * @category Relation\n\t     * @sig [*] -> [*] -> [*]\n\t     * @param {Array} as The first list.\n\t     * @param {Array} bs The second list.\n\t     * @return {Array} The first and second lists concatenated, with\n\t     *         duplicates removed.\n\t     * @example\n\t     *\n\t     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n\t     */\n\t    var union = _curry2(compose(uniq, _concat));\n\t\n\t    var R = {\n\t        F: F,\n\t        T: T,\n\t        __: __,\n\t        add: add,\n\t        addIndex: addIndex,\n\t        adjust: adjust,\n\t        all: all,\n\t        allPass: allPass,\n\t        allUniq: allUniq,\n\t        always: always,\n\t        and: and,\n\t        any: any,\n\t        anyPass: anyPass,\n\t        ap: ap,\n\t        aperture: aperture,\n\t        append: append,\n\t        apply: apply,\n\t        applySpec: applySpec,\n\t        assoc: assoc,\n\t        assocPath: assocPath,\n\t        binary: binary,\n\t        bind: bind,\n\t        both: both,\n\t        call: call,\n\t        chain: chain,\n\t        clamp: clamp,\n\t        clone: clone,\n\t        comparator: comparator,\n\t        complement: complement,\n\t        compose: compose,\n\t        composeK: composeK,\n\t        composeP: composeP,\n\t        concat: concat,\n\t        cond: cond,\n\t        construct: construct,\n\t        constructN: constructN,\n\t        contains: contains,\n\t        converge: converge,\n\t        countBy: countBy,\n\t        curry: curry,\n\t        curryN: curryN,\n\t        dec: dec,\n\t        defaultTo: defaultTo,\n\t        difference: difference,\n\t        differenceWith: differenceWith,\n\t        dissoc: dissoc,\n\t        dissocPath: dissocPath,\n\t        divide: divide,\n\t        drop: drop,\n\t        dropLast: dropLast,\n\t        dropLastWhile: dropLastWhile,\n\t        dropRepeats: dropRepeats,\n\t        dropRepeatsWith: dropRepeatsWith,\n\t        dropWhile: dropWhile,\n\t        either: either,\n\t        empty: empty,\n\t        eqBy: eqBy,\n\t        eqProps: eqProps,\n\t        equals: equals,\n\t        evolve: evolve,\n\t        filter: filter,\n\t        find: find,\n\t        findIndex: findIndex,\n\t        findLast: findLast,\n\t        findLastIndex: findLastIndex,\n\t        flatten: flatten,\n\t        flip: flip,\n\t        forEach: forEach,\n\t        fromPairs: fromPairs,\n\t        groupBy: groupBy,\n\t        gt: gt,\n\t        gte: gte,\n\t        has: has,\n\t        hasIn: hasIn,\n\t        head: head,\n\t        identical: identical,\n\t        identity: identity,\n\t        ifElse: ifElse,\n\t        inc: inc,\n\t        indexBy: indexBy,\n\t        indexOf: indexOf,\n\t        init: init,\n\t        insert: insert,\n\t        insertAll: insertAll,\n\t        intersection: intersection,\n\t        intersectionWith: intersectionWith,\n\t        intersperse: intersperse,\n\t        into: into,\n\t        invert: invert,\n\t        invertObj: invertObj,\n\t        invoker: invoker,\n\t        is: is,\n\t        isArrayLike: isArrayLike,\n\t        isEmpty: isEmpty,\n\t        isNil: isNil,\n\t        join: join,\n\t        juxt: juxt,\n\t        keys: keys,\n\t        keysIn: keysIn,\n\t        last: last,\n\t        lastIndexOf: lastIndexOf,\n\t        length: length,\n\t        lens: lens,\n\t        lensIndex: lensIndex,\n\t        lensPath: lensPath,\n\t        lensProp: lensProp,\n\t        lift: lift,\n\t        liftN: liftN,\n\t        lt: lt,\n\t        lte: lte,\n\t        map: map,\n\t        mapAccum: mapAccum,\n\t        mapAccumRight: mapAccumRight,\n\t        mapObjIndexed: mapObjIndexed,\n\t        match: match,\n\t        mathMod: mathMod,\n\t        max: max,\n\t        maxBy: maxBy,\n\t        mean: mean,\n\t        median: median,\n\t        memoize: memoize,\n\t        merge: merge,\n\t        mergeAll: mergeAll,\n\t        mergeWith: mergeWith,\n\t        mergeWithKey: mergeWithKey,\n\t        min: min,\n\t        minBy: minBy,\n\t        modulo: modulo,\n\t        multiply: multiply,\n\t        nAry: nAry,\n\t        negate: negate,\n\t        none: none,\n\t        not: not,\n\t        nth: nth,\n\t        nthArg: nthArg,\n\t        objOf: objOf,\n\t        of: of,\n\t        omit: omit,\n\t        once: once,\n\t        or: or,\n\t        over: over,\n\t        pair: pair,\n\t        partial: partial,\n\t        partialRight: partialRight,\n\t        partition: partition,\n\t        path: path,\n\t        pathEq: pathEq,\n\t        pathOr: pathOr,\n\t        pathSatisfies: pathSatisfies,\n\t        pick: pick,\n\t        pickAll: pickAll,\n\t        pickBy: pickBy,\n\t        pipe: pipe,\n\t        pipeK: pipeK,\n\t        pipeP: pipeP,\n\t        pluck: pluck,\n\t        prepend: prepend,\n\t        product: product,\n\t        project: project,\n\t        prop: prop,\n\t        propEq: propEq,\n\t        propIs: propIs,\n\t        propOr: propOr,\n\t        propSatisfies: propSatisfies,\n\t        props: props,\n\t        range: range,\n\t        reduce: reduce,\n\t        reduceBy: reduceBy,\n\t        reduceRight: reduceRight,\n\t        reduced: reduced,\n\t        reject: reject,\n\t        remove: remove,\n\t        repeat: repeat,\n\t        replace: replace,\n\t        reverse: reverse,\n\t        scan: scan,\n\t        sequence: sequence,\n\t        set: set,\n\t        slice: slice,\n\t        sort: sort,\n\t        sortBy: sortBy,\n\t        split: split,\n\t        splitAt: splitAt,\n\t        splitEvery: splitEvery,\n\t        splitWhen: splitWhen,\n\t        subtract: subtract,\n\t        sum: sum,\n\t        symmetricDifference: symmetricDifference,\n\t        symmetricDifferenceWith: symmetricDifferenceWith,\n\t        tail: tail,\n\t        take: take,\n\t        takeLast: takeLast,\n\t        takeLastWhile: takeLastWhile,\n\t        takeWhile: takeWhile,\n\t        tap: tap,\n\t        test: test,\n\t        times: times,\n\t        toLower: toLower,\n\t        toPairs: toPairs,\n\t        toPairsIn: toPairsIn,\n\t        toString: toString,\n\t        toUpper: toUpper,\n\t        transduce: transduce,\n\t        transpose: transpose,\n\t        traverse: traverse,\n\t        trim: trim,\n\t        tryCatch: tryCatch,\n\t        type: type,\n\t        unapply: unapply,\n\t        unary: unary,\n\t        uncurryN: uncurryN,\n\t        unfold: unfold,\n\t        union: union,\n\t        unionWith: unionWith,\n\t        uniq: uniq,\n\t        uniqBy: uniqBy,\n\t        uniqWith: uniqWith,\n\t        unless: unless,\n\t        unnest: unnest,\n\t        until: until,\n\t        update: update,\n\t        useWith: useWith,\n\t        values: values,\n\t        valuesIn: valuesIn,\n\t        view: view,\n\t        when: when,\n\t        where: where,\n\t        whereEq: whereEq,\n\t        without: without,\n\t        wrap: wrap,\n\t        xprod: xprod,\n\t        zip: zip,\n\t        zipObj: zipObj,\n\t        zipWith: zipWith\n\t    };\n\t  /* eslint-env amd */\n\t\n\t  /* TEST_ENTRY_POINT */\n\t\n\t  if (true) {\n\t    module.exports = R;\n\t  } else if (typeof define === 'function' && define.amd) {\n\t    define(function() { return R; });\n\t  } else {\n\t    this.R = R;\n\t  }\n\t\n\t}.call(this));\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** metro.worker.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3e8d00af32e7454e0071\n **/","import metropolisHastings from \"./metropolis.js\";\nimport drawContour from \"./drawContour.js\";\nimport ChainDist from \"./ChainDist.js\";\n\nfunction transpose(m){return zeroFill(m.reduce(function(m,r){return Math.max(m,r.length)},0)).map(function(r,i){return zeroFill(m.length).map(function(c,j){return m[j][i]})})}function zeroFill(n){return new Array(n+1).join(\"0\").split(\"\").map(Number)}\n\nexport default function genMetroDist(iterations, xDomain, yDomain, width, numPoints, variance, acceptFunc) {\n    // Generate data \n    const chain = metropolisHastings(iterations,variance,acceptFunc);\n    return transpose(ChainDist(xDomain, yDomain, numPoints, chain));\n}\n\nonmessage = function(e) {\n  let acceptPercent = 0; \n  let setPercent = percent => acceptPercent = percent;\n  const chainDist = genMetroDist(...e.data, setPercent);\n  postMessage([chainDist, acceptPercent]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/genMetroDist.js\n **/","import { drop, compose, path, forEach, prop, map, repeat, curry, find, last } from \"ramda\";\nimport interpolate from \"./interpolate\";\n\n\nconst findBucket = curry((propName, bucketList, num) => {\n  const getVal = prop(propName),\n        maxVal = getVal(last(bucketList)),\n        minVal = getVal(bucketList[0]);\n\n  if (num >= maxVal) return undefined;\n  if (num <= minVal) return undefined;\n\n  var length = bucketList.length;\n  var curr = 0;\n  var start = 0;\n  var end = length;\n  var middle = 0;\n\n  while (true) {\n    if (start > end) return undefined;\n    middle = Math.round((start + end)/2);\n    if (middle + 1 >= length) return undefined;\n    const currVal = getVal(bucketList[middle]);\n    const nextVal = getVal(bucketList[middle+1]);\n    if (num >= currVal && num <= nextVal) {\n      return bucketList[middle];\n    }\n    if (num < currVal)  end = middle - 1;\n    if (num > currVal)  start = middle + 1;\n  }\n  return undefined;\n});\n\nconst xBucketToYs = compose(\n    map(prop(\"bucket\")),\n    prop(\"ys\")\n  );\nconst bucketsToPlotData = map(xBucketToYs);\n\n\nexport default function ChainDist(xDomain, yDomain, numPoints, chain) {\n  const xPoints = interpolate(numPoints, ...xDomain),\n        yPoints = interpolate(numPoints, ...yDomain);\n\n  let buckets = map(x => ({\n        x: x,\n        ys: map(y => ({\n          y: y, bucket: 0, xy: [x,y]\n          }),\n          yPoints)\n      })\n      ,xPoints\n  );\n\n  const findX = findBucket(\"x\", buckets);\n  const findYInBucket = findBucket(\"y\");\n\n  forEach(xy => {\n    const xBucket = findX(xy[0]);\n    if (!xBucket) return;\n    const xyBucket = findYInBucket(xBucket.ys, xy[1]);\n    if (!xyBucket) return;\n    xyBucket.bucket += 1;\n  }, drop(chain.length * 0.1, chain));\n\n  return bucketsToPlotData(buckets);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChainDist.js\n **/","var MarchingSquaresJS = (function (my) {\n\n  var defaultSettings = {\n    successCallback:  null,\n    progressCallback: null,\n    verbose:          false,\n    polygons:         false\n  };\n\n  var settings = {};\n\n  /*\n    Compute isobands(s) of a scalar 2D field given a certain\n    threshold and a bandwidth by applying the Marching Squares\n    Algorithm. The function returns a list of path coordinates\n    either for individual polygons within each grid cell, or the\n    outline of connected polygons.\n  */\n  my.IsoBands = function(data, minV, bandwidth, options){\n    /* process options */\n    options = options ? options : {};\n\n    var optionKeys = Object.keys(defaultSettings);\n\n    for(var i = 0; i < optionKeys.length; i++){\n      var key = optionKeys[i];\n      var val = options[key];\n      val = ((typeof val !== 'undefined') && (val !== null)) ? val : defaultSettings[key];\n\n      settings[key] = val;\n    }\n\n    if(settings.verbose)\n      console.log(\"computing isobands for [\" + minV + \":\" + (minV + bandwidth) + \"]\");\n\n    grid = computeBandGrid(data, minV, bandwidth);\n\n    if(settings.verbose){\n      if(settings.polygons){\n        console.log(\"returning single polygons for each grid cell\");\n      } else {\n        console.log(\"returning polygon paths for entire data grid\");\n      }\n    }\n\n    var ret;\n    if(settings.polygons){\n      ret = BandGrid2Areas(grid);\n    } else {\n      ret = BandGrid2AreaPaths(grid);\n    }\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret);\n\n    return ret;\n  };\n\n  /*\n    Thats all for the public interface, below follows the actual\n    implementation\n  */\n\n  /* Some private variables */\n  var Node0 = 64,\n      Node1 = 16,\n      Node2 = 4,\n      Node3 = 1;\n\n  /*  For isoBands, each square is defined by the three states\n      of its corner points. However, since computers use power-2\n      values, we use 2bits per trit, i.e.:\n\n      00 ... below minV\n      01 ... between minV and maxV\n      10 ... above maxV\n\n      Hence we map the 4-trit configurations as follows:\n\n      0000 => 0\n      0001 => 1\n      0002 => 2\n      0010 => 4\n      0011 => 5\n      0012 => 6\n      0020 => 8\n      0021 => 9\n      0022 => 10\n      0100 => 16\n      0101 => 17\n      0102 => 18\n      0110 => 20\n      0111 => 21\n      0112 => 22\n      0120 => 24\n      0121 => 25\n      0122 => 26\n      0200 => 32\n      0201 => 33\n      0202 => 34\n      0210 => 36\n      0211 => 37\n      0212 => 38\n      0220 => 40\n      0221 => 41\n      0222 => 42\n      1000 => 64\n      1001 => 65\n      1002 => 66\n      1010 => 68\n      1011 => 69\n      1012 => 70\n      1020 => 72\n      1021 => 73\n      1022 => 74\n      1100 => 80\n      1101 => 81\n      1102 => 82\n      1110 => 84\n      1111 => 85\n      1112 => 86\n      1120 => 88\n      1121 => 89\n      1122 => 90\n      1200 => 96\n      1201 => 97\n      1202 => 98\n      1210 => 100\n      1211 => 101\n      1212 => 102\n      1220 => 104\n      1221 => 105\n      1222 => 106\n      2000 => 128\n      2001 => 129\n      2002 => 130\n      2010 => 132\n      2011 => 133\n      2012 => 134\n      2020 => 136\n      2021 => 137\n      2022 => 138\n      2100 => 144\n      2101 => 145\n      2102 => 146\n      2110 => 148\n      2111 => 149\n      2112 => 150\n      2120 => 152\n      2121 => 153\n      2122 => 154\n      2200 => 160\n      2201 => 161\n      2202 => 162\n      2210 => 164\n      2211 => 165\n      2212 => 166\n      2220 => 168\n      2221 => 169\n      2222 => 170\n  */\n\n  /*\n    The look-up tables for tracing back the contour path\n    of isoBands\n  */\n\n  var isoBandNextXTL = [];\n  var isoBandNextYTL = [];\n  var isoBandNextOTL = [];\n\n  var isoBandNextXTR = [];\n  var isoBandNextYTR = [];\n  var isoBandNextOTR = [];\n\n  var isoBandNextXRT = [];\n  var isoBandNextYRT = [];\n  var isoBandNextORT = [];\n\n  var isoBandNextXRB = [];\n  var isoBandNextYRB = [];\n  var isoBandNextORB = [];\n\n  var isoBandNextXBL = [];\n  var isoBandNextYBL = [];\n  var isoBandNextOBL = [];\n\n  var isoBandNextXBR = [];\n  var isoBandNextYBR = [];\n  var isoBandNextOBR = [];\n\n  var isoBandNextXLT = [];\n  var isoBandNextYLT = [];\n  var isoBandNextOLT = [];\n\n  var isoBandNextXLB = [];\n  var isoBandNextYLB = [];\n  var isoBandNextOLB = [];\n\n  isoBandNextXRT[85] = isoBandNextXRB[85] = -1;\n  isoBandNextYRT[85] = isoBandNextYRB[85] = 0;\n  isoBandNextORT[85] = isoBandNextORB[85] = 1;\n  isoBandNextXLT[85] = isoBandNextXLB[85] = 1;\n  isoBandNextYLT[85] = isoBandNextYLB[85] = 0;\n  isoBandNextOLT[85] = isoBandNextOLB[85] = 1;\n\n  isoBandNextXTL[85] = isoBandNextXTR[85] = 0;\n  isoBandNextYTL[85] = isoBandNextYTR[85] = -1;\n  isoBandNextOTL[85] = isoBandNextOBL[85] = 0;\n  isoBandNextXBR[85] = isoBandNextXBL[85] = 0;\n  isoBandNextYBR[85] = isoBandNextYBL[85] = 1;\n  isoBandNextOTR[85] = isoBandNextOBR[85] = 1;\n\n\n  /* triangle cases */\n  isoBandNextXLB[1] = isoBandNextXLB[169] = 0;\n  isoBandNextYLB[1] = isoBandNextYLB[169] = -1;\n  isoBandNextOLB[1] = isoBandNextOLB[169] = 0;\n  isoBandNextXBL[1] = isoBandNextXBL[169] = -1;\n  isoBandNextYBL[1] = isoBandNextYBL[169] = 0;\n  isoBandNextOBL[1] = isoBandNextOBL[169] = 0;\n\n  isoBandNextXRB[4] = isoBandNextXRB[166] = 0;\n  isoBandNextYRB[4] = isoBandNextYRB[166] = -1;\n  isoBandNextORB[4] = isoBandNextORB[166] = 1;\n  isoBandNextXBR[4] = isoBandNextXBR[166] = 1;\n  isoBandNextYBR[4] = isoBandNextYBR[166] = 0;\n  isoBandNextOBR[4] = isoBandNextOBR[166] = 0;\n\n  isoBandNextXRT[16] = isoBandNextXRT[154] = 0;\n  isoBandNextYRT[16] = isoBandNextYRT[154] = 1;\n  isoBandNextORT[16] = isoBandNextORT[154] = 1;\n  isoBandNextXTR[16] = isoBandNextXTR[154] = 1;\n  isoBandNextYTR[16] = isoBandNextYTR[154] = 0;\n  isoBandNextOTR[16] = isoBandNextOTR[154] = 1;\n\n  isoBandNextXLT[64] = isoBandNextXLT[106] = 0;\n  isoBandNextYLT[64] = isoBandNextYLT[106] = 1;\n  isoBandNextOLT[64] = isoBandNextOLT[106] = 0;\n  isoBandNextXTL[64] = isoBandNextXTL[106] = -1;\n  isoBandNextYTL[64] = isoBandNextYTL[106] = 0;\n  isoBandNextOTL[64] = isoBandNextOTL[106] = 1;\n\n  /* single trapezoid cases */\n  isoBandNextXLT[2] = isoBandNextXLT[168] = 0;\n  isoBandNextYLT[2] = isoBandNextYLT[168] = -1;\n  isoBandNextOLT[2] = isoBandNextOLT[168] = 1;\n  isoBandNextXLB[2] = isoBandNextXLB[168] = 0;\n  isoBandNextYLB[2] = isoBandNextYLB[168] = -1;\n  isoBandNextOLB[2] = isoBandNextOLB[168] = 0;\n  isoBandNextXBL[2] = isoBandNextXBL[168] = -1;\n  isoBandNextYBL[2] = isoBandNextYBL[168] = 0;\n  isoBandNextOBL[2] = isoBandNextOBL[168] = 0;\n  isoBandNextXBR[2] = isoBandNextXBR[168] = -1;\n  isoBandNextYBR[2] = isoBandNextYBR[168] = 0;\n  isoBandNextOBR[2] = isoBandNextOBR[168] = 1;\n\n  isoBandNextXRT[8] = isoBandNextXRT[162] = 0;\n  isoBandNextYRT[8] = isoBandNextYRT[162] = -1;\n  isoBandNextORT[8] = isoBandNextORT[162] = 0;\n  isoBandNextXRB[8] = isoBandNextXRB[162] = 0;\n  isoBandNextYRB[8] = isoBandNextYRB[162] = -1;\n  isoBandNextORB[8] = isoBandNextORB[162] = 1;\n  isoBandNextXBL[8] = isoBandNextXBL[162] = 1;\n  isoBandNextYBL[8] = isoBandNextYBL[162] = 0;\n  isoBandNextOBL[8] = isoBandNextOBL[162] = 1;\n  isoBandNextXBR[8] = isoBandNextXBR[162] = 1;\n  isoBandNextYBR[8] = isoBandNextYBR[162] = 0;\n  isoBandNextOBR[8] = isoBandNextOBR[162] = 0;\n\n  isoBandNextXRT[32] = isoBandNextXRT[138] = 0;\n  isoBandNextYRT[32] = isoBandNextYRT[138] = 1;\n  isoBandNextORT[32] = isoBandNextORT[138] = 1;\n  isoBandNextXRB[32] = isoBandNextXRB[138] = 0;\n  isoBandNextYRB[32] = isoBandNextYRB[138] = 1;\n  isoBandNextORB[32] = isoBandNextORB[138] = 0;\n  isoBandNextXTL[32] = isoBandNextXTL[138] = 1;\n  isoBandNextYTL[32] = isoBandNextYTL[138] = 0;\n  isoBandNextOTL[32] = isoBandNextOTL[138] = 0;\n  isoBandNextXTR[32] = isoBandNextXTR[138] = 1;\n  isoBandNextYTR[32] = isoBandNextYTR[138] = 0;\n  isoBandNextOTR[32] = isoBandNextOTR[138] = 1;\n\n  isoBandNextXLB[128] = isoBandNextXLB[42] = 0;\n  isoBandNextYLB[128] = isoBandNextYLB[42] = 1;\n  isoBandNextOLB[128] = isoBandNextOLB[42] = 1;\n  isoBandNextXLT[128] = isoBandNextXLT[42] = 0;\n  isoBandNextYLT[128] = isoBandNextYLT[42] = 1;\n  isoBandNextOLT[128] = isoBandNextOLT[42] = 0;\n  isoBandNextXTL[128] = isoBandNextXTL[42] = -1;\n  isoBandNextYTL[128] = isoBandNextYTL[42] = 0;\n  isoBandNextOTL[128] = isoBandNextOTL[42] = 1;\n  isoBandNextXTR[128] = isoBandNextXTR[42] = -1;\n  isoBandNextYTR[128] = isoBandNextYTR[42] = 0;\n  isoBandNextOTR[128] = isoBandNextOTR[42] = 0;\n\n  /* single rectangle cases */\n  isoBandNextXRB[5] = isoBandNextXRB[165] = -1;\n  isoBandNextYRB[5] = isoBandNextYRB[165] = 0;\n  isoBandNextORB[5] = isoBandNextORB[165] = 0;\n  isoBandNextXLB[5] = isoBandNextXLB[165] = 1;\n  isoBandNextYLB[5] = isoBandNextYLB[165] = 0;\n  isoBandNextOLB[5] = isoBandNextOLB[165] = 0;\n\n  isoBandNextXBR[20] = isoBandNextXBR[150] = 0;\n  isoBandNextYBR[20] = isoBandNextYBR[150] = 1;\n  isoBandNextOBR[20] = isoBandNextOBR[150] = 1;\n  isoBandNextXTR[20] = isoBandNextXTR[150] = 0;\n  isoBandNextYTR[20] = isoBandNextYTR[150] = -1;\n  isoBandNextOTR[20] = isoBandNextOTR[150] = 1;\n\n  isoBandNextXRT[80] = isoBandNextXRT[90] = -1;\n  isoBandNextYRT[80] = isoBandNextYRT[90] = 0;\n  isoBandNextORT[80] = isoBandNextORT[90] = 1;\n  isoBandNextXLT[80] = isoBandNextXLT[90] = 1;\n  isoBandNextYLT[80] = isoBandNextYLT[90] = 0;\n  isoBandNextOLT[80] = isoBandNextOLT[90] = 1;\n\n  isoBandNextXBL[65] = isoBandNextXBL[105] = 0;\n  isoBandNextYBL[65] = isoBandNextYBL[105] = 1;\n  isoBandNextOBL[65] = isoBandNextOBL[105] = 0;\n  isoBandNextXTL[65] = isoBandNextXTL[105] = 0;\n  isoBandNextYTL[65] = isoBandNextYTL[105] = -1;\n  isoBandNextOTL[65] = isoBandNextOTL[105] = 0;\n\n  isoBandNextXRT[160] = isoBandNextXRT[10] = -1;\n  isoBandNextYRT[160] = isoBandNextYRT[10] = 0;\n  isoBandNextORT[160] = isoBandNextORT[10] = 1;\n  isoBandNextXRB[160] = isoBandNextXRB[10] = -1;\n  isoBandNextYRB[160] = isoBandNextYRB[10] = 0;\n  isoBandNextORB[160] = isoBandNextORB[10] = 0;\n  isoBandNextXLB[160] = isoBandNextXLB[10] = 1;\n  isoBandNextYLB[160] = isoBandNextYLB[10] = 0;\n  isoBandNextOLB[160] = isoBandNextOLB[10] = 0;\n  isoBandNextXLT[160] = isoBandNextXLT[10] = 1;\n  isoBandNextYLT[160] = isoBandNextYLT[10] = 0;\n  isoBandNextOLT[160] = isoBandNextOLT[10] = 1;\n\n  isoBandNextXBR[130] = isoBandNextXBR[40] = 0;\n  isoBandNextYBR[130] = isoBandNextYBR[40] = 1;\n  isoBandNextOBR[130] = isoBandNextOBR[40] = 1;\n  isoBandNextXBL[130] = isoBandNextXBL[40] = 0;\n  isoBandNextYBL[130] = isoBandNextYBL[40] = 1;\n  isoBandNextOBL[130] = isoBandNextOBL[40] = 0;\n  isoBandNextXTL[130] = isoBandNextXTL[40] = 0;\n  isoBandNextYTL[130] = isoBandNextYTL[40] = -1;\n  isoBandNextOTL[130] = isoBandNextOTL[40] = 0;\n  isoBandNextXTR[130] = isoBandNextXTR[40] = 0;\n  isoBandNextYTR[130] = isoBandNextYTR[40] = -1;\n  isoBandNextOTR[130] = isoBandNextOTR[40] = 1;\n\n  /* single hexagon cases */\n  isoBandNextXRB[37] = isoBandNextXRB[133] = 0;\n  isoBandNextYRB[37] = isoBandNextYRB[133] = 1;\n  isoBandNextORB[37] = isoBandNextORB[133] = 1;\n  isoBandNextXLB[37] = isoBandNextXLB[133] = 0;\n  isoBandNextYLB[37] = isoBandNextYLB[133] = 1;\n  isoBandNextOLB[37] = isoBandNextOLB[133] = 0;\n  isoBandNextXTL[37] = isoBandNextXTL[133] = -1;\n  isoBandNextYTL[37] = isoBandNextYTL[133] = 0;\n  isoBandNextOTL[37] = isoBandNextOTL[133] = 0;\n  isoBandNextXTR[37] = isoBandNextXTR[133] = 1;\n  isoBandNextYTR[37] = isoBandNextYTR[133] = 0;\n  isoBandNextOTR[37] = isoBandNextOTR[133] = 0;\n\n  isoBandNextXBR[148] = isoBandNextXBR[22] = -1;\n  isoBandNextYBR[148] = isoBandNextYBR[22] = 0;\n  isoBandNextOBR[148] = isoBandNextOBR[22] = 0;\n  isoBandNextXLB[148] = isoBandNextXLB[22] = 0;\n  isoBandNextYLB[148] = isoBandNextYLB[22] = -1;\n  isoBandNextOLB[148] = isoBandNextOLB[22] = 1;\n  isoBandNextXLT[148] = isoBandNextXLT[22] = 0;\n  isoBandNextYLT[148] = isoBandNextYLT[22] = 1;\n  isoBandNextOLT[148] = isoBandNextOLT[22] = 1;\n  isoBandNextXTR[148] = isoBandNextXTR[22] = -1;\n  isoBandNextYTR[148] = isoBandNextYTR[22] = 0;\n  isoBandNextOTR[148] = isoBandNextOTR[22] = 1;\n\n  isoBandNextXRT[82] = isoBandNextXRT[88] = 0;\n  isoBandNextYRT[82] = isoBandNextYRT[88] = -1;\n  isoBandNextORT[82] = isoBandNextORT[88] = 1;\n  isoBandNextXBR[82] = isoBandNextXBR[88] = 1;\n  isoBandNextYBR[82] = isoBandNextYBR[88] = 0;\n  isoBandNextOBR[82] = isoBandNextOBR[88] = 1;\n  isoBandNextXBL[82] = isoBandNextXBL[88] = -1;\n  isoBandNextYBL[82] = isoBandNextYBL[88] = 0;\n  isoBandNextOBL[82] = isoBandNextOBL[88] = 1;\n  isoBandNextXLT[82] = isoBandNextXLT[88] = 0;\n  isoBandNextYLT[82] = isoBandNextYLT[88] = -1;\n  isoBandNextOLT[82] = isoBandNextOLT[88] = 0;\n\n  isoBandNextXRT[73] = isoBandNextXRT[97] = 0;\n  isoBandNextYRT[73] = isoBandNextYRT[97] = 1;\n  isoBandNextORT[73] = isoBandNextORT[97] = 0;\n  isoBandNextXRB[73] = isoBandNextXRB[97] = 0;\n  isoBandNextYRB[73] = isoBandNextYRB[97] = -1;\n  isoBandNextORB[73] = isoBandNextORB[97] = 0;\n  isoBandNextXBL[73] = isoBandNextXBL[97] = 1;\n  isoBandNextYBL[73] = isoBandNextYBL[97] = 0;\n  isoBandNextOBL[73] = isoBandNextOBL[97] = 0;\n  isoBandNextXTL[73] = isoBandNextXTL[97] = 1;\n  isoBandNextYTL[73] = isoBandNextYTL[97] = 0;\n  isoBandNextOTL[73] = isoBandNextOTL[97] = 1;\n\n  isoBandNextXRT[145] = isoBandNextXRT[25] = 0;\n  isoBandNextYRT[145] = isoBandNextYRT[25] = -1;\n  isoBandNextORT[145] = isoBandNextORT[25] = 0;\n  isoBandNextXBL[145] = isoBandNextXBL[25] = 1;\n  isoBandNextYBL[145] = isoBandNextYBL[25] = 0;\n  isoBandNextOBL[145] = isoBandNextOBL[25] = 1;\n  isoBandNextXLB[145] = isoBandNextXLB[25] = 0;\n  isoBandNextYLB[145] = isoBandNextYLB[25] = 1;\n  isoBandNextOLB[145] = isoBandNextOLB[25] = 1;\n  isoBandNextXTR[145] = isoBandNextXTR[25] = -1;\n  isoBandNextYTR[145] = isoBandNextYTR[25] = 0;\n  isoBandNextOTR[145] = isoBandNextOTR[25] = 0;\n\n  isoBandNextXRB[70] = isoBandNextXRB[100] = 0;\n  isoBandNextYRB[70] = isoBandNextYRB[100] = 1;\n  isoBandNextORB[70] = isoBandNextORB[100] = 0;\n  isoBandNextXBR[70] = isoBandNextXBR[100] = -1;\n  isoBandNextYBR[70] = isoBandNextYBR[100] = 0;\n  isoBandNextOBR[70] = isoBandNextOBR[100] = 1;\n  isoBandNextXLT[70] = isoBandNextXLT[100] = 0;\n  isoBandNextYLT[70] = isoBandNextYLT[100] = -1;\n  isoBandNextOLT[70] = isoBandNextOLT[100] = 1;\n  isoBandNextXTL[70] = isoBandNextXTL[100] = 1;\n  isoBandNextYTL[70] = isoBandNextYTL[100] = 0;\n  isoBandNextOTL[70] = isoBandNextOTL[100] = 0;\n\n  /* single pentagon cases */\n  isoBandNextXRB[101] = isoBandNextXRB[69] = 0;\n  isoBandNextYRB[101] = isoBandNextYRB[69] = 1;\n  isoBandNextORB[101] = isoBandNextORB[69] = 0;\n  isoBandNextXTL[101] = isoBandNextXTL[69] = 1;\n  isoBandNextYTL[101] = isoBandNextYTL[69] = 0;\n  isoBandNextOTL[101] = isoBandNextOTL[69] = 0;\n\n  isoBandNextXLB[149] = isoBandNextXLB[21] = 0;\n  isoBandNextYLB[149] = isoBandNextYLB[21] = 1;\n  isoBandNextOLB[149] = isoBandNextOLB[21] = 1;\n  isoBandNextXTR[149] = isoBandNextXTR[21] = -1;\n  isoBandNextYTR[149] = isoBandNextYTR[21] = 0;\n  isoBandNextOTR[149] = isoBandNextOTR[21] = 0;\n\n  isoBandNextXBR[86] = isoBandNextXBR[84] = -1;\n  isoBandNextYBR[86] = isoBandNextYBR[84] = 0;\n  isoBandNextOBR[86] = isoBandNextOBR[84] = 1;\n  isoBandNextXLT[86] = isoBandNextXLT[84] = 0;\n  isoBandNextYLT[86] = isoBandNextYLT[84] = -1;\n  isoBandNextOLT[86] = isoBandNextOLT[84] = 1;\n\n  isoBandNextXRT[89] = isoBandNextXRT[81] = 0;\n  isoBandNextYRT[89] = isoBandNextYRT[81] = -1;\n  isoBandNextORT[89] = isoBandNextORT[81] = 0;\n  isoBandNextXBL[89] = isoBandNextXBL[81] = 1;\n  isoBandNextYBL[89] = isoBandNextYBL[81] = 0;\n  isoBandNextOBL[89] = isoBandNextOBL[81] = 1;\n\n  isoBandNextXRT[96] = isoBandNextXRT[74] = 0;\n  isoBandNextYRT[96] = isoBandNextYRT[74] = 1;\n  isoBandNextORT[96] = isoBandNextORT[74] = 0;\n  isoBandNextXRB[96] = isoBandNextXRB[74] = -1;\n  isoBandNextYRB[96] = isoBandNextYRB[74] = 0;\n  isoBandNextORB[96] = isoBandNextORB[74] = 1;\n  isoBandNextXLT[96] = isoBandNextXLT[74] = 1;\n  isoBandNextYLT[96] = isoBandNextYLT[74] = 0;\n  isoBandNextOLT[96] = isoBandNextOLT[74] = 0;\n  isoBandNextXTL[96] = isoBandNextXTL[74] = 1;\n  isoBandNextYTL[96] = isoBandNextYTL[74] = 0;\n  isoBandNextOTL[96] = isoBandNextOTL[74] = 1;\n\n  isoBandNextXRT[24] = isoBandNextXRT[146] = 0;\n  isoBandNextYRT[24] = isoBandNextYRT[146] = -1;\n  isoBandNextORT[24] = isoBandNextORT[146] = 1;\n  isoBandNextXBR[24] = isoBandNextXBR[146] = 1;\n  isoBandNextYBR[24] = isoBandNextYBR[146] = 0;\n  isoBandNextOBR[24] = isoBandNextOBR[146] = 1;\n  isoBandNextXBL[24] = isoBandNextXBL[146] = 0;\n  isoBandNextYBL[24] = isoBandNextYBL[146] = 1;\n  isoBandNextOBL[24] = isoBandNextOBL[146] = 1;\n  isoBandNextXTR[24] = isoBandNextXTR[146] = 0;\n  isoBandNextYTR[24] = isoBandNextYTR[146] = -1;\n  isoBandNextOTR[24] = isoBandNextOTR[146] = 0;\n\n  isoBandNextXRB[6] = isoBandNextXRB[164] = -1;\n  isoBandNextYRB[6] = isoBandNextYRB[164] = 0;\n  isoBandNextORB[6] = isoBandNextORB[164] = 1;\n  isoBandNextXBR[6] = isoBandNextXBR[164] = -1;\n  isoBandNextYBR[6] = isoBandNextYBR[164] = 0;\n  isoBandNextOBR[6] = isoBandNextOBR[164] = 0;\n  isoBandNextXLB[6] = isoBandNextXLB[164] = 0;\n  isoBandNextYLB[6] = isoBandNextYLB[164] = -1;\n  isoBandNextOLB[6] = isoBandNextOLB[164] = 1;\n  isoBandNextXLT[6] = isoBandNextXLT[164] = 1;\n  isoBandNextYLT[6] = isoBandNextYLT[164] = 0;\n  isoBandNextOLT[6] = isoBandNextOLT[164] = 0;\n\n  isoBandNextXBL[129] = isoBandNextXBL[41] = 0;\n  isoBandNextYBL[129] = isoBandNextYBL[41] = 1;\n  isoBandNextOBL[129] = isoBandNextOBL[41] = 1;\n  isoBandNextXLB[129] = isoBandNextXLB[41] = 0;\n  isoBandNextYLB[129] = isoBandNextYLB[41] = 1;\n  isoBandNextOLB[129] = isoBandNextOLB[41] = 0;\n  isoBandNextXTL[129] = isoBandNextXTL[41] = -1;\n  isoBandNextYTL[129] = isoBandNextYTL[41] = 0;\n  isoBandNextOTL[129] = isoBandNextOTL[41] = 0;\n  isoBandNextXTR[129] = isoBandNextXTR[41] = 0;\n  isoBandNextYTR[129] = isoBandNextYTR[41] = -1;\n  isoBandNextOTR[129] = isoBandNextOTR[41] = 0;\n\n  isoBandNextXBR[66] = isoBandNextXBR[104] = 0;\n  isoBandNextYBR[66] = isoBandNextYBR[104] = 1;\n  isoBandNextOBR[66] = isoBandNextOBR[104] = 0;\n  isoBandNextXBL[66] = isoBandNextXBL[104] = -1;\n  isoBandNextYBL[66] = isoBandNextYBL[104] = 0;\n  isoBandNextOBL[66] = isoBandNextOBL[104] = 1;\n  isoBandNextXLT[66] = isoBandNextXLT[104] = 0;\n  isoBandNextYLT[66] = isoBandNextYLT[104] = -1;\n  isoBandNextOLT[66] = isoBandNextOLT[104] = 0;\n  isoBandNextXTL[66] = isoBandNextXTL[104] = 0;\n  isoBandNextYTL[66] = isoBandNextYTL[104] = -1;\n  isoBandNextOTL[66] = isoBandNextOTL[104] = 1;\n\n  isoBandNextXRT[144] = isoBandNextXRT[26] = -1;\n  isoBandNextYRT[144] = isoBandNextYRT[26] = 0;\n  isoBandNextORT[144] = isoBandNextORT[26] = 0;\n  isoBandNextXLB[144] = isoBandNextXLB[26] = 1;\n  isoBandNextYLB[144] = isoBandNextYLB[26] = 0;\n  isoBandNextOLB[144] = isoBandNextOLB[26] = 1;\n  isoBandNextXLT[144] = isoBandNextXLT[26] = 0;\n  isoBandNextYLT[144] = isoBandNextYLT[26] = 1;\n  isoBandNextOLT[144] = isoBandNextOLT[26] = 1;\n  isoBandNextXTR[144] = isoBandNextXTR[26] = -1;\n  isoBandNextYTR[144] = isoBandNextYTR[26] = 0;\n  isoBandNextOTR[144] = isoBandNextOTR[26] = 1;\n\n  isoBandNextXRB[36] = isoBandNextXRB[134] = 0;\n  isoBandNextYRB[36] = isoBandNextYRB[134] = 1;\n  isoBandNextORB[36] = isoBandNextORB[134] = 1;\n  isoBandNextXBR[36] = isoBandNextXBR[134] = 0;\n  isoBandNextYBR[36] = isoBandNextYBR[134] = 1;\n  isoBandNextOBR[36] = isoBandNextOBR[134] = 0;\n  isoBandNextXTL[36] = isoBandNextXTL[134] = 0;\n  isoBandNextYTL[36] = isoBandNextYTL[134] = -1;\n  isoBandNextOTL[36] = isoBandNextOTL[134] = 1;\n  isoBandNextXTR[36] = isoBandNextXTR[134] = 1;\n  isoBandNextYTR[36] = isoBandNextYTR[134] = 0;\n  isoBandNextOTR[36] = isoBandNextOTR[134] = 0;\n\n  isoBandNextXRT[9] = isoBandNextXRT[161] = -1;\n  isoBandNextYRT[9] = isoBandNextYRT[161] = 0;\n  isoBandNextORT[9] = isoBandNextORT[161] = 0;\n  isoBandNextXRB[9] = isoBandNextXRB[161] = 0;\n  isoBandNextYRB[9] = isoBandNextYRB[161] = -1;\n  isoBandNextORB[9] = isoBandNextORB[161] = 0;\n  isoBandNextXBL[9] = isoBandNextXBL[161] = 1;\n  isoBandNextYBL[9] = isoBandNextYBL[161] = 0;\n  isoBandNextOBL[9] = isoBandNextOBL[161] = 0;\n  isoBandNextXLB[9] = isoBandNextXLB[161] = 1;\n  isoBandNextYLB[9] = isoBandNextYLB[161] = 0;\n  isoBandNextOLB[9] = isoBandNextOLB[161] = 1;\n\n  /* 8-sided cases */\n  isoBandNextXRT[136] = 0;\n  isoBandNextYRT[136] = 1;\n  isoBandNextORT[136] = 1;\n  isoBandNextXRB[136] = 0;\n  isoBandNextYRB[136] = 1;\n  isoBandNextORB[136] = 0;\n  isoBandNextXBR[136] = -1;\n  isoBandNextYBR[136] = 0;\n  isoBandNextOBR[136] = 1;\n  isoBandNextXBL[136] = -1;\n  isoBandNextYBL[136] = 0;\n  isoBandNextOBL[136] = 0;\n  isoBandNextXLB[136] = 0;\n  isoBandNextYLB[136] = -1;\n  isoBandNextOLB[136] = 0;\n  isoBandNextXLT[136] = 0;\n  isoBandNextYLT[136] = -1;\n  isoBandNextOLT[136] = 1;\n  isoBandNextXTL[136] = 1;\n  isoBandNextYTL[136] = 0;\n  isoBandNextOTL[136] = 0;\n  isoBandNextXTR[136] = 1;\n  isoBandNextYTR[136] = 0;\n  isoBandNextOTR[136] = 1;\n\n  isoBandNextXRT[34] = 0;\n  isoBandNextYRT[34] = -1;\n  isoBandNextORT[34] = 0;\n  isoBandNextXRB[34] = 0;\n  isoBandNextYRB[34] = -1;\n  isoBandNextORB[34] = 1;\n  isoBandNextXBR[34] = 1;\n  isoBandNextYBR[34] = 0;\n  isoBandNextOBR[34] = 0;\n  isoBandNextXBL[34] = 1;\n  isoBandNextYBL[34] = 0;\n  isoBandNextOBL[34] = 1;\n  isoBandNextXLB[34] = 0;\n  isoBandNextYLB[34] = 1;\n  isoBandNextOLB[34] = 1;\n  isoBandNextXLT[34] = 0;\n  isoBandNextYLT[34] = 1;\n  isoBandNextOLT[34] = 0;\n  isoBandNextXTL[34] = -1;\n  isoBandNextYTL[34] = 0;\n  isoBandNextOTL[34] = 1;\n  isoBandNextXTR[34] = -1;\n  isoBandNextYTR[34] = 0;\n  isoBandNextOTR[34] = 0;\n\n  isoBandNextXRT[35] = 0;\n  isoBandNextYRT[35] = 1;\n  isoBandNextORT[35] = 1;\n  isoBandNextXRB[35] = 0;\n  isoBandNextYRB[35] = -1;\n  isoBandNextORB[35] = 1;\n  isoBandNextXBR[35] = 1;\n  isoBandNextYBR[35] = 0;\n  isoBandNextOBR[35] = 0;\n  isoBandNextXBL[35] = -1;\n  isoBandNextYBL[35] = 0;\n  isoBandNextOBL[35] = 0;\n  isoBandNextXLB[35] = 0;\n  isoBandNextYLB[35] = -1;\n  isoBandNextOLB[35] = 0;\n  isoBandNextXLT[35] = 0;\n  isoBandNextYLT[35] = 1;\n  isoBandNextOLT[35] = 0;\n  isoBandNextXTL[35] = -1;\n  isoBandNextYTL[35] = 0;\n  isoBandNextOTL[35] = 1;\n  isoBandNextXTR[35] = 1;\n  isoBandNextYTR[35] = 0;\n  isoBandNextOTR[35] = 1;\n\n  /* 6-sided cases */\n  isoBandNextXRT[153] = 0;\n  isoBandNextYRT[153] = 1;\n  isoBandNextORT[153] = 1;\n  isoBandNextXBL[153] = -1;\n  isoBandNextYBL[153] = 0;\n  isoBandNextOBL[153] = 0;\n  isoBandNextXLB[153] = 0;\n  isoBandNextYLB[153] = -1;\n  isoBandNextOLB[153] = 0;\n  isoBandNextXTR[153] = 1;\n  isoBandNextYTR[153] = 0;\n  isoBandNextOTR[153] = 1;\n\n  isoBandNextXRB[102] = 0;\n  isoBandNextYRB[102] = -1;\n  isoBandNextORB[102] = 1;\n  isoBandNextXBR[102] = 1;\n  isoBandNextYBR[102] = 0;\n  isoBandNextOBR[102] = 0;\n  isoBandNextXLT[102] = 0;\n  isoBandNextYLT[102] = 1;\n  isoBandNextOLT[102] = 0;\n  isoBandNextXTL[102] = -1;\n  isoBandNextYTL[102] = 0;\n  isoBandNextOTL[102] = 1;\n\n  isoBandNextXRT[155] = 0;\n  isoBandNextYRT[155] = -1;\n  isoBandNextORT[155] = 0;\n  isoBandNextXBL[155] = 1;\n  isoBandNextYBL[155] = 0;\n  isoBandNextOBL[155] = 1;\n  isoBandNextXLB[155] = 0;\n  isoBandNextYLB[155] = 1;\n  isoBandNextOLB[155] = 1;\n  isoBandNextXTR[155] = -1;\n  isoBandNextYTR[155] = 0;\n  isoBandNextOTR[155] = 0;\n\n  isoBandNextXRB[103] = 0;\n  isoBandNextYRB[103] = 1;\n  isoBandNextORB[103] = 0;\n  isoBandNextXBR[103] = -1;\n  isoBandNextYBR[103] = 0;\n  isoBandNextOBR[103] = 1;\n  isoBandNextXLT[103] = 0;\n  isoBandNextYLT[103] = -1;\n  isoBandNextOLT[103] = 1;\n  isoBandNextXTL[103] = 1;\n  isoBandNextYTL[103] = 0;\n  isoBandNextOTL[103] = 0;\n\n  /* 7-sided cases */\n  isoBandNextXRT[152] = 0;\n  isoBandNextYRT[152] = 1;\n  isoBandNextORT[152] = 1;\n  isoBandNextXBR[152] = -1;\n  isoBandNextYBR[152] = 0;\n  isoBandNextOBR[152] = 1;\n  isoBandNextXBL[152] = -1;\n  isoBandNextYBL[152] = 0;\n  isoBandNextOBL[152] = 0;\n  isoBandNextXLB[152] = 0;\n  isoBandNextYLB[152] = -1;\n  isoBandNextOLB[152] = 0;\n  isoBandNextXLT[152] = 0;\n  isoBandNextYLT[152] = -1;\n  isoBandNextOLT[152] = 1;\n  isoBandNextXTR[152] = 1;\n  isoBandNextYTR[152] = 0;\n  isoBandNextOTR[152] = 1;\n\n  isoBandNextXRT[156] = 0;\n  isoBandNextYRT[156] = -1;\n  isoBandNextORT[156] = 1;\n  isoBandNextXBR[156] = 1;\n  isoBandNextYBR[156] = 0;\n  isoBandNextOBR[156] = 1;\n  isoBandNextXBL[156] = -1;\n  isoBandNextYBL[156] = 0;\n  isoBandNextOBL[156] = 0;\n  isoBandNextXLB[156] = 0;\n  isoBandNextYLB[156] = -1;\n  isoBandNextOLB[156] = 0;\n  isoBandNextXLT[156] = 0;\n  isoBandNextYLT[156] = 1;\n  isoBandNextOLT[156] = 1;\n  isoBandNextXTR[156] = -1;\n  isoBandNextYTR[156] = 0;\n  isoBandNextOTR[156] = 1;\n\n  isoBandNextXRT[137] = 0;\n  isoBandNextYRT[137] = 1;\n  isoBandNextORT[137] = 1;\n  isoBandNextXRB[137] = 0;\n  isoBandNextYRB[137] = 1;\n  isoBandNextORB[137] = 0;\n  isoBandNextXBL[137] = -1;\n  isoBandNextYBL[137] = 0;\n  isoBandNextOBL[137] = 0;\n  isoBandNextXLB[137] = 0;\n  isoBandNextYLB[137] = -1;\n  isoBandNextOLB[137] = 0;\n  isoBandNextXTL[137] = 1;\n  isoBandNextYTL[137] = 0;\n  isoBandNextOTL[137] = 0;\n  isoBandNextXTR[137] = 1;\n  isoBandNextYTR[137] = 0;\n  isoBandNextOTR[137] = 1;\n\n  isoBandNextXRT[139] = 0;\n  isoBandNextYRT[139] = 1;\n  isoBandNextORT[139] = 1;\n  isoBandNextXRB[139] = 0;\n  isoBandNextYRB[139] = -1;\n  isoBandNextORB[139] = 0;\n  isoBandNextXBL[139] = 1;\n  isoBandNextYBL[139] = 0;\n  isoBandNextOBL[139] = 0;\n  isoBandNextXLB[139] = 0;\n  isoBandNextYLB[139] = 1;\n  isoBandNextOLB[139] = 0;\n  isoBandNextXTL[139] = -1;\n  isoBandNextYTL[139] = 0;\n  isoBandNextOTL[139] = 0;\n  isoBandNextXTR[139] = 1;\n  isoBandNextYTR[139] = 0;\n  isoBandNextOTR[139] = 1;\n\n  isoBandNextXRT[98] = 0;\n  isoBandNextYRT[98] = -1;\n  isoBandNextORT[98] = 0;\n  isoBandNextXRB[98] = 0;\n  isoBandNextYRB[98] = -1;\n  isoBandNextORB[98] = 1;\n  isoBandNextXBR[98] = 1;\n  isoBandNextYBR[98] = 0;\n  isoBandNextOBR[98] = 0;\n  isoBandNextXBL[98] = 1;\n  isoBandNextYBL[98] = 0;\n  isoBandNextOBL[98] = 1;\n  isoBandNextXLT[98] = 0;\n  isoBandNextYLT[98] = 1;\n  isoBandNextOLT[98] = 0;\n  isoBandNextXTL[98] = -1;\n  isoBandNextYTL[98] = 0;\n  isoBandNextOTL[98] = 1;\n\n  isoBandNextXRT[99] = 0;\n  isoBandNextYRT[99] = 1;\n  isoBandNextORT[99] = 0;\n  isoBandNextXRB[99] = 0;\n  isoBandNextYRB[99] = -1;\n  isoBandNextORB[99] = 1;\n  isoBandNextXBR[99] = 1;\n  isoBandNextYBR[99] = 0;\n  isoBandNextOBR[99] = 0;\n  isoBandNextXBL[99] = -1;\n  isoBandNextYBL[99] = 0;\n  isoBandNextOBL[99] = 1;\n  isoBandNextXLT[99] = 0;\n  isoBandNextYLT[99] = -1;\n  isoBandNextOLT[99] = 0;\n  isoBandNextXTL[99] = 1;\n  isoBandNextYTL[99] = 0;\n  isoBandNextOTL[99] = 1;\n\n  isoBandNextXRB[38] = 0;\n  isoBandNextYRB[38] = -1;\n  isoBandNextORB[38] = 1;\n  isoBandNextXBR[38] = 1;\n  isoBandNextYBR[38] = 0;\n  isoBandNextOBR[38] = 0;\n  isoBandNextXLB[38] = 0;\n  isoBandNextYLB[38] = 1;\n  isoBandNextOLB[38] = 1;\n  isoBandNextXLT[38] = 0;\n  isoBandNextYLT[38] = 1;\n  isoBandNextOLT[38] = 0;\n  isoBandNextXTL[38] = -1;\n  isoBandNextYTL[38] = 0;\n  isoBandNextOTL[38] = 1;\n  isoBandNextXTR[38] = -1;\n  isoBandNextYTR[38] = 0;\n  isoBandNextOTR[38] = 0;\n\n  isoBandNextXRB[39] = 0;\n  isoBandNextYRB[39] = 1;\n  isoBandNextORB[39] = 1;\n  isoBandNextXBR[39] = -1;\n  isoBandNextYBR[39] = 0;\n  isoBandNextOBR[39] = 0;\n  isoBandNextXLB[39] = 0;\n  isoBandNextYLB[39] = -1;\n  isoBandNextOLB[39] = 1;\n  isoBandNextXLT[39] = 0;\n  isoBandNextYLT[39] = 1;\n  isoBandNextOLT[39] = 0;\n  isoBandNextXTL[39] = -1;\n  isoBandNextYTL[39] = 0;\n  isoBandNextOTL[39] = 1;\n  isoBandNextXTR[39] = 1;\n  isoBandNextYTR[39] = 0;\n  isoBandNextOTR[39] = 0;\n\n  /*\n    The lookup tables for edge number given the polygon\n    is entered at a specific location\n  */\n\n  var isoBandEdgeRT = [];\n  var isoBandEdgeRB = [];\n  var isoBandEdgeBR = [];\n  var isoBandEdgeBL = [];\n  var isoBandEdgeLB = [];\n  var isoBandEdgeLT = [];\n  var isoBandEdgeTL = [];\n  var isoBandEdgeTR = [];\n\n  /* triangle cases */\n  isoBandEdgeBL[1]    = isoBandEdgeLB[1]    = 18;\n  isoBandEdgeBL[169]  = isoBandEdgeLB[169]  = 18;\n  isoBandEdgeBR[4]    = isoBandEdgeRB[4]    = 12;\n  isoBandEdgeBR[166]  = isoBandEdgeRB[166]  = 12;\n  isoBandEdgeRT[16]   = isoBandEdgeTR[16]   = 4;\n  isoBandEdgeRT[154]  = isoBandEdgeTR[154]  = 4;\n  isoBandEdgeLT[64]   = isoBandEdgeTL[64]   = 22;\n  isoBandEdgeLT[106]  = isoBandEdgeTL[106]  = 22;\n\n  /* trapezoid cases */\n  isoBandEdgeBR[2]    = isoBandEdgeLT[2]    = 17;\n  isoBandEdgeBL[2]    = isoBandEdgeLB[2]    = 18;\n  isoBandEdgeBR[168]  = isoBandEdgeLT[168]  = 17;\n  isoBandEdgeBL[168]  = isoBandEdgeLB[168]  = 18;\n  isoBandEdgeRT[8]    = isoBandEdgeBL[8]    = 9;\n  isoBandEdgeRB[8]    = isoBandEdgeBR[8]    = 12;\n  isoBandEdgeRT[162]  = isoBandEdgeBL[162]  = 9;\n  isoBandEdgeRB[162]  = isoBandEdgeBR[162]  = 12;\n  isoBandEdgeRT[32]   = isoBandEdgeTR[32]   = 4;\n  isoBandEdgeRB[32]   = isoBandEdgeTL[32]   = 1;\n  isoBandEdgeRT[138]  = isoBandEdgeTR[138]  = 4;\n  isoBandEdgeRB[138]  = isoBandEdgeTL[138]  = 1;\n  isoBandEdgeLB[128]  = isoBandEdgeTR[128]  = 21;\n  isoBandEdgeLT[128]  = isoBandEdgeTL[128]  = 22;\n  isoBandEdgeLB[42]   = isoBandEdgeTR[42]   = 21;\n  isoBandEdgeLT[42]   = isoBandEdgeTL[42]   = 22;\n\n  /* rectangle cases */\n  isoBandEdgeRB[5] = isoBandEdgeLB[5] = 14;\n  isoBandEdgeRB[165] = isoBandEdgeLB[165] = 14;\n  isoBandEdgeBR[20] = isoBandEdgeTR[20] = 6;\n  isoBandEdgeBR[150] = isoBandEdgeTR[150] = 6;\n  isoBandEdgeRT[80] = isoBandEdgeLT[80] = 11;\n  isoBandEdgeRT[90] = isoBandEdgeLT[90] = 11;\n  isoBandEdgeBL[65] = isoBandEdgeTL[65] = 3;\n  isoBandEdgeBL[105] = isoBandEdgeTL[105] = 3;\n  isoBandEdgeRT[160] = isoBandEdgeLT[160] = 11;\n  isoBandEdgeRB[160] = isoBandEdgeLB[160] = 14;\n  isoBandEdgeRT[10] = isoBandEdgeLT[10] = 11;\n  isoBandEdgeRB[10] = isoBandEdgeLB[10] = 14;\n  isoBandEdgeBR[130] = isoBandEdgeTR[130] = 6;\n  isoBandEdgeBL[130] = isoBandEdgeTL[130] = 3;\n  isoBandEdgeBR[40] = isoBandEdgeTR[40] = 6;\n  isoBandEdgeBL[40] = isoBandEdgeTL[40] = 3;\n\n  /* pentagon cases */\n  isoBandEdgeRB[101] = isoBandEdgeTL[101] = 1;\n  isoBandEdgeRB[69] = isoBandEdgeTL[69] = 1;\n  isoBandEdgeLB[149] = isoBandEdgeTR[149] = 21;\n  isoBandEdgeLB[21] = isoBandEdgeTR[21] = 21;\n  isoBandEdgeBR[86] = isoBandEdgeLT[86] = 17;\n  isoBandEdgeBR[84] = isoBandEdgeLT[84] = 17;\n  isoBandEdgeRT[89] = isoBandEdgeBL[89] = 9;\n  isoBandEdgeRT[81] = isoBandEdgeBL[81] = 9;\n  isoBandEdgeRT[96] = isoBandEdgeTL[96] = 0;\n  isoBandEdgeRB[96] = isoBandEdgeLT[96] = 15;\n  isoBandEdgeRT[74] = isoBandEdgeTL[74] = 0;\n  isoBandEdgeRB[74] = isoBandEdgeLT[74] = 15;\n  isoBandEdgeRT[24] = isoBandEdgeBR[24] = 8;\n  isoBandEdgeBL[24] = isoBandEdgeTR[24] = 7;\n  isoBandEdgeRT[146] = isoBandEdgeBR[146] = 8;\n  isoBandEdgeBL[146] = isoBandEdgeTR[146] = 7;\n  isoBandEdgeRB[6] = isoBandEdgeLT[6] = 15;\n  isoBandEdgeBR[6] = isoBandEdgeLB[6] = 16;\n  isoBandEdgeRB[164] = isoBandEdgeLT[164] = 15;\n  isoBandEdgeBR[164] = isoBandEdgeLB[164] = 16;\n  isoBandEdgeBL[129] = isoBandEdgeTR[129] = 7;\n  isoBandEdgeLB[129] = isoBandEdgeTL[129] = 20;\n  isoBandEdgeBL[41] = isoBandEdgeTR[41] = 7;\n  isoBandEdgeLB[41] = isoBandEdgeTL[41] = 20;\n  isoBandEdgeBR[66] = isoBandEdgeTL[66] = 2;\n  isoBandEdgeBL[66] = isoBandEdgeLT[66] = 19;\n  isoBandEdgeBR[104] = isoBandEdgeTL[104] = 2;\n  isoBandEdgeBL[104] = isoBandEdgeLT[104] = 19;\n  isoBandEdgeRT[144] = isoBandEdgeLB[144] = 10;\n  isoBandEdgeLT[144] = isoBandEdgeTR[144] = 23;\n  isoBandEdgeRT[26] = isoBandEdgeLB[26] = 10;\n  isoBandEdgeLT[26] = isoBandEdgeTR[26] = 23;\n  isoBandEdgeRB[36] = isoBandEdgeTR[36] = 5;\n  isoBandEdgeBR[36] = isoBandEdgeTL[36] = 2;\n  isoBandEdgeRB[134] = isoBandEdgeTR[134] = 5;\n  isoBandEdgeBR[134] = isoBandEdgeTL[134] = 2;\n  isoBandEdgeRT[9] = isoBandEdgeLB[9] = 10;\n  isoBandEdgeRB[9] = isoBandEdgeBL[9] = 13;\n  isoBandEdgeRT[161] = isoBandEdgeLB[161] = 10;\n  isoBandEdgeRB[161] = isoBandEdgeBL[161] = 13;\n\n  /* hexagon cases */\n  isoBandEdgeRB[37] = isoBandEdgeTR[37] = 5;\n  isoBandEdgeLB[37] = isoBandEdgeTL[37] = 20;\n  isoBandEdgeRB[133] = isoBandEdgeTR[133] = 5;\n  isoBandEdgeLB[133] = isoBandEdgeTL[133] = 20;\n  isoBandEdgeBR[148] = isoBandEdgeLB[148] = 16;\n  isoBandEdgeLT[148] = isoBandEdgeTR[148] = 23;\n  isoBandEdgeBR[22] = isoBandEdgeLB[22] = 16;\n  isoBandEdgeLT[22] = isoBandEdgeTR[22] = 23;\n  isoBandEdgeRT[82] = isoBandEdgeBR[82] = 8;\n  isoBandEdgeBL[82] = isoBandEdgeLT[82] = 19;\n  isoBandEdgeRT[88] = isoBandEdgeBR[88] = 8;\n  isoBandEdgeBL[88] = isoBandEdgeLT[88] = 19;\n  isoBandEdgeRT[73] = isoBandEdgeTL[73] = 0;\n  isoBandEdgeRB[73] = isoBandEdgeBL[73] = 13;\n  isoBandEdgeRT[97] = isoBandEdgeTL[97] = 0;\n  isoBandEdgeRB[97] = isoBandEdgeBL[97] = 13;\n  isoBandEdgeRT[145] = isoBandEdgeBL[145] = 9;\n  isoBandEdgeLB[145] = isoBandEdgeTR[145] = 21;\n  isoBandEdgeRT[25] = isoBandEdgeBL[25] = 9;\n  isoBandEdgeLB[25] = isoBandEdgeTR[25] = 21;\n  isoBandEdgeRB[70] = isoBandEdgeTL[70] = 1;\n  isoBandEdgeBR[70] = isoBandEdgeLT[70] = 17;\n  isoBandEdgeRB[100] = isoBandEdgeTL[100] = 1;\n  isoBandEdgeBR[100] = isoBandEdgeLT[100] = 17;\n\n  /* 8-sided cases */\n  isoBandEdgeRT[34] = isoBandEdgeBL[34] = 9;\n  isoBandEdgeRB[34] = isoBandEdgeBR[34] = 12;\n  isoBandEdgeLB[34] = isoBandEdgeTR[34] = 21;\n  isoBandEdgeLT[34] = isoBandEdgeTL[34] = 22;\n  isoBandEdgeRT[136] = isoBandEdgeTR[136] = 4;\n  isoBandEdgeRB[136] = isoBandEdgeTL[136] = 1;\n  isoBandEdgeBR[136] = isoBandEdgeLT[136] = 17;\n  isoBandEdgeBL[136] = isoBandEdgeLB[136] = 18;\n  isoBandEdgeRT[35] = isoBandEdgeTR[35] = 4;\n  isoBandEdgeRB[35] = isoBandEdgeBR[35] = 12;\n  isoBandEdgeBL[35] = isoBandEdgeLB[35] = 18;\n  isoBandEdgeLT[35] = isoBandEdgeTL[35] = 22;\n\n  /* 6-sided cases */\n  isoBandEdgeRT[153] = isoBandEdgeTR[153] = 4;\n  isoBandEdgeBL[153] = isoBandEdgeLB[153] = 18;\n  isoBandEdgeRB[102] = isoBandEdgeBR[102] = 12;\n  isoBandEdgeLT[102] = isoBandEdgeTL[102] = 22;\n  isoBandEdgeRT[155] = isoBandEdgeBL[155] = 9;\n  isoBandEdgeLB[155] = isoBandEdgeTR[155] = 23;\n  isoBandEdgeRB[103] = isoBandEdgeTL[103] = 1;\n  isoBandEdgeBR[103] = isoBandEdgeLT[103] = 17;\n\n  /* 7-sided cases */\n  isoBandEdgeRT[152] = isoBandEdgeTR[152] = 4;\n  isoBandEdgeBR[152] = isoBandEdgeLT[152] = 17;\n  isoBandEdgeBL[152] = isoBandEdgeLB[152] = 18;\n  isoBandEdgeRT[156] = isoBandEdgeBR[156] = 8;\n  isoBandEdgeBL[156] = isoBandEdgeLB[156] = 18;\n  isoBandEdgeLT[156] = isoBandEdgeTR[156] = 23;\n  isoBandEdgeRT[137] = isoBandEdgeTR[137] = 4;\n  isoBandEdgeRB[137] = isoBandEdgeTL[137] = 1;\n  isoBandEdgeBL[137] = isoBandEdgeLB[137] = 18;\n  isoBandEdgeRT[139] = isoBandEdgeTR[139] = 4;\n  isoBandEdgeRB[139] = isoBandEdgeBL[139] = 13;\n  isoBandEdgeLB[139] = isoBandEdgeTL[139] = 20;\n  isoBandEdgeRT[98] = isoBandEdgeBL[98] = 9;\n  isoBandEdgeRB[98] = isoBandEdgeBR[98] = 12;\n  isoBandEdgeLT[98] = isoBandEdgeTL[98] = 22;\n  isoBandEdgeRT[99] = isoBandEdgeTL[99] = 0;\n  isoBandEdgeRB[99] = isoBandEdgeBR[99] = 12;\n  isoBandEdgeBL[99] = isoBandEdgeLT[99] = 19;\n  isoBandEdgeRB[38] = isoBandEdgeBR[38] = 12;\n  isoBandEdgeLB[38] = isoBandEdgeTR[38] = 21;\n  isoBandEdgeLT[38] = isoBandEdgeTL[38] = 22;\n  isoBandEdgeRB[39] = isoBandEdgeTR[39] = 5;\n  isoBandEdgeBR[39] = isoBandEdgeLB[39] = 16;\n  isoBandEdgeLT[39] = isoBandEdgeTL[39] = 22;\n\n  /*\n    The lookup tables for all different polygons that\n    may appear within a grid cell\n  */\n\n  var polygon_table = [];\n\n  /* triangle cases */\n  polygon_table[1] = polygon_table[169] = p00; /* 2221 || 0001 */\n  polygon_table[4] = polygon_table[166] = p01; /* 2212 || 0010 */\n  polygon_table[16] = polygon_table[154] = p02; /* 2122 || 0100 */\n  polygon_table[64] = polygon_table[106] = p03; /* 1222 || 1000 */\n\n  /* trapezoid cases */\n  polygon_table[168] = polygon_table[2] = p04; /* 2220 || 0002 */\n  polygon_table[162] = polygon_table[8] = p05; /* 2202 || 0020 */\n  polygon_table[138] = polygon_table[32] = p06; /* 2022 || 0200 */\n  polygon_table[42] = polygon_table[128] = p07; /* 0222 || 2000 */\n\n  /* rectangle cases */\n  polygon_table[5] = polygon_table[165] = p08; /* 0011 || 2211 */\n  polygon_table[20] = polygon_table[150] = p09; /* 0110 || 2112 */\n  polygon_table[80] = polygon_table[90] = p10; /* 1100 || 1122 */\n  polygon_table[65] = polygon_table[105] = p11; /* 1001 || 1221 */\n  polygon_table[160] = polygon_table[10] = p12; /* 2200 || 0022 */\n  polygon_table[130] = polygon_table[40] = p13; /* 2002 || 0220 */\n\n  /* square case */\n  polygon_table[85] = p14; /* 1111 */\n\n  /* pentagon cases */\n  polygon_table[101] = polygon_table[69] = p15; /* 1211 || 1011 */\n  polygon_table[149] = polygon_table[21] = p16; /* 2111 || 0111 */\n  polygon_table[86] = polygon_table[84] = p17; /* 1112 || 1110 */\n  polygon_table[89] = polygon_table[81] = p18; /* 1121 || 1101 */\n  polygon_table[96] = polygon_table[74] = p19; /* 1200 || 1022 */\n  polygon_table[24] = polygon_table[146] = p20; /* 0120 || 2102 */\n  polygon_table[6] = polygon_table[164] = p21; /* 0012 || 2210 */\n  polygon_table[129] = polygon_table[41] = p22; /* 2001 || 0221 */\n  polygon_table[66] = polygon_table[104] = p23; /* 1002 || 1220 */\n  polygon_table[144] = polygon_table[26] = p24; /* 2100 || 0122 */\n  polygon_table[36] = polygon_table[134] = p25; /* 0210 || 2012 */\n  polygon_table[9] = polygon_table[161] = p26; /* 0021 || 2201 */\n\n  /* hexagon cases */\n  polygon_table[37] = polygon_table[133] = p27; /* 0211 || 2011 */\n  polygon_table[148] = polygon_table[22] = p28; /* 2110 || 0112 */\n  polygon_table[82] = polygon_table[88] = p29; /* 1102 || 1120 */\n  polygon_table[73] = polygon_table[97] = p30; /* 1021 || 1201 */\n  polygon_table[145] = polygon_table[25] = p31; /* 2101 || 0121 */\n  polygon_table[70] = polygon_table[100] = p32; /* 1012 || 1210 */\n\n  /* 8-sided cases */\n  polygon_table[34] = function(c){ return [ p07(c), p05(c) ];}; /* 0202 || 2020 with flipped == 0 */\n  polygon_table[35] = p33; /* flipped == 1 state for 0202 and 2020 */\n  polygon_table[136] = function(c){ return [ p06(c), p04(c) ];}; /* 2020 || 0202 with flipped == 0 */\n\n  /* 6-sided cases */\n  polygon_table[153] = function(c){ return [ p02(c), p00(c) ];}; /* 0101 with flipped == 0 || 2121 with flipped == 2 */\n  polygon_table[102] = function(c){ return [ p01(c), p03(c) ];}; /* 1010 with flipped == 0 || 1212 with flipped == 2 */\n  polygon_table[155] = p34; /* 0101 with flipped == 1 || 2121 with flipped == 1 */\n  polygon_table[103] = p35; /* 1010 with flipped == 1 || 1212 with flipped == 1 */\n\n  /* 7-sided cases */\n  polygon_table[152] = function(c){ return [ p02(c), p04(c) ];}; /* 2120 with flipped == 2 || 0102 with flipped == 0 */\n  polygon_table[156] = p36; /* 2120 with flipped == 1 || 0102 with flipped == 1 */\n  polygon_table[137] = function(c){ return [ p06(c), p00(c) ];}; /* 2021 with flipped == 2 || 0201 with flipped == 0 */\n  polygon_table[139] = p37; /* 2021 with flipped == 1 || 0201 with flipped == 1 */\n  polygon_table[98] = function(c){ return [ p05(c), p03(c) ];}; /* 1202 with flipped == 2 || 1020 with flipped == 0 */\n  polygon_table[99] = p38; /* 1202 with flipped == 1 || 1020 with flipped == 1 */\n  polygon_table[38] = function(c){ return [ p01(c), p07(c) ];}; /* 0212 with flipped == 2 || 2010 with flipped == 0 */\n  polygon_table[39] = p39; /* 0212 with flipped == 1 || 2010 with flipped == 1 */\n\n  /*\n    The helper functions for the above polygon_table\n  */\n\n  /* triangle cases */\n  var p00 = function(cell){ return [[cell.bottomleft,0], [0,0], [0,cell.leftbottom]];};\n  var p01 = function(cell){ return [[1,cell.rightbottom],[1,0],[cell.bottomright, 0]];};\n  var p02 = function(cell){ return [[cell.topright, 1],[1,1],[1, cell.righttop]];};\n  var p03 = function(cell){ return [[0, cell.lefttop],[0,1],[cell.topleft,1]];};\n  /* trapezoid cases */\n  var p04 = function(cell){ return [[cell.bottomright,0],[cell.bottomleft,0],[0, cell.leftbottom],[0,cell.lefttop]];};\n  var p05 = function(cell){ return [[cell.bottomright,0],[cell.bottomleft,0],[1,cell.righttop],[1,cell.rightbottom]];};\n  var p06 = function(cell){ return [[1, cell.righttop],[1,cell.rightbottom],[cell.topleft,1],[cell.topright,1]];};\n  var p07 = function(cell){ return [[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]];};\n  /* rectangle cases */\n  var p08 = function(cell){ return [[0,0],[0,cell.leftbottom],[1,cell.rightbottom],[1,0]];};\n  var p09 = function(cell){ return [[1,0],[cell.bottomright,0],[cell.topright,1],[1,1]];};\n  var p10 = function(cell){ return [[1,1],[1,cell.righttop],[0,cell.lefttop],[0,1]];};\n  var p11 = function(cell){ return [[cell.bottomleft,0],[0,0],[0,1],[cell.topleft,1]];};\n  var p12 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[0,cell.leftbottom],[0,cell.lefttop]];};\n  var p13 = function(cell){ return [[cell.topleft, 1],[cell.topright,1],[cell.bottomright,0],[cell.bottomleft,0]];};\n  /* square case */\n  var p14 = function(cell){ return [[0,0], [0,1], [1,1], [1,0]];};\n  /* pentagon cases */\n  var p15 = function(cell){ return [[1,cell.rightbottom],[1,0],[0,0],[0,1],[cell.topleft,1]];}; /* 1211 || 1011 */\n  var p16 = function(cell){ return [[cell.topright,1],[1,1],[1,0],[0,0],[0,cell.leftbottom]];}; /* 2111 || 0111 */\n  var p17 = function(cell){ return [[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[1,1]];}; /* 1112 || 1110 */\n  var p18 = function(cell){ return [[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,1]];}; /* 1121 || 1101 */\n  var p19 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1200 || 1022 */\n  var p20 = function(cell){ return [[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[cell.topright,1]];}; /* 0120 || 2102 */\n  var p21 = function(cell){ return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop]];}; /* 0012 || 2210 */\n  var p22 = function(cell){ return [[cell.topright,1],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topleft,1]];}; /* 2001 || 0221 */\n  var p23 = function(cell){ return [[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1002 || 1220 */\n  var p24 = function(cell){ return [[1,1],[1,cell.righttop],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]];}; /* 2100 || 0122 */\n  var p25 = function(cell){ return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[cell.topleft,1],[cell.topright,1]];}; /* 0210 || 2012 */\n  var p26 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,cell.leftbottom]];}; /* 0021 || 2201 */\n  /*hexagon cases */\n  var p27 = function(cell){ return [[1,cell.rightbottom],[1,0],[0,0],[0,cell.leftbottom],[cell.topleft,1],[cell.topright,1]];}; /* 0211 || 2011 */\n  var p28 = function(cell){ return [[1,1],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0, cell.lefttop],[cell.topright, 1]];}; /* 2110 || 0112 */\n  var p29 = function(cell){ return [[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1]];}; /* 1102 || 1120 */\n  var p30 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,1],[cell.topleft,1]];}; /* 1021 || 1201 */\n  var p31 = function(cell){ return [[1,1],[1,cell.righttop],[cell.bottomleft, 0],[0,0],[0,cell.leftbottom],[cell.topright,1]];}; /* 2101 || 0121 */\n  var p32 = function(cell){ return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1012 || 1210 */\n  /* 8-sided cases */\n  var p33 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]];}; /* flipped == 1 state for 0202 and 2020 */\n  /* 6-sided cases */\n  var p34 = function(cell){ return [[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topright,1]];}; /* 0101 with flipped == 1 || 2121 with flipped == 1 */\n  var p35 = function(cell){ return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1010 with flipped == 1 || 1212 with flipped == 1 */\n  /* 7-sided cases */\n  var p36 = function(cell){ return [[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]];}; /* 2120 with flipped == 1 || 0102 with flipped == 1 */\n  var p37 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topleft,1],[cell.topright,1]];}; /* 2021 with flipped == 1 || 0201 with flipped == 1 */\n  var p38 = function(cell){ return [[1,cell.righttop],[1,cell.rightbottom],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1],[cell.topleft,1]];}; /* 1202 with flipped == 1 || 1020 with flipped == 1 */\n  var p39 = function(cell){ return [[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]];}; /* 0212 with flipped == 1 || 2010 with flipped == 1 */\n\n\n\n  /*\n  ####################################\n  Some small helper functions\n  ####################################\n  */\n\n  /* assume that x1 == 1 &&  x0 == 0 */\n  function interpolateX(y, y0, y1){\n    return (y - y0) / (y1 - y0);\n  }\n\n  function isArray(myArray) {\n    return myArray.constructor.toString().indexOf(\"Array\") > -1;\n  }\n\n  /*\n  ####################################\n  Below is the actual Marching Squares implementation\n  ####################################\n  */\n\n  function computeBandGrid(data, minV, bandwidth){\n    var rows = data.length - 1;\n    var cols = data[0].length - 1;\n    var BandGrid = { rows: rows, cols: cols, cells: [] };\n\n    var maxV = minV + Math.abs(bandwidth);\n\n    for(var j = 0; j < rows; ++j){\n      BandGrid.cells[j] = [];\n      for(var i = 0; i < cols; ++i){\n        /*  compose the 4-trit corner representation */\n        var cval = 0;\n\n        var tl = data[j+1][i];\n        var tr = data[j+1][i+1];\n        var br = data[j][i+1];\n        var bl = data[j][i];\n\n        if(isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)){\n          continue;\n        }\n\n        cval |= (tl < minV) ? 0 : (tl > maxV) ? 128 : 64;\n        cval |= (tr < minV) ? 0 : (tr > maxV) ? 32 : 16;\n        cval |= (br < minV) ? 0 : (br > maxV) ? 8 : 4;\n        cval |= (bl < minV) ? 0 : (bl > maxV) ? 2 : 1;\n\n        var cval_real = +cval;\n\n        /* resolve ambiguity via averaging */\n        var flipped = 0;\n        if(     (cval == 17) /* 0101 */\n            ||  (cval == 18) /* 0102 */\n            ||  (cval == 33) /* 0201 */\n            ||  (cval == 34) /* 0202 */\n            ||  (cval == 38) /* 0212 */\n            ||  (cval == 68) /* 1010 */\n            ||  (cval == 72) /* 1020 */\n            ||  (cval == 98) /* 1202 */\n            ||  (cval == 102) /* 1212 */\n            ||  (cval == 132) /* 2010 */\n            ||  (cval == 136) /* 2020 */\n            ||  (cval == 137) /* 2021 */\n            ||  (cval == 152) /* 2120 */\n            ||  (cval == 153) /* 2121 */\n        ){\n          var average = (tl + tr + br + bl) / 4;\n          /* set flipped state */\n          flipped = (average > maxV) ? 2 : (average < minV) ? 0 : 1;\n\n          /* adjust cval for flipped cases */\n\n          /* 8-sided cases */\n          if(cval === 34){\n            if(flipped === 1){\n              cval = 35;\n            } else if(flipped === 0){\n              cval = 136;\n            }\n          } else if(cval === 136){\n            if(flipped === 1){\n              cval = 35;\n              flipped = 4;\n            } else if(flipped === 0){\n              cval = 34;\n            }\n          }\n\n          /* 6-sided polygon cases */\n          else if(cval === 17){\n            if(flipped === 1){\n              cval = 155;\n              flipped = 4;\n            } else if(flipped === 0){\n              cval = 153;\n            }\n          } else if(cval === 68){\n            if(flipped === 1){\n              cval = 103;\n              flipped = 4;\n            } else if(flipped === 0){\n              cval = 102;\n            }\n          } else if(cval === 153){\n            if(flipped === 1)\n              cval = 155;\n          } else if(cval === 102){\n            if(flipped === 1)\n              cval = 103;\n          }\n\n          /* 7-sided polygon cases */\n          else if(cval === 152){\n            if(flipped < 2){\n              cval    = 156;\n              flipped = 1;\n            }\n          } else if(cval === 137){\n            if(flipped < 2){\n              cval = 139;\n              flipped = 1;\n            }\n          } else if(cval === 98){\n            if(flipped < 2){\n              cval    = 99;\n              flipped = 1;\n            }\n          } else if(cval === 38){\n            if(flipped < 2){\n              cval    = 39;\n              flipped = 1;\n            }\n          } else if(cval === 18){\n            if(flipped > 0){\n              cval = 156;\n              flipped = 4;\n            } else {\n              cval = 152;\n            }\n          } else if(cval === 33){\n            if(flipped > 0){\n              cval = 139;\n              flipped = 4;\n            } else {\n              cval = 137;\n            }\n          } else if(cval === 72){\n            if(flipped > 0){\n              cval = 99;\n              flipped = 4;\n            } else {\n              cval = 98;\n            }\n          } else if(cval === 132){\n            if(flipped > 0){\n              cval = 39;\n              flipped = 4;\n            } else {\n              cval = 38;\n            }\n          }\n        }\n\n        /* add cell to BandGrid if it contains at least one polygon-side */\n        if((cval != 0) && (cval != 170)){\n          var topleft, topright, bottomleft, bottomright,\n              righttop, rightbottom, lefttop, leftbottom;\n\n          topleft = topright = bottomleft = bottomright = righttop\n                  = rightbottom = lefttop = leftbottom = 0.5;\n\n          var edges = [];\n\n          /* do interpolation here */\n          /* 1st Triangles */\n          if(cval === 1){ /* 0001 */\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            leftbottom = 1 - interpolateX(minV, tl, bl);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 169){ /* 2221 */\n            bottomleft = interpolateX(maxV, bl, br);\n            leftbottom = interpolateX(maxV, bl, tl);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 4){ /* 0010 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            bottomright = interpolateX(minV, bl, br);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 166){ /* 2212 */\n            rightbottom = interpolateX(maxV, br, tr);\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 16){ /* 0100 */\n            righttop = interpolateX(minV, br, tr);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n          } else if(cval === 154){ /* 2122 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n          } else if(cval === 64){ /* 1000 */\n            lefttop = interpolateX(minV, bl, tl);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 106){ /* 1222 */\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeLT[cval]);\n          }\n          /* 2nd Trapezoids */\n          else if(cval === 168){ /* 2220 */\n            bottomright = interpolateX(maxV, bl, br);\n            bottomleft = interpolateX(minV, bl, br);\n            leftbottom = interpolateX(minV, bl, tl);\n            lefttop = interpolateX(maxV, bl, tl);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 2){ /* 0002 */\n            bottomright = 1 - interpolateX(minV, br, bl);\n            bottomleft = 1 - interpolateX(maxV, br, bl);\n            leftbottom = 1 - interpolateX(maxV, tl, bl);\n            lefttop = 1 - interpolateX(minV, tl, bl);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 162){ /* 2202 */\n            righttop = interpolateX(maxV, br, tr);\n            rightbottom = interpolateX(minV, br, tr);\n            bottomright = 1 - interpolateX(minV, br, bl);\n            bottomleft = 1 - interpolateX(maxV, br, bl);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 8){ /* 0020 */\n            righttop = 1 - interpolateX(minV, tr, br);\n            rightbottom = 1 - interpolateX(maxV, tr, br);\n            bottomright = interpolateX(maxV, bl, br);\n            bottomleft = interpolateX(minV, bl, br);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 138){ /* 2022 */\n            righttop = 1 - interpolateX(minV, tr, br);\n            rightbottom = 1 - interpolateX(maxV, tr, br);\n            topleft = 1 - interpolateX(maxV, tr, tl);\n            topright = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 32){ /* 0200 */\n            righttop = interpolateX(maxV, br, tr);\n            rightbottom = interpolateX(minV, br, tr);\n            topleft = interpolateX(minV, tl, tr);\n            topright = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 42){ /* 0222 */\n            leftbottom = 1 - interpolateX(maxV, tl, bl);\n            lefttop = 1 - interpolateX(minV, tl, bl);\n            topleft = interpolateX(minV, tl, tr);\n            topright = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeLB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 128){ /* 2000 */\n            leftbottom = interpolateX(minV, bl, tl);\n            lefttop = interpolateX(maxV, bl, tl);\n            topleft = 1 - interpolateX(maxV, tr, tl);\n            topright = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeLB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          }\n\n          /* 3rd rectangle cases */\n          if(cval === 5){ /* 0011 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            leftbottom = 1 - interpolateX(minV, tl, bl);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 165){ /* 2211 */\n            rightbottom = interpolateX(maxV, br, tr);\n            leftbottom = interpolateX(maxV, bl, tl);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 20){ /* 0110 */\n            bottomright = interpolateX(minV, bl, br);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 150){ /* 2112 */\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 80){ /* 1100 */\n            righttop = interpolateX(minV, br, tr);\n            lefttop = interpolateX(minV, bl, tl);\n            edges.push(isoBandEdgeRT[cval]);\n          } else if(cval === 90){ /* 1122 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            edges.push(isoBandEdgeRT[cval]);\n          } else if(cval === 65){ /* 1001 */\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 105){ /* 1221 */\n            bottomleft = interpolateX(maxV, bl, br);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 160){ /* 2200 */\n            righttop = interpolateX(maxV, br, tr);\n            rightbottom = interpolateX(minV, br, tr);\n            leftbottom = interpolateX(minV, bl, tl);\n            lefttop = interpolateX(maxV, bl, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 10){ /* 0022 */\n            righttop = 1 - interpolateX(minV, tr, br);\n            rightbottom = 1 - interpolateX(maxV, tr, br);\n            leftbottom = 1 - interpolateX(maxV, tl, bl);\n            lefttop = 1 - interpolateX(minV, tl, bl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 130){ /* 2002 */\n            bottomright = 1 - interpolateX(minV, br, bl);\n            bottomleft = 1 - interpolateX(maxV, br, bl);\n            topleft = 1 - interpolateX(maxV, tr, tl);\n            topright = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 40){ /* 0220 */\n            bottomright = interpolateX(maxV, bl, br);\n            bottomleft = interpolateX(minV, bl, br);\n            topleft = interpolateX(minV, tl, tr);\n            topright = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          }\n\n          /* 4th single pentagon cases */\n          else if(cval === 101){ /* 1211 */\n            rightbottom = interpolateX(maxV, br, tr);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 69){ /* 1011 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 149){ /* 2111 */\n            leftbottom = interpolateX(maxV, bl, tl);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 21){ /* 0111 */\n            leftbottom = 1 - interpolateX(minV, tl, bl);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 86){ /* 1112 */\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 84){ /* 1110 */\n            bottomright = interpolateX(minV, bl, br);\n            lefttop = interpolateX(minV, bl, tl);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 89){ /* 1121 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            bottomleft = interpolateX(maxV, bl, br);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 81){ /* 1101 */\n            righttop = interpolateX(minV, br, tr);\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 96){ /* 1200 */\n            righttop = interpolateX(maxV, br, tr);\n            rightbottom = interpolateX(minV, br, tr);\n            lefttop = interpolateX(minV, bl, tl);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 74){ /* 1022 */\n            righttop = 1 - interpolateX(minV, tr, br);\n            rightbottom = 1- interpolateX(maxV, tr, br);\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 24){ /* 0120 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            bottomright = interpolateX(maxV, bl, br);\n            bottomleft = interpolateX(minV, bl, br);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 146){ /* 2102 */\n            righttop = interpolateX(minV, br, tr);\n            bottomright = 1 - interpolateX(minV, br, bl);\n            bottomleft = 1 - interpolateX(maxV, br, bl);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 6){ /* 0012 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            leftbottom = 1 - interpolateX(maxV, tl, bl);\n            lefttop = 1 - interpolateX(minV, tl, bl);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 164){ /* 2210 */\n            rightbottom = interpolateX(maxV, br, tr);\n            bottomright = interpolateX(minV, bl, br);\n            leftbottom = interpolateX(minV, bl, tl);\n            lefttop = interpolateX(maxV, bl, tl);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 129){ /* 2001 */\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            leftbottom = interpolateX(maxV, bl, tl);\n            topleft = 1 - interpolateX(maxV, tr, tl);\n            topright = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeBL[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 41){ /* 0221 */\n            bottomleft = interpolateX(maxV, bl, br);\n            leftbottom = 1 - interpolateX(minV, tl, bl);\n            topleft = interpolateX(minV, tl, tr);\n            topright = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeBL[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 66){ /* 1002 */\n            bottomright = 1 - interpolateX(minV, br, bl);\n            bottomleft = 1 - interpolateX(maxV, br, bl);\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 104){ /* 1220 */\n            bottomright = interpolateX(maxV, bl, br);\n            bottomleft = interpolateX(minV, bl, br);\n            lefttop = interpolateX(minV, bl, tl);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeBL[cval]);\n            edges.push(isoBandEdgeTL[cval]);\n          } else if(cval === 144){ /* 2100 */\n            righttop = interpolateX(minV, br, tr);\n            leftbottom = interpolateX(minV, bl, tl);\n            lefttop = interpolateX(maxV, bl, tl);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 26){ /* 0122 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            leftbottom = 1 - interpolateX(maxV, tl, bl);\n            lefttop = 1 - interpolateX(minV, tl, bl);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 36){ /* 0210 */\n            rightbottom = interpolateX(maxV, br, tr);\n            bottomright = interpolateX(minV, bl, br);\n            topleft = interpolateX(minV, tl, tr);\n            topright = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 134){ /* 2012 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            topleft = 1 - interpolateX(maxV, tr, tl);\n            topright = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 9){ /* 0021 */\n            righttop = 1 - interpolateX(minV, tr, br);\n            rightbottom = 1 - interpolateX(maxV, tr, br);\n            bottomleft = interpolateX(maxV, bl, br);\n            leftbottom = 1 - interpolateX(minV, tl, bl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 161){ /* 2201 */\n            righttop = interpolateX(maxV, br, tr);\n            rightbottom = interpolateX(minV, br, tr);\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            leftbottom = interpolateX(maxV, bl, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          }\n\n          /* 5th single hexagon cases */\n          else if(cval === 37){ /* 0211 */\n            rightbottom = interpolateX(maxV, br, tr);\n            leftbottom = 1- interpolateX(minV, tl, bl);\n            topleft = interpolateX(minV, tl, tr);\n            topright = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 133){ /* 2011 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            leftbottom = interpolateX(maxV, bl, tl);\n            topleft = 1 - interpolateX(maxV, tr, tl);\n            topright = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 148){ /* 2110 */\n            bottomright = interpolateX(minV, bl, br);\n            leftbottom = interpolateX(minV, bl, tl);\n            lefttop = interpolateX(maxV, bl, tl);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 22){ /* 0112 */\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            leftbottom = 1 - interpolateX(maxV, tl, bl);\n            lefttop = 1 - interpolateX(minV, tl, bl);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 82){ /* 1102 */\n            righttop = interpolateX(minV, br, tr);\n            bottomright = 1- interpolateX(minV, br, bl);\n            bottomleft = 1 - interpolateX(maxV, br, bl);\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 88){ /* 1120 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            bottomright = interpolateX(maxV, bl, br);\n            bottomleft = interpolateX(minV, bl, br);\n            lefttop = interpolateX(minV, bl, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 73){ /* 1021 */\n            righttop = 1 - interpolateX(minV, tr, br);\n            rightbottom = 1 - interpolateX(maxV, tr, br);\n            bottomleft = interpolateX(maxV, bl, br);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 97){ /* 1201 */\n            righttop = interpolateX(maxV, br, tr);\n            rightbottom = interpolateX(minV, br, tr);\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n          } else if(cval === 145){ /* 2101 */\n            righttop = interpolateX(minV, br, tr);\n            bottomleft = 1 - interpolateX(minV, br, bl);\n            leftbottom = interpolateX(maxV, bl, tl);\n            topright = 1 - interpolateX(maxV, tr, tl);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 25){ /* 0121 */\n            righttop = 1 - interpolateX(maxV, tr, br);\n            bottomleft = interpolateX(maxV, bl, br);\n            leftbottom = 1 - interpolateX(minV, tl, bl);\n            topright = interpolateX(minV, tl, tr);\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 70){ /* 1012 */\n            rightbottom = 1 - interpolateX(minV, tr, br);\n            bottomright = 1 - interpolateX(maxV, br, bl);\n            lefttop = 1 - interpolateX(maxV, tl, bl);\n            topleft = 1 - interpolateX(minV, tr, tl);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          } else if(cval === 100){ /* 1210 */\n            rightbottom = interpolateX(maxV, br, tr);\n            bottomright = interpolateX(minV, bl, br);\n            lefttop = interpolateX(minV, bl, tl);\n            topleft = interpolateX(maxV, tl, tr);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          }\n\n          /* 8-sided cases */\n          else if(cval === 34){ /* 0202 || 2020 with flipped == 0 */\n            if(flipped === 0){\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            } else {\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 35){ /* flipped == 1 state for 0202, and 2020 with flipped == 4*/\n            if(flipped === 4){\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            } else {\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 136){ /* 2020 || 0202 with flipped == 0 */\n            if(flipped === 0){\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          }\n\n          /* 6-sided polygon cases */\n          else if(cval === 153){ /* 0101 with flipped == 0 || 2121 with flipped == 2 */\n            if(flipped === 0){\n              righttop = interpolateX(minV, br, tr);\n              bottomleft = 1 - interpolateX(minV, br, bl);\n              leftbottom = 1 - interpolateX(minV, tl, bl);\n              topright = interpolateX(minV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(maxV, tr, br);\n              bottomleft = interpolateX(maxV, bl, br);\n              leftbottom = interpolateX(maxV, bl, tl);\n              topright = 1 - interpolateX(maxV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 102){ /* 1010 with flipped == 0 || 1212 with flipped == 2 */\n            if(flipped === 0){\n              rightbottom = 1 - interpolateX(minV, tr, br);\n              bottomright = interpolateX(minV, bl, br);\n              lefttop = interpolateX(minV, bl, tl);\n              topleft = 1 - interpolateX(minV, tr, tl);\n            } else {\n              rightbottom = interpolateX(maxV, br, tr);\n              bottomright = 1 - interpolateX(maxV, br, bl);\n              lefttop = 1 - interpolateX(maxV, tl, bl);\n              topleft = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 155){ /* 0101 with flipped == 4 || 2121 with flipped == 1 */\n            if(flipped === 4){\n              righttop = interpolateX(minV, br, tr);\n              bottomleft = 1 - interpolateX(minV, br, bl);\n              leftbottom = 1 - interpolateX(minV, tl, bl);\n              topright = interpolateX(minV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(maxV, tr, br);\n              bottomleft = interpolateX(maxV, bl, br);\n              leftbottom = interpolateX(maxV, bl, tl);\n              topright = 1 - interpolateX(maxV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 103){ /* 1010 with flipped == 4 || 1212 with flipped == 1 */\n            if(flipped === 4){\n              rightbottom = 1 - interpolateX(minV, tr, br);\n              bottomright = interpolateX(minV, bl, br);\n              lefttop = interpolateX(minV, bl, tl);\n              topleft = 1 - interpolateX(minV, tr, tl);\n            } else {\n              rightbottom = interpolateX(maxV, br, tr);\n              bottomright = 1 - interpolateX(maxV, br, bl);\n              lefttop = 1 - interpolateX(maxV, tl, bl);\n              topleft = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n          }\n\n          /* 7-sided polygon cases */\n          else if(cval === 152){ /* 2120 with flipped == 2 || 0102 with flipped == 0 */\n            if(flipped === 0){\n              righttop = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topright = interpolateX(minV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topright = 1 - interpolateX(maxV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 156){ /* 2120 with flipped == 1 || 0102 with flipped == 4 */\n            if(flipped === 4){\n              righttop = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topright = interpolateX(minV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topright = 1 - interpolateX(maxV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 137){ /* 2021 with flipped == 2 || 0201 with flipped == 0 */\n            if(flipped === 0){\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomleft = 1 - interpolateX(minV, br, bl);\n              leftbottom = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomleft = interpolateX(maxV, bl, br);\n              leftbottom = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 139){ /* 2021 with flipped == 1 || 0201 with flipped == 4 */\n            if(flipped === 4){\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomleft = 1 - interpolateX(minV, br, bl);\n              leftbottom = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            } else {\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomleft = interpolateX(maxV, bl, br);\n              leftbottom = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n          } else if(cval === 98){ /* 1202 with flipped == 2 || 1020 with flipped == 0 */\n            if(flipped === 0){\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              lefttop = interpolateX(minV, bl, tl);\n              topleft = 1 - interpolateX(minV, tr, tl);\n            } else {\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              lefttop = 1 - interpolateX(maxV, tl, bl);\n              topleft = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 99){ /* 1202 with flipped == 1 || 1020 with flipped == 4 */\n            if(flipped === 4){\n              righttop = 1 - interpolateX(minV, tr, br);\n              rightbottom = 1 - interpolateX(maxV, tr, br);\n              bottomright = interpolateX(maxV, bl, br);\n              bottomleft = interpolateX(minV, bl, br);\n              lefttop = interpolateX(minV, bl, tl);\n              topleft = 1 - interpolateX(minV, tr, tl);\n            } else {\n              righttop = interpolateX(maxV, br, tr);\n              rightbottom = interpolateX(minV, br, tr);\n              bottomright = 1 - interpolateX(minV, br, bl);\n              bottomleft = 1 - interpolateX(maxV, br, bl);\n              lefttop = 1 - interpolateX(maxV, tl, bl);\n              topleft = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRT[cval]);\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBL[cval]);\n          } else if(cval === 38){ /* 0212 with flipped == 2 || 2010 with flipped == 0 */\n            if(flipped === 0){\n              rightbottom = 1 - interpolateX(minV, tr, br);\n              bottomright = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            } else {\n              rightbottom = interpolateX(maxV, br, tr);\n              bottomright = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeLB[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          } else if(cval === 39){ /* 0212 with flipped == 1 || 2010 with flipped == 4 */\n            if(flipped === 4){\n              rightbottom = 1 - interpolateX(minV, tr, br);\n              bottomright = interpolateX(minV, bl, br);\n              leftbottom = interpolateX(minV, bl, tl);\n              lefttop = interpolateX(maxV, bl, tl);\n              topleft = 1 - interpolateX(maxV, tr, tl);\n              topright = 1 - interpolateX(minV, tr, tl);\n            } else {\n              rightbottom = interpolateX(maxV, br, tr);\n              bottomright = 1 - interpolateX(maxV, br, bl);\n              leftbottom = 1 - interpolateX(maxV, tl, bl);\n              lefttop = 1 - interpolateX(minV, tl, bl);\n              topleft = interpolateX(minV, tl, tr);\n              topright = interpolateX(maxV, tl, tr);\n            }\n            edges.push(isoBandEdgeRB[cval]);\n            edges.push(isoBandEdgeBR[cval]);\n            edges.push(isoBandEdgeLT[cval]);\n          }\n\n          else if(cval === 85){\n            righttop = 1;\n            rightbottom = 0;\n            bottomright = 1;\n            bottomleft = 0;\n            leftbottom = 0;\n            lefttop = 1;\n            topleft = 0;\n            topright = 1;\n          }\n\n          if(topleft < 0 || topleft > 1 || topright < 0 || topright > 1 || righttop < 0 || righttop > 1 || bottomright < 0 || bottomright > 1 || leftbottom < 0 || leftbottom > 1 || lefttop < 0 || lefttop > 1){\n            console.log(cval + \" \" + cval_real + \" \" + tl + \",\" + tr + \",\" + br + \",\" + bl + \" \" + flipped + \" \" + topleft + \" \" + topright + \" \" + righttop + \" \" + rightbottom + \" \" + bottomright + \" \" + bottomleft + \" \" + leftbottom + \" \" + lefttop);\n          }\n\n          BandGrid.cells[j][i] = {\n                                    cval:         cval,\n                                    cval_real:    cval_real,\n                                    flipped:      flipped,\n                                    topleft:      topleft,\n                                    topright:     topright,\n                                    righttop:     righttop,\n                                    rightbottom:  rightbottom,\n                                    bottomright:  bottomright,\n                                    bottomleft:   bottomleft,\n                                    leftbottom:   leftbottom,\n                                    lefttop:      lefttop,\n                                    edges:        edges\n                                };\n        }\n      }\n    }\n\n    return BandGrid;\n  }\n\n  function BandGrid2AreaPaths(grid){\n    var areas = [];\n    var area_idx = 0;\n    var rows = grid.rows;\n    var cols = grid.cols;\n    var currentPolygon = [];\n\n    for(var j = 0; j < rows; j++){\n      for(var i = 0; i < cols; i++){\n        if((typeof grid.cells[j][i] !== 'undefined') && (grid.cells[j][i].edges.length > 0)){\n          /* trace back polygon path starting from this cell */\n          var o = 0,\n              x = i,\n              y = j;\n\n          var cell = grid.cells[j][i];\n          /* get start coordinates */\n          var cval = cell.cval;\n\n          var prev  = getStartXY(cell),\n              next  = null,\n              p     = i,\n              q     = j;\n\n          if(prev !== null){\n            currentPolygon.push([ prev.p[0] + p, prev.p[1] + q ]);\n            //console.log(cell);\n            //console.log(\"coords: \" + (prev.p[0] + p) + \" \" + (prev.p[1] + q));\n          }\n\n          do{\n            //console.log(p + \",\" + q);\n            //console.log(grid.cells[q][p]);\n            //console.log(grid.cells[q][p].edges);\n            //console.log(\"from : \" + prev.x + \" \" + prev.y + \" \" + prev.o);\n\n            next = getExitXY(grid.cells[q][p], prev.x, prev.y, prev.o);\n            if(next !== null){\n              //console.log(\"coords: \" + (next.p[0] + p) + \" \" + (next.p[1] + q));\n              currentPolygon.push([ next.p[0] + p, next.p[1] + q ]);\n              p += next.x;\n              q += next.y;\n              prev = next;\n            } else {\n              //console.log(\"getExitXY() returned null!\");\n              break;\n            }\n            //console.log(\"to : \" + next.x + \" \" + next.y + \" \" + next.o);\n            /* special case, where we've reached the grid boundaries */\n            if((q < 0) || (q >= rows) || (p < 0) || (p >= cols) || (typeof grid.cells[q][p] === 'undefined')){\n              /* to create a closed path, we need to trace our way\n                  arround the missing data, until we find an entry\n                  point again\n              */\n\n              /* set back coordinates of current cell */\n              p -= next.x;\n              q -= next.y;\n\n              //console.log(\"reached boundary at \" + p + \" \" + q);\n\n              var missing = traceOutOfGridPath(grid, p, q, next.x, next.y, next.o);\n              if(missing !== null){\n                missing.path.forEach(function(pp){\n                  //console.log(\"coords: \" + (pp[0]) + \" \" + (pp[1]));\n                  currentPolygon.push(pp);\n                });\n                p = missing.i;\n                q = missing.j;\n                prev = missing;\n              } else {\n                break;\n              }\n              //console.log(grid.cells[q][p]);\n            }\n          } while(    (typeof grid.cells[q][p] !== 'undefined')\n                   && (grid.cells[q][p].edges.length > 0));\n\n          areas.push(currentPolygon);\n          //console.log(\"next polygon\");\n          //console.log(currentPolygon);\n          currentPolygon = [];\n          if(grid.cells[j][i].edges.length > 0)\n            i--;\n        }\n      }\n    }\n    return areas;\n  }\n\n  function traceOutOfGridPath(grid, i, j, d_x, d_y, d_o){\n    var cell = grid.cells[j][i];\n    var cval = cell.cval_real;\n    var p = i + d_x,\n        q = j + d_y;\n    var path = [];\n    var rows = grid.rows;\n    var cols = grid.cols;\n    var closed = false;\n\n    while(!closed){\n      //console.log(\"processing cell \" + p + \",\" + q + \" \" + d_x + \" \" + d_y + \" \" + d_o);\n      if((typeof grid.cells[q] === 'undefined') || (typeof grid.cells[q][p] === 'undefined')){\n        //console.log(\"which is undefined\");\n        /* we can't move on, so we have to change direction to proceed further */\n\n        /* go back to previous cell */\n        q -= d_y;\n        p -= d_x;\n        cell = grid.cells[q][p];\n        cval = cell.cval_real;\n\n        /* check where we've left defined cells of the grid... */\n        if(d_y === -1){ /* we came from top */\n          if(d_o === 0){  /* exit left */\n            if(cval & Node3){ /* lower left node is within range, so we move left */\n              path.push([p, q]);\n              d_x = -1;\n              d_y = 0;\n              d_o = 0;\n            } else if(cval & Node2){ /* lower right node is within range, so we move right */\n              path.push([p + 1, q]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 0;\n            } else { /* close the path */\n              path.push([p + cell.bottomright, q]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 1;\n              closed = true;\n              break;\n            }\n          } else {\n            if(cval & Node3){\n              path.push([p, q]);\n              d_x = -1;\n              d_y = 0;\n              d_o = 0;\n            } else if(cval & Node2){\n              path.push([p + cell.bottomright, q]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 1;\n              closed = true;\n              break;\n            } else {\n              path.push([p + cell.bottomleft, q]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 0;\n              closed = true;\n              break;\n            }\n          }\n        } else if(d_y === 1){ /* we came from bottom */\n          //console.log(\"we came from bottom and hit a non-existing cell \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n          if(d_o === 0){ /* exit left */\n            if(cval & Node1){ /* top right node is within range, so we move right */\n              path.push([p+1,q+1]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 1;\n            } else if(!(cval & Node0)){ /* found entry within same cell */\n              path.push([p + cell.topright, q + 1]);\n              d_x = 0;\n              d_y = -1;\n              d_o = 1;\n              closed = true;\n              //console.log(\"found entry from bottom at \" + p + \",\" + q);\n              break;\n            } else {\n              path.push([p + cell.topleft, q + 1]);\n              d_x = 0;\n              d_y = -1;\n              d_o = 0;\n              closed = true;\n              break;\n            }\n          } else {\n            if(cval & Node1){\n              path.push([p+1, q+1]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 1;\n            } else { /* move right */\n              path.push([p+1, q+1]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 1;\n              //console.log(\"wtf\");\n              //break;\n            }\n          }\n        } else if(d_x === -1){ /* we came from right */\n          //console.log(\"we came from right and hit a non-existing cell at \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n          if(d_o === 0){\n            //console.log(\"continue at bottom\");\n            if(cval & Node0){\n              path.push([p,q+1]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 0;\n              //console.log(\"moving upwards to \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n            } else if(!(cval & Node3)){ /* there has to be an entry into the regular grid again! */\n              //console.log(\"exiting top\");\n              path.push([p, q + cell.lefttop]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 1;\n              closed = true;\n              break;\n            } else {\n              //console.log(\"exiting bottom\");\n              path.push([p, q + cell.leftbottom]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 0;\n              closed = true;\n              break;\n            }\n          } else {\n            //console.log(\"continue at top\");\n            if(cval & Node0){\n              path.push([p,q+1]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 0;\n              //console.log(\"moving upwards to \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n            } else { /* */\n              console.log(\"wtf\");\n              break;\n            }\n          }\n        } else if(d_x === 1){ /* we came from left */\n          //console.log(\"we came from left and hit a non-existing cell \" + (p + d_x) + \",\" + (q + d_y) + \"!\");\n          if(d_o === 0){ /* exit bottom */\n            if(cval & Node2){\n              path.push([p+1,q]);\n              d_x = 0;\n              d_y = -1;\n              d_o = 1;\n            } else {\n              path.push([p+1,q+cell.rightbottom]);\n              d_x = -1;\n              d_y = 0;\n              d_o = 0;\n              closed = true;\n              break;\n            }\n          } else { /* exit top */\n            if(cval & Node2){\n              path.push([p+1,q]);\n              d_x = 0;\n              d_y = -1;\n              d_o = 1;\n            } else if(!(cval & Node1)){\n              path.push([p + 1, q + cell.rightbottom]);\n              d_x = -1;\n              d_y = 0;\n              d_o = 0;\n              closed = true;\n              break;\n            } else {\n              path.push([p+1,q+cell.righttop]);\n              d_x = -1;\n              d_y = 0;\n              d_o = 1;\n              break;\n            }\n          }\n        } else { /* we came from the same cell */\n          console.log(\"we came from nowhere!\");\n          break;\n        }\n\n      } else { /* try to find an entry into the regular grid again! */\n        cell = grid.cells[q][p];\n        cval = cell.cval_real;\n        //console.log(\"which is defined\");\n\n        if(d_x === -1){\n          if(d_o === 0){\n            /* try to go downwards */\n            if((typeof grid.cells[q - 1] !== 'undefined') && (typeof grid.cells[q - 1][p] !== 'undefined')){\n              d_x = 0;\n              d_y = -1;\n              d_o = 1;\n            } else if(cval & Node3){ /* proceed searching in x-direction */\n              //console.log(\"proceeding in x-direction!\");\n              path.push([p, q]);\n            } else { /* we must have found an entry into the regular grid */\n              path.push([p + cell.bottomright, q]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 1;\n              closed = true;\n              //console.log(\"found entry from bottom at \" + p + \",\" + q);\n              break;\n            }\n          } else {\n            if(cval & Node0) { /* proceed searchin in x-direction */\n              console.log(\"proceeding in x-direction!\");\n            } else { /* we must have found an entry into the regular grid */\n              console.log(\"found entry from top at \" + p + \",\" + q);\n              break;\n            }\n          }\n        } else if(d_x === 1){\n          if(d_o === 0){\n            console.log(\"wtf\");\n            break;\n          } else {\n            /* try to go upwards */\n            if((typeof grid.cells[q+1] !== 'undefined') && (typeof grid.cells[q+1][p] !== 'undefined')){\n              d_x = 0;\n              d_y = 1;\n              d_o = 0;\n            } else if(cval & Node1){\n              path.push([p+1,q+1]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 1;\n            } else { /* found an entry point into regular grid! */\n              path.push([p+cell.topleft, q + 1]);\n              d_x = 0;\n              d_y = -1;\n              d_o = 0;\n              closed = true;\n              //console.log(\"found entry from bottom at \" + p + \",\" + q);\n              break;\n            }\n          }\n        } else if(d_y === -1){\n          if(d_o === 1){\n            /* try to go right */\n            if(typeof grid.cells[q][p+1] !== 'undefined'){\n              d_x = 1;\n              d_y = 0;\n              d_o = 1;\n            } else if(cval & Node2){\n              path.push([p+1,q]);\n              d_x = 0;\n              d_y = -1;\n              d_o = 1;\n            } else { /* found entry into regular grid! */\n              path.push([p+1, q + cell.righttop]);\n              d_x = -1;\n              d_y = 0;\n              d_o = 1;\n              closed = true;\n              //console.log(\"found entry from top at \" + p + \",\" + q);\n              break;\n            }\n          } else {\n            console.log(\"wtf\");\n            break;\n          }\n        } else if(d_y === 1){\n          if(d_o === 0){\n            //console.log(\"we came from bottom left and proceed to the left\");\n            /* try to go left */\n            if(typeof grid.cells[q][p - 1] !== 'undefined'){\n              d_x = -1;\n              d_y = 0;\n              d_o = 0;\n            } else if(cval & Node0){\n              path.push([p,q+1]);\n              d_x = 0;\n              d_y = 1;\n              d_o = 0;\n            } else { /* found an entry point into regular grid! */\n              path.push([p, q + cell.leftbottom]);\n              d_x = 1;\n              d_y = 0;\n              d_o = 0;\n              closed = true;\n              //console.log(\"found entry from bottom at \" + p + \",\" + q);\n              break;\n            }\n          } else {\n            //console.log(\"we came from bottom right and proceed to the right\");\n            console.log(\"wtf\");\n            break;\n          }\n        } else {\n          console.log(\"where did we came from???\");\n          break;\n        }\n\n      }\n\n      p += d_x;\n      q += d_y;\n      //console.log(\"going on to  \" + p + \",\" + q + \" via \" + d_x + \" \" + d_y + \" \" + d_o);\n\n      if((p === i) && (q === j)){ /* bail out, once we've closed a circle path */\n        break;\n      }\n\n    }\n\n    //console.log(\"exit with \" + p + \",\" + q + \" \" + d_x + \" \" + d_y + \" \" + d_o);\n    return { path: path, i: p, j: q, x: d_x, y: d_y, o: d_o };\n  }\n\n  function deleteEdge(cell, edgeIdx){\n    delete cell.edges[edgeIdx];\n    for(var k = edgeIdx + 1; k < cell.edges.length; k++){\n      cell.edges[k-1] = cell.edges[k];\n    }\n    cell.edges.pop();\n  }\n\n  function getStartXY(cell){\n\n    if(cell.edges.length > 0){\n      var e = cell.edges[cell.edges.length - 1];\n      //console.log(\"starting with edge \" + e);\n      var cval = cell.cval_real;\n      switch(e){\n        case 0:   if(cval & Node1){ /* node 1 within range */\n                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};\n                  } else { /* node 1 below or above threshold */\n                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};\n                  }\n        case 1:   if(cval & Node2){\n                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};\n                  } else {\n                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};\n                  }\n        case 2:   if(cval & Node2){\n                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};\n                  } else {\n                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};\n                  }\n        case 3:   if(cval & Node3){\n                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};\n                  } else {\n                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};\n                  }\n        case 4:   if(cval & Node1){\n                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};\n                  } else {\n                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};\n                  }\n        case 5:   if(cval & Node2){\n                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};\n                  } else {\n                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};\n                  }\n        case 6:   if(cval & Node2){\n                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};\n                  } else {\n                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};\n                  }\n        case 7:   if(cval & Node3){\n                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};\n                  } else {\n                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};\n                  }\n        case 8:   if(cval & Node2){\n                    return {p: [cell.bottomright], x: 0, y: 1, o: 1};\n                  } else {\n                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};\n                  }\n        case 9:   if(cval & Node3){\n                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};\n                  } else {\n                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};\n                  }\n        case 10:  if(cval & Node3){\n                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};\n                  } else {\n                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};\n                  }\n        case 11:  if(cval & Node0){\n                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};\n                  } else {\n                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};\n                  }\n        case 12:  if(cval & Node2){\n                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};\n                  } else {\n                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};\n                  }\n        case 13:  if(cval & Node3){\n                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};\n                  } else {\n                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};\n                  }\n        case 14:  if(cval & Node3){\n                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};\n                  } else {\n                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};\n                  }\n        case 15:  if(cval & Node0){\n                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};\n                  } else {\n                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};\n                  }\n        case 16:  if(cval & Node2){\n                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};\n                  } else {\n                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};\n                  }\n        case 17:  if(cval & Node0){\n                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};\n                  } else {\n                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};\n                  }\n        case 18:  if(cval & Node3){\n                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};\n                  } else {\n                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};\n                  }\n        case 19:  if(cval & Node0){\n                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};\n                  } else {\n                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};\n                  }\n        case 20:  if(cval & Node0){\n                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};\n                  } else {\n                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};\n                  }\n        case 21:  if(cval & Node1){\n                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};\n                  } else {\n                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};\n                  }\n        case 22:  if(cval & Node0){\n                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};\n                  } else {\n                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};\n                  }\n        case 23:  if(cval & Node1){\n                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};\n                  } else {\n                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};\n                  }\n        default:  console.log(\"edge index out of range!\");\n                  console.log(cell);\n                  break;\n      }\n    }\n\n    return null;\n  }\n\n  function getExitXY(cell, x, y, o){\n\n    var e, id_x, x, y, d_x, d_y, cval = cell.cval;\n    var d_o;\n\n    switch(x){\n      case -1:  switch(o){\n                  case 0:   e = isoBandEdgeRB[cval];\n                            d_x = isoBandNextXRB[cval];\n                            d_y = isoBandNextYRB[cval];\n                            d_o = isoBandNextORB[cval];\n                            break;\n                  default:  e = isoBandEdgeRT[cval];\n                            d_x = isoBandNextXRT[cval];\n                            d_y = isoBandNextYRT[cval];\n                            d_o = isoBandNextORT[cval];\n                            break;\n                };\n                break;\n      case 1:   switch(o){\n                  case 0:   e = isoBandEdgeLB[cval];\n                            d_x = isoBandNextXLB[cval];\n                            d_y = isoBandNextYLB[cval];\n                            d_o = isoBandNextOLB[cval];\n                            break;\n                  default:  e = isoBandEdgeLT[cval];\n                            d_x = isoBandNextXLT[cval];\n                            d_y = isoBandNextYLT[cval];\n                            d_o = isoBandNextOLT[cval];\n                            break;\n                };\n                break;\n      default:  switch(y){\n                  case -1:  switch(o){\n                              case 0:   e = isoBandEdgeTL[cval];\n                                        d_x = isoBandNextXTL[cval];\n                                        d_y = isoBandNextYTL[cval];\n                                        d_o = isoBandNextOTL[cval];\n                                        break;\n                              default:  e = isoBandEdgeTR[cval];\n                                        d_x = isoBandNextXTR[cval];\n                                        d_y = isoBandNextYTR[cval];\n                                        d_o = isoBandNextOTR[cval];\n                                        break;\n                            };\n                            break;\n                  case 1:   switch(o){\n                              case 0:   e = isoBandEdgeBL[cval];\n                                        d_x = isoBandNextXBL[cval];\n                                        d_y = isoBandNextYBL[cval];\n                                        d_o = isoBandNextOBL[cval];\n                                        break;\n                              default:  e = isoBandEdgeBR[cval];\n                                        d_x = isoBandNextXBR[cval];\n                                        d_y = isoBandNextYBR[cval];\n                                        d_o = isoBandNextOBR[cval];\n                                        break;\n                            };\n                            break;\n                  default:  break;\n                };\n                break;\n    }\n\n    id_x = cell.edges.indexOf(e);\n    if(typeof cell.edges[id_x] !== 'undefined'){\n      deleteEdge(cell, id_x);\n    } else {\n      //console.log(\"wrong edges...\");\n      //console.log(x + \" \" + y + \" \" + o);\n      //console.log(cell);\n      return null;\n    }\n\n    cval = cell.cval_real;\n\n    switch(e){\n        case 0:   if(cval & Node1){ /* node 1 within range */\n                    x = cell.topleft;\n                    y = 1;\n                  } else { /* node 1 below or above threshold */\n                    x = 1;\n                    y = cell.righttop;\n                  }\n                  break;\n        case 1:   if(cval & Node2){\n                    x = 1;\n                    y = cell.rightbottom;\n                  } else {\n                    x = cell.topleft;\n                    y = 1;\n                  }\n                  break;\n        case 2:   if(cval & Node2){\n                    x = cell.topleft;\n                    y = 1;\n                  } else {\n                    x = cell.bottomright;\n                    y = 0;\n                  }\n                  break;\n        case 3:   if(cval & Node3){\n                    x = cell.bottomleft;\n                    y = 0;\n                  } else {\n                    x = cell.topleft;\n                    y = 1;\n                  }\n                  break;\n        case 4:   if(cval & Node1){\n                    x = cell.topright;\n                    y = 1;\n                  } else {\n                    x = 1;\n                    y = cell.righttop;\n                  }\n                  break;\n        case 5:   if(cval & Node2){\n                    x = 1;\n                    y = cell.rightbottom;\n                  } else {\n                    x = cell.topright;\n                    y = 1;\n                  }\n                  break;\n        case 6:   if(cval & Node2){\n                    x = cell.topright;\n                    y = 1;\n                  } else {\n                    x = cell.bottomright;\n                    y = 0;\n                  }\n                  break;\n        case 7:   if(cval & Node3){\n                    x = cell.bottomleft;\n                    y = 0;\n                  } else {\n                    x = cell.topright;\n                    y = 1;\n                  }\n                  break;\n        case 8:   if(cval & Node2){\n                    x = 1;\n                    y = cell.righttop;\n                  } else {\n                    x = cell.bottomright;\n                    y = 0;\n                  }\n                  break;\n        case 9:   if(cval & Node3){\n                    x = cell.bottomleft;\n                    y = 0;\n                  } else {\n                    x = 1;\n                    y = cell.righttop;\n                  }\n                  break;\n        case 10:  if(cval & Node3){\n                    x = 1;\n                    y = cell.righttop;\n                  } else {\n                    x = 0;\n                    y = cell.leftbottom;\n                  }\n                  break;\n        case 11:  if(cval & Node0){\n                    x = 0;\n                    y = cell.lefttop;\n                  } else {\n                    x = 1;\n                    y = cell.righttop;\n                  }\n                  break;\n        case 12:  if(cval & Node2){\n                    x = 1;\n                    y = cell.rightbottom;\n                  } else {\n                    x = cell.bottomright;\n                    y = 0;\n                  }\n                  break;\n        case 13:  if(cval & Node3){\n                    x = cell.bottomleft;\n                    y = 0;\n                  } else {\n                    x = 1;\n                    y = cell.rightbottom;\n                  }\n                  break;\n        case 14:  if(cval & Node3){\n                    x = 1;\n                    y = cell.rightbottom;\n                  } else {\n                    x = 0;\n                    y = cell.leftbottom;\n                  }\n                  break;\n        case 15:  if(cval & Node0){\n                    x = 0;\n                    y = cell.lefttop;\n                  } else {\n                    x = 1;\n                    y = cell.rightbottom;\n                  }\n                  break;\n        case 16:  if(cval & Node2){\n                    x = 0;\n                    y = cell.leftbottom;\n                  } else {\n                    x = cell.bottomright;\n                    y = 0;\n                  }\n                  break;\n        case 17:  if(cval & Node0){\n                    x = 0;\n                    y = cell.lefttop;\n                  } else {\n                    x = cell.bottomright;\n                    y = 0;\n                  }\n                  break;\n        case 18:  if(cval & Node3){\n                    x = cell.bottomleft;\n                    y = 0;\n                  } else {\n                    x = 0;\n                    y = cell.leftbottom;\n                  }\n                  break;\n        case 19:  if(cval & Node0){\n                    x = 0;\n                    y = cell.lefttop;\n                  } else {\n                    x = cell.bottomleft;\n                    y = 0;\n                  }\n                  break;\n        case 20:  if(cval & Node0){\n                    x = 0;\n                    y = cell.leftbottom;\n                  } else {\n                    x = cell.topleft;\n                    y = 1;\n                  }\n                  break;\n        case 21:  if(cval & Node1){\n                    x = cell.topright;\n                    y = 1;\n                  } else {\n                    x = 0;\n                    y = cell.leftbottom;\n                  }\n                  break;\n        case 22:  if(cval & Node0){\n                    x = 0;\n                    y = cell.lefttop;\n                  } else {\n                    x = cell.topleft;\n                    y = 1;\n                  }\n                  break;\n        case 23:  if(cval & Node1){\n                    x = cell.topright;\n                    y = 1;\n                  } else {\n                    x = 0;\n                    y = cell.lefttop;\n                  }\n                  break;\n        default:  console.log(\"edge index out of range!\");\n                  console.log(cell);\n                  return null;\n    }\n\n    if((typeof x === 'undefined') || (typeof y === 'undefined') || (typeof d_x === 'undefined') || (typeof d_y === 'undefined') || (typeof d_o === 'undefined')){\n      console.log(\"undefined value!\");\n      console.log(cell);\n      console.log(x + \" \" + y + \" \" + d_x + \" \" + d_y + \" \" + d_o);\n    }\n    return {p: [x, y], x: d_x, y: d_y, o: d_o};\n  }\n\n  function BandGrid2Areas(grid){\n    var areas = [];\n    var area_idx = 0;\n    var rows = grid.rows;\n    var cols = grid.cols;\n\n    grid.cells.forEach(function(g, j){\n      g.forEach(function(gg, i){\n        if(typeof gg !== 'undefined'){\n          var a = polygon_table[gg.cval](gg);\n          if((typeof a === 'object') && isArray(a)){\n            if((typeof a[0] === 'object') && isArray(a[0])){\n              if((typeof a[0][0] === 'object') && isArray(a[0][0])){\n                a.forEach(function(aa,k){\n                  aa.forEach(function(aaa){\n                    aaa[0] += i;\n                    aaa[1] += j;\n                  });\n                  areas[area_idx++] = aa;\n                });\n              } else {\n\n                a.forEach(function(aa,k){\n                  aa[0] += i;\n                  aa[1] += j;\n                });\n                areas[area_idx++] = a;\n              }\n            } else {\n              console.log(\"bandcell polygon with malformed coordinates\");\n            }\n          } else {\n            console.log(\"bandcell polygon with null coordinates\");\n          }\n        }\n      });\n    });\n\n    return areas;\n  }\n\n  if (typeof define === \"function\" && define.amd) define(my);\n\n  return my;\n}(MarchingSquaresJS || {}));\n\nexport {MarchingSquaresJS};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/MarchingSquares.js\n **/","import MarchingSquaresJS from \"./MarchingSquares.js\";\n\n// drawContour :: Svg -> [[Number]] -> Int -> IO ()\nexport default function drawContour(svg, data, width, customZs, reverse) {\n  var zs = customZs || [0,1,2, 4.5, 9, 13.5, 18, 22.5, 50, 100, 200, 300]\n\n  var xSize = data[0].length;\n  var ySize = data.length;\n\n  var xs = d3.range(0, xSize);\n  var ys = d3.range(0, ySize);\n  var height = width * (ys.length / xs.length);\n\n  var xScale = d3.scale.linear()\n    .range([0, width])\n    .domain([0, xSize])\n\n  var yScale = d3.scale.linear()\n    .range([0, height])\n    .domain([0, ySize])\n\n  var colours = d3.scale.linear().domain([zs[0], zs[zs.length - 1]])\n        .range(reverse ? [d3.rgb(180,180,180), d3.rgb(0,0,0)] : [d3.rgb(0,0,0), d3.rgb(180,180,180)]);\n\n\n  var isoBands = [];\n  for (var i = 1; i < zs.length; i++) {\n      var lowerBand = zs[i-1];\n      var upperBand = zs[i];\n\n      var band = MarchingSquaresJS.IsoBands(data, lowerBand, upperBand - lowerBand);\n      isoBands.push({\"coords\": band, \"level\": i, \"val\": zs[i]});\n  }\n\n  svg.selectAll(\"path\")\n  .data(isoBands)\n  .enter().append(\"path\")\n  .style(\"fill\",function(d) { return colours(d.val);})\n  .style(\"stroke-opacity\",0.2)\n  .style(\"stroke\",\"black\")\n  .style('opacity', 0.5)\n  .attr(\"d\", function(d) {\n      var p = \"\";\n      d.coords.forEach(function(aa, i){\n          p += (d3.svg.line()\n                .x(function(dat){ return xScale(dat[0]); })\n                .y(function(dat){ return yScale(dat[1]); })\n                .interpolate(\"linear\")\n               )(aa) + \"Z\";\n      });\n      return p; \n  });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/drawContour.js\n **/","export default function interpolate(n, min, max) {\n  const step = (max - min) / n;\n  let i = 0, curr = min, vals=[];\n\n  for (i; i <= n; i++) {\n    vals.push(curr);\n    curr += step;\n  }\n\n  return vals;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interpolate.js\n **/","function normalRandom(mean, variance, acceptFunc) {\n  if (mean == undefined)\n    mean = 0.0;\n  if (variance == undefined)\n    variance = 1.0;\n  var V1, V2, S;\n  do {\n    var U1 = Math.random();\n    var U2 = Math.random();\n    V1 = 2 * U1 - 1;\n    V2 = 2 * U2 - 1;\n    S = V1 * V1 + V2 * V2;\n  } while (S > 1);\n \n  var X = Math.sqrt(-2 * Math.log(S) / S) * V1;\n  X = mean + Math.sqrt(variance) * X;\n  return X;\n}\n\nconst rosenbrock = (x, y) => Math.pow(1 - x, 2) + (100 * Math.pow(y - Math.pow(x, 2), 2));\n\nexport default function metropolisHastings(iterations, variance, acceptFunc) {\n  var i = 0;\n  var current = [0, 7];\n  var chain = [current];\n  var oldlik = rosenbrock(...current);\n  const perturb = x => x + (normalRandom(0,variance));\n\n  var accepted = 0;\n  for (i; i < iterations; i++) {\n    var candidate = current.map(perturb);\n    var newlik = rosenbrock(...candidate);\n    var acceptProbability = oldlik/newlik;\n\n    if (Math.random() < acceptProbability) {\n      oldlik = newlik;\n      current = candidate;\n      accepted += 1;\n    }\n    chain.push(current);\n  }\n  if (acceptFunc) acceptFunc(accepted/iterations*100);\n  return chain;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/metropolis.js\n **/","//  Ramda v0.20.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    /* eslint-disable no-unused-vars */\n    var _arity = function _arity(n, fn) {\n        /* eslint-disable no-unused-vars */\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _arrayOf = function _arrayOf() {\n        return Array.prototype.slice.call(arguments);\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var _functionName = function _functionName(f) {\n        // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n        var match = String(f).match(/^function (\\w*)/);\n        return match == null ? '' : match[1];\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    var _isFunction = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Function]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isPlaceholder = function _isPlaceholder(a) {\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    var _objectAssign = function _objectAssign(target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        var idx = 1;\n        var length = arguments.length;\n        while (idx < length) {\n            var source = arguments[idx];\n            if (source != null) {\n                for (var nextKey in source) {\n                    if (_has(nextKey, source)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n            idx += 1;\n        }\n        return output;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it\n     * will default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0 || _isPlaceholder(a)) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            switch (arguments.length) {\n            case 0:\n                return f3;\n            case 1:\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                });\n            case 2:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _curry1(function (_c) {\n                    return fn(a, b, _c);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b, c);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b, c);\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n                    return fn(a, b, _c);\n                }) : fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @param {Array} received An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (!_isPlaceholder(result)) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    var _dropLastWhile = function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    };\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropLast = function () {\n        function XDropLast(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLast.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.full) {\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n            }\n            this.store(input);\n            return result;\n        };\n        XDropLast.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        return _curry2(function _xdropLast(n, xf) {\n            return new XDropLast(n, xf);\n        });\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n === 0) {\n                return _reduced(result);\n            } else {\n                this.n -= 1;\n                return this.xf['@@transducer/step'](result, input);\n            }\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    /**\n     * Adds two values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return Number(a) + Number(b);\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array, returning a\n     * new copy of the array with the element at the given index replaced with the\n     * result of the function application.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @see R.update\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if\n     * there are any that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n     * other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n     * greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @see R.transduce\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by\n     * the given element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should be a\n     * bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value. Note that this copies and flattens prototype\n     * properties onto the new object as well. All non-primitive properties are\n     * copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes required\n     * to create the given path, and placing the specific value at the tail end of\n     * that path. Note that this copies and flattens prototype properties onto the\n     * new object as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return val;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     * @see R.partial\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * Restricts a number to be within a range.\n     *\n     * Also works for other ordered types such as Strings and Dates.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Relaction\n     * @sig Ord a => a -> a -> a -> a\n     * @param {Number} minimum number\n     * @param {Number} maximum number\n     * @param {Number} value to be clamped\n     * @return {Number} Returns the clamped value\n     * @example\n     *\n     *      R.clamp(1, 10, -1) // => 1\n     *      R.clamp(1, 10, 11) // => 10\n     *      R.clamp(1, 10, 4)  // => 4\n     */\n    var clamp = _curry3(function clamp(min, max, value) {\n        if (min > max) {\n            throw new Error('min must not be greater than max in clamp(min, max, value)');\n        }\n        return value < min ? min : value > max ? max : value;\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first\n     * element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Counts the elements of a list according to how many match each value of a\n     * key generated by the supplied function. Returns an object mapping the keys\n     * produced by `fn` to the number of occurrences in the list. Note that all\n     * keys are coerced to strings because of how JavaScript objects work.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = _curry2(function countBy(fn, list) {\n        var counts = {};\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            var key = fn(list[idx]);\n            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;\n            idx += 1;\n        }\n        return counts;\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the specified\n     * arity. The curried function has two unusual capabilities. First, its\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.difference\n     * @example\n     *\n     *      var cmp = (x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n                out.push(first[idx]);\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the given path.\n     * Note that this copies and flattens prototype properties onto the new object\n     * as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, skipping elements while the\n     * predicate function returns `true`. The predicate function is passed one\n     * argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n     * types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`,\n     * according to the `transformation` functions. All non-primitive properties\n     * are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key\n     * does not exist in the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var result = {};\n        var transformation, key, type;\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Returns the first element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each\n     * element in the list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.forEach` method. For more\n     * details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n     * the original array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @see R.addIndex\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      //-> 6\n     *      //-> 7\n     *      //-> 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Creates a new object out of a list key-value pairs.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var idx = 0;\n        var len = pairs.length;\n        var out = {};\n        while (idx < len) {\n            if (_isArray(pairs[idx]) && pairs[idx].length) {\n                out[pairs[idx][0]] = pairs[idx][1];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has a property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good\n     * as a default or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse`\n     * function depending upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @see R.unless, R.when\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`. _Note that\n     * this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n     * destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor. This\n     * function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (x instanceof String) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own properties of\n     * the supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    // Safari bug\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        // Safari bug\n        var hasArgsEnumBug = function () {\n            'use strict';\n            return arguments.propertyIsEnumerable('length');\n        }();\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, nIdx;\n            var ks = [];\n            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n            for (prop in obj) {\n                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the properties of the supplied\n     * object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop;\n        var ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && is(Number, list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from left to right, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var appender = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from right to left, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1;\n        var result = [];\n        var tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function will\n     * return an empty array when there are no matches. This differs from\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @see R.test\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Create a new object with the own properties of the first object merged with\n     * the own properties of the second object. If a key exists in both objects,\n     * the value from the second object will be used.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.mergeWith, R.mergeWithKey\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = _curry2(function merge(l, r) {\n        return _assign({}, l, r);\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return _assign.apply(null, [{}].concat(list));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the key\n     * and the values associated with the key in each object, with the result being\n     * used as the value associated with the key in the returned object. The key\n     * will be excluded from the returned object if the resulting value is\n     * `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWith\n     * @example\n     *\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     *      R.mergeWithKey(concatValues,\n     *                     { a: true, thing: 'foo', values: [10, 20] },\n     *                     { b: true, thing: 'bar', values: [15, 35] });\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n     */\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n        var result = {};\n        var k;\n        for (k in l) {\n            if (_has(k, l)) {\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n            }\n        }\n        for (k in r) {\n            if (_has(k, r) && !_has(k, result)) {\n                result[k] = r[k];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the second parameter by the first and returns the remainder. Note\n     * that this function preserves the JavaScript-style behavior for modulo. For\n     * mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); => true\n     *      R.not(1); => false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string. If n is negative the\n     * element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth('abc', 2); //=> 'c'\n     *      R.nth('abc', 3); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        return function () {\n            return nth(n, arguments);\n        };\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of\n     * `fn` such that `fn` can only ever be called once, no matter how many times\n     * the returned function is invoked. The first value calculated is returned in\n     * subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false;\n        var result;\n        return _arity(fn.length, function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        });\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    // `Identity` is a functor that holds a single value, where `map` simply\n    // transforms the held value with the provided function.\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    var over = function () {\n        // `Identity` is a functor that holds a single value, where `map` simply\n        // transforms the held value with the provided function.\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            // The value returned by the getter function is first transformed with `f`,\n            // then set as the value of an `Identity`. This is then mapped over with the\n            // setter function of the lens.\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.objOf, R.of\n     * @example\n     *\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path`.\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        var val = obj;\n        var idx = 0;\n        while (idx < paths.length) {\n            if (val == null) {\n                return;\n            }\n            val = val[paths[idx]];\n            idx += 1;\n        }\n        return val;\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns the\n     * value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns `true` if the specified object property at given path satisfies the\n     * given predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Logic\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n     * @param {Function} pred\n     * @param {Array} propPath\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propSatisfies, R.path\n     * @example\n     *\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     */\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n        return propPath.length > 0 && pred(path(propPath, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified. If\n     * the key does not exist, the property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for\n     * properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that satisfy\n     * the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick, R.filter\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the\n     * contents of the list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated\n     * property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property. Otherwise returns the provided default\n     * value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq, R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the reduce\n     * and transduce functions. The returned value should be considered a black\n     * box: the internal structure is not guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above. For instance, it is not currently supported by reduceRight.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @see R.reduce, R.transduce\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements. _Note that this is not destructive_: it returns a copy of\n     * the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values\n     * from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function,\n     * which should accept two values at a time and return a negative number if the\n     * first value is smaller, a positive number if it's larger, and zero if they\n     * are equal. Please note that this is a **copy** of the list. It does not\n     * modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Splits a given list or string at a given index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig Number -> [a] -> [[a], [a]]\n     * @sig Number -> String -> [String, String]\n     * @param {Number} index The index where the array/string is split.\n     * @param {Array|String} array The array/string to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n     */\n    var splitAt = _curry2(function splitAt(index, array) {\n        return [\n            slice(0, index, array),\n            slice(index, length(array), array)\n        ];\n    });\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and a predicate and returns a pair of lists with the following properties:\n     *\n     *  - the result of concatenating the two output lists is equivalent to the input list;\n     *  - none of the elements of the first output list satisfies the predicate; and\n     *  - if the second output list is non-empty, its first element satisfies the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n     * @param {Function} pred The predicate that determines where the array is split.\n     * @param {Array} list The array to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n     */\n    var splitWhen = _curry2(function splitWhen(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var prefix = [];\n        while (idx < len && !pred(list[idx])) {\n            prefix.push(list[idx]);\n            idx += 1;\n        }\n        return [\n            prefix,\n            _slice(list, idx)\n        ];\n    });\n\n    /**\n     * Subtracts its second argument from its first argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return Number(a) - Number(b);\n    });\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.head, R.init, R.last\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, and terminating when the\n     * predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile, R.addIndex\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list,\n     * passing each value to the supplied predicate function, and terminating when\n     * the predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      //-> 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results\n     * of those function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n     * and is gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (Number -> a) -> Number -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var idx = 0;\n        var list;\n        if (len < 0 || isNaN(len)) {\n            throw new RangeError('n must be a non-negative number');\n        }\n        list = new Array(len);\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. Only the object's\n     * own properties are used.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. The object's own\n     * properties and prototype properties are used. Note that the order of the\n     * output array is not guaranteed to be consistent across different JS\n     * platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Transposes the rows and columns of a 2D list.\n     * When passed a list of `n` lists of length `x`,\n     * returns a list of `x` lists of length `n`.\n     *\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [[a]] -> [[a]]\n     * @param {Array} list A 2D list\n     * @return {Array} A 2D list\n     * @example\n     *\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     *\n     * If some of the rows are shorter than the following rows, their elements are skipped:\n     *\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n     */\n    var transpose = _curry1(function transpose(outerlist) {\n        var i = 0;\n        var result = [];\n        while (i < outerlist.length) {\n            var innerlist = outerlist[i];\n            var j = 0;\n            while (j < innerlist.length) {\n                if (typeof result[j] === 'undefined') {\n                    result[j] = [];\n                }\n                result[j].push(innerlist[j]);\n                j += 1;\n            }\n            i += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n     * function evaluates the `tryer`; if it does not throw, it simply returns the\n     * result. If the `tryer` *does* throw, the returned function evaluates the\n     * `catcher` function and returns its result. Note that for effective\n     * composition with this function, both the `tryer` and `catcher` functions\n     * must return the same type of results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n     * @param {Function} tryer The function that may throw.\n     * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n     * @return {Function} A new function that will catch exceptions and send then to the catcher.\n     * @example\n     *\n     *      R.tryCatch(R.prop('x'), R.F, {x: true}); //=> true\n     *      R.tryCatch(R.prop('x'), R.F, null);      //=> false\n     */\n    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n        return _arity(tryer.length, function () {\n            try {\n                return tryer.apply(this, arguments);\n            } catch (e) {\n                return catcher.apply(this, _concat([e], arguments));\n            }\n        });\n    });\n\n    /**\n     * Gives a single-word string description of the (native) type of a value,\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n     * attempt to distinguish user Object types any further, reporting them all as\n     * 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns a\n     * function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function which\n     * takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns\n     * either false to stop iteration or an array of length 2 containing the value\n     * to add to the resulting list and the seed to be used in the next call to the\n     * iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied predicate to\n     * two list elements. Prefers the first item if two items compare equal based\n     * on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is not satisfied, the function will return the result of\n     * calling the `whenFalseFn` function with the same argument. If the predicate\n     * is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @see R.ifElse, R.when\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Takes a predicate, a transformation function, and an initial value,\n     * and returns a value of the same type as the initial value.\n     * It does so by applying the transformation until the predicate is satisfied,\n     * at which point it returns the satisfactory value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred A predicate function\n     * @param {Function} fn The iterator function\n     * @param {*} init Initial value\n     * @return {*} Final value that satisfies predicate\n     * @example\n     *\n     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n     */\n    var until = _curry3(function until(pred, fn, init) {\n        var val = init;\n        while (!pred(val)) {\n            val = fn(val);\n        }\n        return val;\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the provided index\n     * replaced with the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @see R.adjust\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a\n     * new curried function. When the new function is invoked, it calls the\n     * function `fn` with parameters consisting of the result of calling each\n     * supplied handler on successive arguments to the new function.\n     *\n     * If more arguments are passed to the returned function than transformer\n     * functions, those arguments are passed directly to `fn` as additional\n     * parameters. If you expect additional arguments that don't need to be\n     * transformed, although you can ignore them, it's best to pass an identity\n     * function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curryN(transformers.length, function () {\n            var args = [];\n            var idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        });\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across different\n     * JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties, of the\n     * supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop;\n        var vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    // `Const` is a functor that effectively ignores the function given to `map`.\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    var view = function () {\n        // `Const` is a functor that effectively ignores the function given to `map`.\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            // Using `Const` effectively ignores the setter function of the `lens`,\n            // leaving the value returned by the getter function unmodified.\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is satisfied, the function will return the result of calling\n     * the `whenTrueFn` function with the same argument. If the predicate is not\n     * satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @see R.ifElse, R.unless\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of the\n     * test object. `where` returns true if all the predicates return true, false\n     * otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.where({\n     *        a: R.equals('foo'),\n     *        b: R.complement(R.equals('bar')),\n     *        x: R.gt(_, 10),\n     *        y: R.lt(_, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the\n     * parameters, or do other processing either before the internal function is\n     * called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible pair\n     * from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up equally-positioned\n     * items from both lists. The returned list is truncated to the length of the\n     * shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     * Key/value pairing is truncated to the length of the shorter of the two lists.\n     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0;\n        var len = Math.min(keys.length, values.length);\n        var out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to each\n     * equally-positioned pair in the lists. The returned list is truncated to the\n     * length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @param {Boolean} deep Whether or not to perform deep cloning.\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo, deep) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value.valueOf());\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    var _dropLast = function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n                return a === b;\n            }\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'Error':\n            return a.name === b.name && a.message === b.message;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n     * function based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, jlen, j;\n            var result = [];\n            var idx = 0;\n            var ilen = list.length;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0;\n            var len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                xs.push(x);\n                return xs;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    var _xdropLastWhile = function () {\n        function XDropLastWhile(fn, xf) {\n            this.f = fn;\n            this.retained = [];\n            this.xf = xf;\n        }\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n            this.retained = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n        };\n        XDropLastWhile.prototype.flush = function (result, input) {\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n            this.retained = [];\n            return this.xf['@@transducer/step'](result, input);\n        };\n        XDropLastWhile.prototype.retain = function (result, input) {\n            this.retained.push(input);\n            return result;\n        };\n        return _curry2(function _xdropLastWhile(fn, xf) {\n            return new XDropLastWhile(fn, xf);\n        });\n    }();\n\n    var _xgroupBy = function () {\n        function XGroupBy(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.inputs = {};\n        }\n        XGroupBy.prototype['@@transducer/init'] = _xfBase.init;\n        XGroupBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            this.inputs = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XGroupBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.f(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                []\n            ];\n            this.inputs[key][1] = append(input, this.inputs[key][1]);\n            return result;\n        };\n        return _curry2(function _xgroupBy(f, xf) {\n            return new XGroupBy(f, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new\n     * parameters to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that\n     * more closely resembles `Array.prototype.map`. Note that this will only work\n     * for functions in which the iteration callback function is the first\n     * parameter, and where the list is the last parameter. (This latter might be\n     * unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n     * copied, but assigned by their reference.\n     *\n     * Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried function\n     * has two unusual capabilities. First, its arguments needn't be provided one\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take, R.transduce\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\n    /**\n     * Returns a new list containing all but last the`n` elements of a given list,\n     * passing each value from the right to the supplied predicate function,\n     * skipping elements while the predicate function returns `true`. The predicate\n     * function is passed one argument: (value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile, R.addIndex\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n     * cyclical data structures.\n     *\n     * Dispatches symmetrically to the `equals` methods of both arguments, if\n     * present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n     * same type containing the members of the given filterable which satisfy the\n     * given predicate.\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.reject, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    // else\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n        return _isObject(filterable) ? _reduce(function (acc, key) {\n            if (pred(filterable[key])) {\n                acc[key] = filterable[key];\n            }\n            return acc;\n        }, {}, keys(filterable)) : // else\n        _filter(pred, filterable);\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n     * and putting them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two\n     * arguments' order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of\n     * calling a String-returning function on each element, and grouping the\n     * results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @see R.transduce\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_dispatchable('groupBy', _xgroupBy, function groupBy(fn, list) {\n        return _reduce(function (acc, elt) {\n            var key = fn(elt);\n            acc[key] = append(elt, acc[key] || (acc[key] = []));\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {*}\n     * @see R.tail, R.init, R.last\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Given a function that generates a key, turns a list of objects into an\n     * object indexing the objects by the given key. Note that if multiple\n     * objects generate the same value for the indexing key only the last value\n     * will be included in the generated object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} array The array of objects to index\n     * @return {Object} An object indexing each array element by the given property.\n     * @example\n     *\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     *      R.indexBy(R.prop('id'), list);\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n     */\n    var indexBy = _curry2(function indexBy(fn, list) {\n        return _reduce(function (acc, elem) {\n            var key = fn(elem);\n            acc[key] = elem;\n            return acc;\n        }, {}, list);\n    });\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.last, R.head, R.tail\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @return {Array} A new list containing those elements common to both lists.\n     * @see R.intersection\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        var results = [];\n        var idx = 0;\n        while (idx < filteredList.length) {\n            if (_containsWith(pred, filteredList[idx], lookupList)) {\n                results[results.length] = filteredList[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Transforms the items of the list with the transducer and appends the\n     * transformed items to the accumulator using an appropriate iterator function\n     * based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated\n     * items will be appended to arrays and concatenated to strings. Objects will\n     * be merged directly or 2-item arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity\n     * reducing iterator function, step, 0-arity initial value function, init, and\n     * 1-arity result extraction function result. The step function is used as the\n     * iterator function in reduce. The result function is used to convert the\n     * final accumulator into the return type and in most cases is R.identity. The\n     * init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n    });\n\n    /**\n     * Same as R.invertObj, however this accounts for objects with duplicate values\n     * by putting the values into an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object as values, and the\n     * values of the given object, which are coerced to strings, as keys. Note\n     * that the last key found is preferred when handling the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.init, R.head, R.tail\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in an array, or -1 if\n     * the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Takes a function and\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n     * applies the function to each of the functor's values, and returns\n     * a functor of the same shape.\n     *\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * Also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @see R.transduce, R.addIndex\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * An Object-specific version of `map`. The function is applied to three\n     * arguments: *(value, key, obj)*. If only the value is significant, use\n     * `map` instead.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig ((*, String, Object) -> *) -> Object -> Object\n     * @param {Function} fn\n     * @param {Object} obj\n     * @return {Object}\n     * @see R.map\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the values\n     * associated with the key in each object, with the result being used as the\n     * value associated with the key in the returned object. The key will be\n     * excluded from the returned object if the resulting value is `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWithKey\n     * @example\n     *\n     *      R.mergeWith(R.concat,\n     *                  { a: true, values: [10, 20] },\n     *                  { b: true, values: [15, 35] });\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n     */\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n        return mergeWithKey(function (_, _l, _r) {\n            return fn(_l, _r);\n        }, l, r);\n    });\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Determines whether a nested path on an object has a specific value, in\n     * `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in\n     * the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return propSatisfies(equals(val), name, obj);\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is, R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return propSatisfies(is(type), name, obj);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It may use\n     * `R.reduced` to shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduced, R.addIndex\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var add = (a, b) => a + b;\n     *\n     *      R.reduce(add, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * Groups the elements of the list according to the result of calling\n     * the String-returning function `keyFn` on each element and reduces the elements\n     * of each group to a single value via the reducer function `valueFn`.\n     *\n     * This function is basically a more general `groupBy` function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category List\n     * @sig (b -> String) -> ((a, b) -> a) -> a -> [b] -> {String: a}\n     * @param {Function} keyFn The function that maps the list's element into a key.\n     * @param {Function} valueFn The function that reduces the elements of each group to a single\n     *        value. Receives two values, accumulator for a particular group and the current element.\n     * @param {*} acc The (initial) accumulator value for each group.\n     * @param {Array} list The array to group.\n     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n     *         `valueFn` for elements which produced that key when passed to `keyFn`.\n     * @see R.groupBy, R.reduce\n     * @example\n     *\n     *      var byGrade = R.reduceBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var namesByGrade = byGrade(function(acc, student) {\n     *        return acc.concat(student.name);\n     *      }, []);\n     *      var students = [{name: 'Lucy', score: 92},\n     *                      {name: 'Drew', score: 85},\n     *                      // ...\n     *                      {name: 'Bart', score: 62}];\n     *      namesByGrade(students);\n     *      // {\n     *      //   'A': ['Lucy'],\n     *      //   'B': ['Drew']\n     *      //   // ...,\n     *      //   'F': ['Bart']\n     *      // }\n     */\n    var reduceBy = _curryN(4, [], function reduceBy(keyFn, valueFn, valueAcc, list) {\n        return _reduce(function (acc, elt) {\n            var key = keyFn(elt);\n            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n            return acc;\n        }, {}, list);\n    });\n\n    /**\n     * The complement of `filter`.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.filter, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    var reject = _curry2(function reject(pred, filterable) {\n        return filter(_complement(pred), filterable);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single\n     * item by iterating through the list, successively calling the transformed\n     * iterator function and passing it an accumulator value and the current value\n     * from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be\n     * wrapped as a transformer to initialize the transducer. A transformer can be\n     * passed directly in place of an iterator function. In both cases, iteration\n     * may be stopped early with the `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a\n     * transformer and can be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result\n     * extraction function, result. The step function is used as the iterator\n     * function in reduce. The result function is used to convert the final\n     * accumulator into the return type and in most cases is R.identity. The init\n     * function can be used to provide an initial accumulator, but is ignored by\n     * transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced, R.into\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list. Duplication is determined according to the value returned by\n     * applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(map(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    // Array.prototype.indexOf doesn't exist below IE9\n    // manually crawl the list to distinguish between +0 and -0\n    // NaN\n    // non-zero numbers can utilise Set\n    // all these types can utilise Set\n    // null can utilise Set\n    // anything else not covered above, defer to R.equals\n    var _indexOf = function _indexOf(list, a, idx) {\n        var inf, item;\n        // Array.prototype.indexOf doesn't exist below IE9\n        if (typeof list.indexOf === 'function') {\n            switch (typeof a) {\n            case 'number':\n                if (a === 0) {\n                    // manually crawl the list to distinguish between +0 and -0\n                    inf = 1 / a;\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (item === 0 && 1 / item === inf) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                } else if (a !== a) {\n                    // NaN\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (typeof item === 'number' && item !== item) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                }\n                // non-zero numbers can utilise Set\n                return list.indexOf(a, idx);\n            // all these types can utilise Set\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                return list.indexOf(a, idx);\n            case 'object':\n                if (a === null) {\n                    // null can utilise Set\n                    return list.indexOf(a, idx);\n                }\n            }\n        }\n        // anything else not covered above, defer to R.equals\n        while (idx < list.length) {\n            if (equals(list[idx], a)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if every one of the provided predicates is satisfied\n     * by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Returns `true` if all elements are unique, in `R.equals` terms, otherwise\n     * `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig [a] -> Boolean\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if all elements are unique, else `false`.\n     * @deprecated since v0.20.0\n     * @example\n     *\n     *      R.allUniq(['1', 1]); //=> true\n     *      R.allUniq([1, 1]);   //=> false\n     *      R.allUniq([[42], [42]]); //=> false\n     */\n    var allUniq = _curry1(function allUniq(list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            if (_indexOf(list, list[idx], idx + 1) >= 0) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also\n     * treats functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [f] -> [a] -> [f a]\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? curryN(Math.max(applicative.length, fn.length), function () {\n            return applicative.apply(this, arguments)(fn.apply(this, arguments));\n        }) : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Given a spec object recursively mapping properties to functions, creates a\n     * function producing an object of the same structure, by mapping each property\n     * to the result of calling its associated function with the supplied arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n     * @param {Object} spec an object recursively mapping properties to functions for\n     *        producing the values for these properties.\n     * @return {Function} A function that returns an object of the same structure\n     * as `spec', with each property set to the value returned by calling its\n     * associated function with the supplied arguments.\n     * @see R.juxt\n     * @example\n     *\n     *      var getMetrics = R.applySpec({\n     *                                      sum: R.add,\n     *                                      nested: { mul: R.multiply }\n     *                                   });\n     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n     */\n    var applySpec = _curry1(function applySpec(spec) {\n        spec = map(function (v) {\n            return typeof v == 'function' ? v : applySpec(v);\n        }, spec);\n        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n            var args = arguments;\n            return map(function (f) {\n                return apply(f, args);\n            }, spec);\n        });\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right branch\n     * produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call, [\n     *                                  R.pipe(R.prop('indent'), indentN),\n     *                                  R.prop('value')\n     *                              ]);\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results. `chain`\n     * is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig (a -> [b]) -> [a] -> [b]\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n     * to `fn` are applied to each of the predicates in turn until one returns a\n     * \"truthy\" value, at which point `fn` returns the result of applying its\n     * arguments to the corresponding transformer. If none of the predicates\n     * matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        var arity = reduce(max, 0, map(function (pair) {\n            return pair[0].length;\n        }, pairs));\n        return _arity(arity, function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        });\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type. The arity of the function\n     * returned is specified to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns\n     * a new function. When invoked, this new function is applied to some\n     * arguments, each branching function is applied to those same arguments. The\n     * results of each branching function are passed as arguments to the converging\n     * function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(reduce(max, 0, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements. The\n     * first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if the\n     * values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms, for\n     * the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Returns the position of the first occurrence of an item in an array, or -1\n     * if the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * juxt applies a list of functions to a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Function\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n     * @param {Array} fns An array of functions\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @see R.applySpec\n     * @example\n     *\n     *      var range = R.juxt([Math.min, Math.max]);\n     *      range(3, 4, 9, -3); //=> [-3, 9]\n     */\n    var juxt = _curry1(function juxt(fns) {\n        return converge(_arrayOf, fns);\n    });\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (toFunctorFn) {\n            return function (target) {\n                return map(function (focus) {\n                    return setter(focus, target);\n                }, toFunctorFn(getter(target)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig [String] -> Lens s a\n     * @param {Array} path The path to use.\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xyLens = R.lensPath(['x', 'y']);\n     *\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n     */\n    var lensPath = _curry1(function lensPath(p) {\n        return lens(path(p), assocPath(p));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.lift, R.ap\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Takes a predicate and a list or other \"filterable\" object and returns the\n     * pair of filterable objects of the same type of elements which do and do not\n     * satisfy, the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n     * @param {Function} pred A predicate to determine which side the element belongs to.\n     * @param {Array} filterable the list (or other filterable) to partition.\n     * @return {Array} An array, containing first the subset of elements that satisfy the\n     *         predicate, and second the subset of elements that do not satisfy.\n     * @see R.filter, R.reject\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     *\n     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n     */\n    var partition = juxt([\n        filter,\n        reject\n    ]);\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * **Note:** The result of pipe is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining functions\n     * must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n     * Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n     * @param {Function} of\n     * @param {*} traversable\n     * @return {*}\n     * @see R.traverse\n     * @example\n     *\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n     */\n    var sequence = _curry2(function sequence(of, traversable) {\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);\n        }, of([]), traversable);\n    });\n\n    /**\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n     * into an Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n     * @param {Function} of\n     * @param {Function} f\n     * @param {*} traversable\n     * @return {*}\n     * @see R.sequence\n     * @example\n     *\n     *      // Returns `Nothing` if the given divisor is `0`\n     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n     *\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n     */\n    var traverse = _curry3(function traverse(of, f, traversable) {\n        return sequence(of, map(f, traversable));\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            if (typeof x.toString === 'function') {\n                var repr = x.toString();\n                if (repr !== '[object Object]') {\n                    return repr;\n                }\n            }\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * **Note:** The result of compose is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.pipeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n     * least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. `R.equals`\n     * is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.liftN, R.lift\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.composeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Returns a new list without values in the first argument.\n     * `R.equals` is used to determine equality.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The values to be removed from `list2`.\n     * @param {Array} list2 The array to remove values from.\n     * @return {Array} The new array without values in `list1`.\n     * @see R.transduce\n     * @example\n     *\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n     */\n    var without = _curry2(function (xs, list) {\n        return reject(flip(_contains)(xs), list);\n    });\n\n    // A simple Set type that honours R.equals semantics\n    /* globals Set */\n    /**\n       * Combines the logic for checking whether an item is a member of the set and\n       * for adding a new item to the set.\n       *\n       * @param item       The item to check or add to the Set instance.\n       * @param shouldAdd  If true, the item will be added to the set if it doesn't\n       *                   already exist.\n       * @param set        The set instance to check or add to.\n       * @return {boolean} When shouldAdd is true, this will return true when a new\n       *                   item was added otherwise false. When shouldAdd is false,\n       *                   this will return true if the item already exists, otherwise\n       *                   false.\n       */\n    // distinguish between +0 and -0\n    // these types can all utilise Set\n    // set._items['boolean'] holds a two element array\n    // representing [ falseExists, trueExists ]\n    // compare functions for reference equality\n    /* falls through */\n    // reduce the search size of heterogeneous sets by creating buckets\n    // for each type.\n    // scan through all previously applied items\n    var _Set = function () {\n        function _Set() {\n            /* globals Set */\n            this._nativeSet = typeof Set === 'function' ? new Set() : null;\n            this._items = {};\n        }\n        _Set.prototype.add = function (item) {\n            return hasOrAdd(item, true, this);\n        };\n        _Set.prototype.has = function (item) {\n            return hasOrAdd(item, false, this);\n        };\n        /**\n       * Combines the logic for checking whether an item is a member of the set and\n       * for adding a new item to the set.\n       *\n       * @param item       The item to check or add to the Set instance.\n       * @param shouldAdd  If true, the item will be added to the set if it doesn't\n       *                   already exist.\n       * @param set        The set instance to check or add to.\n       * @return {boolean} When shouldAdd is true, this will return true when a new\n       *                   item was added otherwise false. When shouldAdd is false,\n       *                   this will return true if the item already exists, otherwise\n       *                   false.\n       */\n        function hasOrAdd(item, shouldAdd, set) {\n            var type = typeof item;\n            var prevSize, newSize;\n            switch (type) {\n            case 'string':\n            case 'number':\n                // distinguish between +0 and -0\n                if (item === 0 && !set._items['-0'] && 1 / item === -Infinity) {\n                    if (shouldAdd) {\n                        set._items['-0'] = true;\n                    }\n                    return shouldAdd;\n                }\n                // these types can all utilise Set\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize > prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = {};\n                            set._items[type][item] = true;\n                        }\n                        return shouldAdd;\n                    } else if (item in set._items[type]) {\n                        return !shouldAdd;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][item] = true;\n                        }\n                        return shouldAdd;\n                    }\n                }\n            case 'boolean':\n                // set._items['boolean'] holds a two element array\n                // representing [ falseExists, trueExists ]\n                if (type in set._items) {\n                    var bIdx = item ? 1 : 0;\n                    if (set._items[type][bIdx]) {\n                        return !shouldAdd;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][bIdx] = true;\n                        }\n                        return shouldAdd;\n                    }\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = item ? [\n                            false,\n                            true\n                        ] : [\n                            true,\n                            false\n                        ];\n                    }\n                    return shouldAdd;\n                }\n            case 'function':\n                // compare functions for reference equality\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize > prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = [item];\n                        }\n                        return shouldAdd;\n                    }\n                    if (!_contains(item, set._items[type])) {\n                        if (shouldAdd) {\n                            set._items[type].push(item);\n                        }\n                        return shouldAdd;\n                    }\n                }\n                return !shouldAdd;\n            case 'undefined':\n                if (set._items[type]) {\n                    return !shouldAdd;\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = true;\n                    }\n                    return shouldAdd;\n                }\n            case 'object':\n                if (item === null) {\n                    if (!set._items['null']) {\n                        if (shouldAdd) {\n                            set._items['null'] = true;\n                        }\n                        return shouldAdd;\n                    }\n                    return !shouldAdd;\n                }\n            /* falls through */\n            default:\n                // reduce the search size of heterogeneous sets by creating buckets\n                // for each type.\n                type = Object.prototype.toString.call(item);\n                if (!(type in set._items)) {\n                    if (shouldAdd) {\n                        set._items[type] = [item];\n                    }\n                    return shouldAdd;\n                }\n                // scan through all previously applied items\n                if (!_contains(item, set._items[type])) {\n                    if (shouldAdd) {\n                        set._items[type].push(item);\n                    }\n                    return shouldAdd;\n                }\n                return !shouldAdd;\n            }\n        }\n        return _Set;\n    }();\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation,\n     * returning the result of the first function if it is false-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * false-y value.\n     *\n     * In addition to functions, `R.both` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = _curry2(function both(f, g) {\n        return _isFunction(f) ? function _both() {\n            return f.apply(this, arguments) && g.apply(this, arguments);\n        } : lift(and)(f, g);\n    });\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation,\n     * returning the result of the first function if it is truth-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * truth-y value.\n     *\n     * In addition to functions, `R.either` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = _curry2(function either(f, g) {\n        return _isFunction(f) ? function _either() {\n            return f.apply(this, arguments) || g.apply(this, arguments);\n        } : lift(or)(f, g);\n    });\n\n    /**\n     * Turns a named method with a specified arity into a function that can be\n     * called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {String} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && is(Function, target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each element and\n     * concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn`\n     * for a given argument set and returns the result. Subsequent calls to the\n     * memoized `fn` with the same argument set will not result in an additional\n     * call to `fn`; instead, the cached result for that set of arguments will be\n     * returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return _arity(fn.length, function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        });\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @see R.match\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied function to\n     * each list element. Prefers the first item if the supplied function produces\n     * the same value on two items. `R.equals` is used for comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    var uniqBy = _curry2(function uniqBy(fn, list) {\n        var set = new _Set();\n        var result = [];\n        var idx = 0;\n        var appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (set.add(appliedItem)) {\n                result.push(item);\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Dispatches to the `concat` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = flip(invoker(1, 'concat'));\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifferenceWith\n     * @example\n     *\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n     */\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n        return concat(difference(list1, list2), difference(list2, list1));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both. Duplication is determined according to the value\n     * returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifference\n     * @example\n     *\n     *      var eqA = R.eqBy(R.prop('a'));\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n     */\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list. `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqBy(identity);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @see R.intersectionWith\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        return uniq(_filter(flip(_contains)(lookupList), filteredList));\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        allUniq: allUniq,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        applySpec: applySpec,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clamp: clamp,\n        clone: clone,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        converge: converge,\n        countBy: countBy,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        groupBy: groupBy,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexBy: indexBy,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        join: join,\n        juxt: juxt,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensPath: lensPath,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        mergeWith: mergeWith,\n        mergeWithKey: mergeWithKey,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pathSatisfies: pathSatisfies,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceBy: reduceBy,\n        reduceRight: reduceRight,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        sequence: sequence,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitAt: splitAt,\n        splitEvery: splitEvery,\n        splitWhen: splitWhen,\n        subtract: subtract,\n        sum: sum,\n        symmetricDifference: symmetricDifference,\n        symmetricDifferenceWith: symmetricDifferenceWith,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        transpose: transpose,\n        traverse: traverse,\n        trim: trim,\n        tryCatch: tryCatch,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        until: until,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        without: without,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ramda/dist/ramda.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}